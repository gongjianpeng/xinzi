/*
 * jQuery UI 1.8.15
 * $Id: jquery.ui.core.js,v 1.4 2011/12/06 07:19:28 licongping Exp $
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function(a, d) {
	a.ui = a.ui || {};
	if (a.ui.version) {
		return
	}
	a.extend(a.ui, {
		version : "1.8.15",
		keyCode : {
			ALT : 18,
			BACKSPACE : 8,
			CAPS_LOCK : 20,
			COMMA : 188,
			COMMAND : 91,
			COMMAND_LEFT : 91,
			COMMAND_RIGHT : 93,
			CONTROL : 17,
			DELETE : 46,
			DOWN : 40,
			END : 35,
			ENTER : 13,
			ESCAPE : 27,
			HOME : 36,
			INSERT : 45,
			LEFT : 37,
			MENU : 93,
			NUMPAD_ADD : 107,
			NUMPAD_DECIMAL : 110,
			NUMPAD_DIVIDE : 111,
			NUMPAD_ENTER : 108,
			NUMPAD_MULTIPLY : 106,
			NUMPAD_SUBTRACT : 109,
			PAGE_DOWN : 34,
			PAGE_UP : 33,
			PERIOD : 190,
			RIGHT : 39,
			SHIFT : 16,
			SPACE : 32,
			TAB : 9,
			UP : 38,
			WINDOWS : 91
		}
	});
	a.fn
			.extend( {
				propAttr : a.fn.prop || a.fn.attr,
				_focus : a.fn.focus,
				focus : function(e, f) {
					return typeof e === "number" ? this.each(function() {
						var g = this;
						setTimeout(function() {
							a(g).focus();
							if (f) {
								f.call(g)
							}
						}, e)
					}) : this._focus.apply(this, arguments)
				},
				scrollParent : function() {
					var e;
					if ((a.browser.msie && (/(static|relative)/).test(this
							.css("position")))
							|| (/absolute/).test(this.css("position"))) {
						e = this.parents().filter(
								function() {
									return (/(relative|absolute|fixed)/).test(a
											.curCSS(this, "position", 1))
											&& (/(auto|scroll)/).test(a.curCSS(
													this, "overflow", 1)
													+ a.curCSS(this,
															"overflow-y", 1)
													+ a.curCSS(this,
															"overflow-x", 1))
								}).eq(0)
					} else {
						e = this.parents().filter(
								function() {
									return (/(auto|scroll)/).test(a.curCSS(
											this, "overflow", 1)
											+ a.curCSS(this, "overflow-y", 1)
											+ a.curCSS(this, "overflow-x", 1))
								}).eq(0)
					}
					return (/fixed/).test(this.css("position")) || !e.length ? a(document)
							: e
				},
				zIndex : function(h) {
					if (h !== d) {
						return this.css("zIndex", h)
					}
					if (this.length) {
						var f = a(this[0]), e, g;
						while (f.length && f[0] !== document) {
							e = f.css("position");
							if (e === "absolute" || e === "relative"
									|| e === "fixed") {
								g = parseInt(f.css("zIndex"), 10);
								if (!isNaN(g) && g !== 0) {
									return g
								}
							}
							f = f.parent()
						}
					}
					return 0
				},
				disableSelection : function() {
					return this.bind((a.support.selectstart ? "selectstart"
							: "mousedown")
							+ ".ui-disableSelection", function(e) {
						e.preventDefault()
					})
				},
				enableSelection : function() {
					return this.unbind(".ui-disableSelection")
				}
			});
	a.each( [ "Width", "Height" ],
			function(g, e) {
				var f = e === "Width" ? [ "Left", "Right" ]
						: [ "Top", "Bottom" ], h = e.toLowerCase(), k = {
					innerWidth : a.fn.innerWidth,
					innerHeight : a.fn.innerHeight,
					outerWidth : a.fn.outerWidth,
					outerHeight : a.fn.outerHeight
				};
				function j(m, l, i, o) {
					a.each(f,
							function() {
								l -= parseFloat(a.curCSS(m, "padding" + this,
										true)) || 0;
								if (i) {
									l -= parseFloat(a.curCSS(m, "border" + this
											+ "Width", true)) || 0
								}
								if (o) {
									l -= parseFloat(a.curCSS(m,
											"margin" + this, true)) || 0
								}
							});
					return l
				}
				a.fn["inner" + e] = function(i) {
					if (i === d) {
						return k["inner" + e].call(this)
					}
					return this.each(function() {
						a(this).css(h, j(this, i) + "px")
					})
				};
				a.fn["outer" + e] = function(i, l) {
					if (typeof i !== "number") {
						return k["outer" + e].call(this, i)
					}
					return this.each(function() {
						a(this).css(h, j(this, i, true, l) + "px")
					})
				}
			});
	function c(g, e) {
		var j = g.nodeName.toLowerCase();
		if ("area" === j) {
			var i = g.parentNode, h = i.name, f;
			if (!g.href || !h || i.nodeName.toLowerCase() !== "map") {
				return false
			}
			f = a("img[usemap=#" + h + "]")[0];
			return !!f && b(f)
		}
		return (/input|select|textarea|button|object/.test(j) ? !g.disabled
				: "a" == j ? g.href || e : e)
				&& b(g)
	}
	function b(e) {
		return !a(e).parents().andSelf().filter(
				function() {
					return a.curCSS(this, "visibility") === "hidden"
							|| a.expr.filters.hidden(this)
				}).length
	}
	a.extend(a.expr[":"], {
		data : function(g, f, e) {
			return !!a.data(g, e[3])
		},
		focusable : function(e) {
			return c(e, !isNaN(a.attr(e, "tabindex")))
		},
		tabbable : function(g) {
			var e = a.attr(g, "tabindex"), f = isNaN(e);
			return (f || e >= 0) && c(g, !f)
		}
	});
	a(function() {
		var e = document.body, f = e.appendChild(f = document
				.createElement("div"));
		a.extend(f.style, {
			minHeight : "100px",
			height : "auto",
			padding : 0,
			borderWidth : 0
		});
		a.support.minHeight = f.offsetHeight === 100;
		a.support.selectstart = "onselectstart" in f;
		e.removeChild(f).style.display = "none"
	});
	a
			.extend(a.ui,
					{
						plugin : {
							add : function(f, g, j) {
								var h = a.ui[f] ? a.ui[f].prototype
										: a.om[f].prototype;
								for ( var e in j) {
									h.plugins[e] = h.plugins[e] || [];
									h.plugins[e].push( [ g, j[e] ])
								}
							},
							call : function(e, g, f) {
								var j = e.plugins[g];
								if (!j || !e.element[0].parentNode) {
									return
								}
								for ( var h = 0; h < j.length; h++) {
									if (e.options[j[h][0]]) {
										j[h][1].apply(e.element, f)
									}
								}
							}
						},
						contains : function(f, e) {
							return document.compareDocumentPosition ? f
									.compareDocumentPosition(e) & 16 : f !== e
									&& f.contains(e)
						},
						hasScroll : function(h, f) {
							if (a(h).css("overflow") === "hidden") {
								return false
							}
							var e = (f && f === "left") ? "scrollLeft"
									: "scrollTop", g = false;
							if (h[e] > 0) {
								return true
							}
							h[e] = 1;
							g = (h[e] > 0);
							h[e] = 0;
							return g
						},
						isOverAxis : function(f, e, g) {
							return (f > e) && (f < (e + g))
						},
						isOver : function(j, f, i, h, e, g) {
							return a.ui.isOverAxis(j, i, e)
									&& a.ui.isOverAxis(f, h, g)
						}
					})
})(jQuery);
/*
 * jQuery UI Widget 1.8.15 $Id: jquery.ui.widget.js,v 1.3 2011/12/06 07:19:29
 * licongping Exp $ Copyright 2011, AUTHORS.txt (http://jqueryui.com/about) Dual
 * licensed under the MIT or GPL Version 2 licenses. http://jquery.org/license
 * 
 * http://docs.jquery.com/UI/Widget
 */
(function(b, d) {
	if (b.cleanData) {
		var c = b.cleanData;
		b.cleanData = function(e) {
			for ( var f = 0, g; (g = e[f]) != null; f++) {
				b(g).triggerHandler("remove")
			}
			c(e)
		}
	} else {
		var a = b.fn.remove;
		b.fn.remove = function(e, f) {
			return this.each(function() {
				if (!f) {
					if (!e || b.filter(e, [ this ]).length) {
						b("*", this).add( [ this ]).each(function() {
							b(this).triggerHandler("remove")
						})
					}
				}
				return a.call(b(this), e, f)
			})
		}
	}
	b.widget = function(f, h, e) {
		var g = f.split(".")[0], j;
		f = f.split(".")[1];
		j = g + "-" + f;
		if (!e) {
			e = h;
			h = b.Widget
		}
		b.expr[":"][j] = function(k) {
			return !!b.data(k, f)
		};
		b[g] = b[g] || {};
		b[g][f] = function(k, l) {
			if (arguments.length) {
				this._createWidget(k, l)
			}
		};
		var i = new h();
		i.options = b.extend(true, {}, i.options);
		b[g][f].prototype = b.extend(true, i, {
			namespace : g,
			widgetName : f,
			widgetEventPrefix : b[g][f].prototype.widgetEventPrefix || f,
			widgetBaseClass : j
		}, e);
		b.widget.bridge(f, b[g][f])
	};
	b.widget.bridge = function(f, e) {
		b.fn[f] = function(i) {
			var g = typeof i === "string", h = Array.prototype.slice.call(
					arguments, 1), j = this;
			i = !g && h.length ? b.extend.apply(null, [ true, i ].concat(h))
					: i;
			if (g && i.charAt(0) === "_") {
				return j
			}
			if (g) {
				this.each(function() {
					var k = b.data(this, f), l = k && b.isFunction(k[i]) ? k[i]
							.apply(k, h) : k;
					if (l !== k && l !== d) {
						j = l;
						return false
					}
				})
			} else {
				this.each(function() {
					var k = b.data(this, f);
					if (k) {
						k.option(i || {})._init()
					} else {
						b.data(this, f, new e(i, this))
					}
				})
			}
			return j
		}
	};
	b.Widget = function(e, f) {
		if (arguments.length) {
			this._createWidget(e, f)
		}
	};
	b.Widget.prototype = {
		widgetName : "widget",
		widgetEventPrefix : "",
		options : {
			disabled : false
		},
		_createWidget : function(f, g) {
			b.data(g, this.widgetName, this);
			this.element = b(g);
			this.options = b.extend(true, {}, this.options, this
					._getCreateOptions(), f);
			var e = this;
			this.element.bind("remove." + this.widgetName, function() {
				e.destroy()
			});
			this._create();
			this._trigger("create");
			this._init()
		},
		_getCreateOptions : function() {
			return b.metadata
					&& b.metadata.get(this.element[0])[this.widgetName]
		},
		_create : function() {
		},
		_init : function() {
		},
		destroy : function() {
			this.element.unbind("." + this.widgetName).removeData(
					this.widgetName);
			this.widget().unbind("." + this.widgetName).removeAttr(
					"aria-disabled").removeClass(
					this.widgetBaseClass + "-disabled ui-state-disabled")
		},
		widget : function() {
			return this.element
		},
		option : function(f, g) {
			var e = f;
			if (arguments.length === 0) {
				return b.extend( {}, this.options)
			}
			if (typeof f === "string") {
				if (g === d) {
					return this.options[f]
				}
				e = {};
				e[f] = g
			}
			this._setOptions(e);
			return this
		},
		_setOptions : function(f) {
			var e = this;
			b.each(f, function(g, h) {
				e._setOption(g, h)
			});
			return this
		},
		_setOption : function(e, f) {
			this.options[e] = f;
			if (e === "disabled") {
				this.widget()[f ? "addClass" : "removeClass"](
						this.widgetBaseClass + "-disabled ui-state-disabled")
						.attr("aria-disabled", f)
			}
			return this
		},
		enable : function() {
			return this._setOption("disabled", false)
		},
		disable : function() {
			return this._setOption("disabled", true)
		},
		_trigger : function(f, g, h) {
			var k = this.options[f];
			g = b.Event(g);
			g.type = (f === this.widgetEventPrefix ? f : this.widgetEventPrefix
					+ f).toLowerCase();
			h = h || {};
			if (g.originalEvent) {
				for ( var e = b.event.props.length, j; e;) {
					j = b.event.props[--e];
					g[j] = g.originalEvent[j]
				}
			}
			this.element.trigger(g, h);
			return !(b.isFunction(k) && k.call(this.element[0], g, h) === false || g
					.isDefaultPrevented())
		}
	}
})(jQuery);
/*
 * jQuery UI Mouse 1.8.15 $Id: jquery.ui.mouse.js,v 1.2 2011/12/06 07:19:29
 * licongping Exp $ Copyright 2011, AUTHORS.txt (http://jqueryui.com/about) Dual
 * licensed under the MIT or GPL Version 2 licenses. http://jquery.org/license
 * 
 * http://docs.jquery.com/UI/Mouse
 * 
 * Depends: jquery.ui.widget.js
 */
(function(a, b) {
	a
			.widget(
					"ui.mouse",
					{
						options : {
							cancel : ":input,option",
							distance : 1,
							delay : 0
						},
						_mouseInit : function() {
							var c = this;
							this.element
									.bind("mousedown." + this.widgetName,
											function(d) {
												return c._mouseDown(d)
											})
									.bind(
											"click." + this.widgetName,
											function(d) {
												if (true === a
														.data(
																d.target,
																c.widgetName
																		+ ".preventClickEvent")) {
													a
															.removeData(
																	d.target,
																	c.widgetName
																			+ ".preventClickEvent");
													d
															.stopImmediatePropagation();
													return false
												}
											});
							this.started = false
						},
						_mouseDestroy : function() {
							this.element.unbind("." + this.widgetName)
						},
						_mouseDown : function(e) {
							e.originalEvent = e.originalEvent || {};
							if (e.originalEvent.mouseHandled) {
								return
							}
							(this._mouseStarted && this._mouseUp(e));
							this._mouseDownEvent = e;
							var d = this, f = (e.which == 1), c = (typeof this.options.cancel == "string" ? a(
									e.target).closest(this.options.cancel).length
									: false);
							if (!f || c || !this._mouseCapture(e)) {
								return true
							}
							this.mouseDelayMet = !this.options.delay;
							if (!this.mouseDelayMet) {
								this._mouseDelayTimer = setTimeout(function() {
									d.mouseDelayMet = true
								}, this.options.delay)
							}
							if (this._mouseDistanceMet(e)
									&& this._mouseDelayMet(e)) {
								this._mouseStarted = (this._mouseStart(e) !== false);
								if (!this._mouseStarted) {
									e.preventDefault();
									return true
								}
							}
							if (true === a.data(e.target, this.widgetName
									+ ".preventClickEvent")) {
								a.removeData(e.target, this.widgetName
										+ ".preventClickEvent")
							}
							this._mouseMoveDelegate = function(g) {
								return d._mouseMove(g)
							};
							this._mouseUpDelegate = function(g) {
								return d._mouseUp(g)
							};
							a(document).bind("mousemove." + this.widgetName,
									this._mouseMoveDelegate).bind(
									"mouseup." + this.widgetName,
									this._mouseUpDelegate);
							e.preventDefault();
							e.originalEvent.mouseHandled = true;
							return true
						},
						_mouseMove : function(c) {
							if (a.browser.msie && !(document.documentMode >= 9)
									&& !c.button) {
								return this._mouseUp(c)
							}
							if (this._mouseStarted) {
								this._mouseDrag(c);
								return c.preventDefault()
							}
							if (this._mouseDistanceMet(c)
									&& this._mouseDelayMet(c)) {
								this._mouseStarted = (this._mouseStart(
										this._mouseDownEvent, c) !== false);
								(this._mouseStarted ? this._mouseDrag(c) : this
										._mouseUp(c))
							}
							return !this._mouseStarted
						},
						_mouseUp : function(c) {
							a(document).unbind("mousemove." + this.widgetName,
									this._mouseMoveDelegate).unbind(
									"mouseup." + this.widgetName,
									this._mouseUpDelegate);
							if (this._mouseStarted) {
								this._mouseStarted = false;
								if (c.target == this._mouseDownEvent.target) {
									a.data(c.target, this.widgetName
											+ ".preventClickEvent", true)
								}
								this._mouseStop(c)
							}
							return false
						},
						_mouseDistanceMet : function(c) {
							return (Math.max(Math
									.abs(this._mouseDownEvent.pageX - c.pageX),
									Math.abs(this._mouseDownEvent.pageY
											- c.pageY)) >= this.options.distance)
						},
						_mouseDelayMet : function(c) {
							return this.mouseDelayMet
						},
						_mouseStart : function(c) {
						},
						_mouseDrag : function(c) {
						},
						_mouseStop : function(c) {
						},
						_mouseCapture : function(c) {
							return true
						}
					})
})(jQuery);
(function(f, g) {
	f.ui = f.ui || {};
	var d = /left|center|right/, e = /top|center|bottom/, a = "center", b = f.fn.position, c = f.fn.offset;
	f.fn.position = function(i) {
		if (!i || !i.of) {
			return b.apply(this, arguments)
		}
		i = f.extend( {}, i);
		var m = f(i.of), l = m[0], p = (i.collision || "flip").split(" "), o = i.offset ? i.offset
				.split(" ")
				: [ 0, 0 ], k, h, j;
		if (l.nodeType === 9) {
			k = m.width();
			h = m.height();
			j = {
				top : 0,
				left : 0
			}
		} else {
			if (l.setTimeout) {
				k = m.width();
				h = m.height();
				j = {
					top : m.scrollTop(),
					left : m.scrollLeft()
				}
			} else {
				if (l.preventDefault) {
					i.at = "left top";
					k = h = 0;
					j = {
						top : i.of.pageY,
						left : i.of.pageX
					}
				} else {
					k = m.outerWidth();
					h = m.outerHeight();
					j = m.offset()
				}
			}
		}
		f.each( [ "my", "at" ], function() {
			var q = (i[this] || "").split(" ");
			if (q.length === 1) {
				q = d.test(q[0]) ? q.concat( [ a ]) : e.test(q[0]) ? [ a ]
						.concat(q) : [ a, a ]
			}
			q[0] = d.test(q[0]) ? q[0] : a;
			q[1] = e.test(q[1]) ? q[1] : a;
			i[this] = q
		});
		if (p.length === 1) {
			p[1] = p[0]
		}
		o[0] = parseInt(o[0], 10) || 0;
		if (o.length === 1) {
			o[1] = o[0]
		}
		o[1] = parseInt(o[1], 10) || 0;
		if (i.at[0] === "right") {
			j.left += k
		} else {
			if (i.at[0] === a) {
				j.left += k / 2
			}
		}
		if (i.at[1] === "bottom") {
			j.top += h
		} else {
			if (i.at[1] === a) {
				j.top += h / 2
			}
		}
		j.left += o[0];
		j.top += o[1];
		return this
				.each(function() {
					var t = f(this), v = t.outerWidth(), s = t.outerHeight(), u = parseInt(f
							.curCSS(this, "marginLeft", true)) || 0, r = parseInt(f
							.curCSS(this, "marginTop", true)) || 0, x = v
							+ u
							+ (parseInt(f.curCSS(this, "marginRight", true)) || 0), y = s
							+ r
							+ (parseInt(f.curCSS(this, "marginBottom", true)) || 0), w = f
							.extend( {}, j), q;
					if (i.my[0] === "right") {
						w.left -= v
					} else {
						if (i.my[0] === a) {
							w.left -= v / 2
						}
					}
					if (i.my[1] === "bottom") {
						w.top -= s
					} else {
						if (i.my[1] === a) {
							w.top -= s / 2
						}
					}
					w.left = Math.round(w.left);
					w.top = Math.round(w.top);
					q = {
						left : w.left - u,
						top : w.top - r
					};
					f.each( [ "left", "top" ], function(A, z) {
						if (f.ui.position[p[A]]) {
							f.ui.position[p[A]][z](w, {
								targetWidth : k,
								targetHeight : h,
								elemWidth : v,
								elemHeight : s,
								collisionPosition : q,
								collisionWidth : x,
								collisionHeight : y,
								offset : o,
								my : i.my,
								at : i.at
							})
						}
					});
					if (f.fn.bgiframe) {
						t.bgiframe()
					}
					t.offset(f.extend(w, {
						using : i.using
					}))
				})
	};
	f.ui.position = {
		fit : {
			left : function(h, i) {
				var k = f(window), j = i.collisionPosition.left
						+ i.collisionWidth - k.width() - k.scrollLeft();
				h.left = j > 0 ? h.left - j : Math.max(h.left
						- i.collisionPosition.left, h.left)
			},
			top : function(h, i) {
				var k = f(window), j = i.collisionPosition.top
						+ i.collisionHeight - k.height() - k.scrollTop();
				h.top = j > 0 ? h.top - j : Math.max(h.top
						- i.collisionPosition.top, h.top)
			}
		},
		flip : {
			left : function(i, k) {
				if (k.at[0] === a) {
					return
				}
				var m = f(window), l = k.collisionPosition.left
						+ k.collisionWidth - m.width() - m.scrollLeft(), h = k.my[0] === "left" ? -k.elemWidth
						: k.my[0] === "right" ? k.elemWidth : 0, j = k.at[0] === "left" ? k.targetWidth
						: -k.targetWidth, o = -2 * k.offset[0];
				i.left += k.collisionPosition.left < 0 ? h + j + o : l > 0 ? h
						+ j + o : 0
			},
			top : function(i, k) {
				if (k.at[1] === a) {
					return
				}
				var m = f(window), l = k.collisionPosition.top
						+ k.collisionHeight - m.height() - m.scrollTop(), h = k.my[1] === "top" ? -k.elemHeight
						: k.my[1] === "bottom" ? k.elemHeight : 0, j = k.at[1] === "top" ? k.targetHeight
						: -k.targetHeight, o = -2 * k.offset[1];
				i.top += k.collisionPosition.top < 0 ? h + j + o : l > 0 ? h
						+ j + o : 0
			}
		}
	};
	if (!f.offset.setOffset) {
		f.offset.setOffset = function(l, i) {
			if (/static/.test(f.curCSS(l, "position"))) {
				l.style.position = "relative"
			}
			var k = f(l), o = k.offset(), h = parseInt(
					f.curCSS(l, "top", true), 10) || 0, m = parseInt(f.curCSS(
					l, "left", true), 10) || 0, j = {
				top : (i.top - o.top) + h,
				left : (i.left - o.left) + m
			};
			if ("using" in i) {
				i.using.call(l, j)
			} else {
				k.css(j)
			}
		};
		f.fn.offset = function(h) {
			var i = this[0];
			if (!i || !i.ownerDocument) {
				return null
			}
			if (h) {
				return this.each(function() {
					f.offset.setOffset(this, h)
				})
			}
			return c.call(this)
		}
	}
}(jQuery));
(function(a, b) {
	a
			.widget(
					"ui.draggable",
					a.ui.mouse,
					{
						widgetEventPrefix : "drag",
						options : {
							addClasses : true,
							appendTo : "parent",
							axis : false,
							connectToSortable : false,
							containment : false,
							cursor : "auto",
							cursorAt : false,
							grid : false,
							handle : false,
							helper : "original",
							iframeFix : false,
							opacity : false,
							refreshPositions : false,
							revert : false,
							revertDuration : 500,
							scope : "default",
							scroll : true,
							scrollSensitivity : 20,
							scrollSpeed : 20,
							snap : false,
							snapMode : "both",
							snapTolerance : 20,
							stack : false,
							zIndex : false
						},
						_create : function() {
							if (this.options.helper == "original"
									&& !(/^(?:r|a|f)/).test(this.element
											.css("position"))) {
								this.element[0].style.position = "relative"
							}
							(this.options.addClasses && this.element
									.addClass("ui-draggable"));
							(this.options.disabled && this.element
									.addClass("ui-draggable-disabled"));
							this._mouseInit()
						},
						destroy : function() {
							if (!this.element.data("draggable")) {
								return
							}
							this.element
									.removeData("draggable")
									.unbind(".draggable")
									.removeClass(
											"ui-draggable ui-draggable-dragging ui-draggable-disabled");
							this._mouseDestroy();
							return this
						},
						_mouseCapture : function(c) {
							var d = this.options;
							if (this.helper || d.disabled
									|| a(c.target).is(".ui-resizable-handle")) {
								return false
							}
							this.handle = this._getHandle(c);
							if (!this.handle) {
								return false
							}
							a(d.iframeFix === true ? "iframe" : d.iframeFix)
									.each(
											function() {
												a(
														'<div class="ui-draggable-iframeFix" style="background: #fff;"></div>')
														.css(
																{
																	width : this.offsetWidth
																			+ "px",
																	height : this.offsetHeight
																			+ "px",
																	position : "absolute",
																	opacity : "0.001",
																	zIndex : 1000
																})
														.css(a(this).offset())
														.appendTo("body")
											});
							return true
						},
						_mouseStart : function(c) {
							var d = this.options;
							this.helper = this._createHelper(c);
							this._cacheHelperProportions();
							if (a.ui.ddmanager) {
								a.ui.ddmanager.current = this
							}
							this._cacheMargins();
							this.cssPosition = this.helper.css("position");
							this.scrollParent = this.helper.scrollParent();
							this.offset = this.positionAbs = this.element
									.offset();
							this.offset = {
								top : this.offset.top - this.margins.top,
								left : this.offset.left - this.margins.left
							};
							a.extend(this.offset, {
								click : {
									left : c.pageX - this.offset.left,
									top : c.pageY - this.offset.top
								},
								parent : this._getParentOffset(),
								relative : this._getRelativeOffset()
							});
							this.originalPosition = this.position = this
									._generatePosition(c);
							this.originalPageX = c.pageX;
							this.originalPageY = c.pageY;
							(d.cursorAt && this
									._adjustOffsetFromHelper(d.cursorAt));
							if (d.containment) {
								this._setContainment()
							}
							if (this._trigger("start", c) === false) {
								this._clear();
								return false
							}
							this._cacheHelperProportions();
							if (a.ui.ddmanager && !d.dropBehaviour) {
								a.ui.ddmanager.prepareOffsets(this, c)
							}
							this.helper.addClass("ui-draggable-dragging");
							this._mouseDrag(c, true);
							if (a.ui.ddmanager) {
								a.ui.ddmanager.dragStart(this, c)
							}
							return true
						},
						_mouseDrag : function(c, e) {
							this.position = this._generatePosition(c);
							this.positionAbs = this
									._convertPositionTo("absolute");
							if (!e) {
								var d = this._uiHash();
								if (this._trigger("drag", c, d) === false) {
									this._mouseUp( {});
									return false
								}
								this.position = d.position
							}
							if (!this.options.axis || this.options.axis != "y") {
								this.helper[0].style.left = this.position.left
										+ "px"
							}
							if (!this.options.axis || this.options.axis != "x") {
								this.helper[0].style.top = this.position.top
										+ "px"
							}
							if (a.ui.ddmanager) {
								a.ui.ddmanager.drag(this, c)
							}
							return false
						},
						_mouseStop : function(d) {
							var e = false;
							if (a.ui.ddmanager && !this.options.dropBehaviour) {
								e = a.ui.ddmanager.drop(this, d)
							}
							if (this.dropped) {
								e = this.dropped;
								this.dropped = false
							}
							if ((!this.element[0] || !this.element[0].parentNode)
									&& this.options.helper == "original") {
								return false
							}
							if ((this.options.revert == "invalid" && !e)
									|| (this.options.revert == "valid" && e)
									|| this.options.revert === true
									|| (a.isFunction(this.options.revert) && this.options.revert
											.call(this.element, e))) {
								var c = this;
								a(this.helper)
										.animate(
												this.originalPosition,
												parseInt(
														this.options.revertDuration,
														10),
												function() {
													if (c._trigger("stop", d) !== false) {
														c._clear()
													}
												})
							} else {
								if (this._trigger("stop", d) !== false) {
									this._clear()
								}
							}
							return false
						},
						_mouseUp : function(c) {
							if (this.options.iframeFix === true) {
								a("div.ui-draggable-iframeFix").each(
										function() {
											this.parentNode.removeChild(this)
										})
							}
							if (a.ui.ddmanager) {
								a.ui.ddmanager.dragStop(this, c)
							}
							return a.ui.mouse.prototype._mouseUp.call(this, c)
						},
						cancel : function() {
							if (this.helper.is(".ui-draggable-dragging")) {
								this._mouseUp( {})
							} else {
								this._clear()
							}
							return this
						},
						_getHandle : function(c) {
							var d = !this.options.handle
									|| !a(this.options.handle, this.element).length ? true
									: false;
							a(this.options.handle, this.element).find("*")
									.andSelf().each(function() {
										if (this == c.target) {
											d = true
										}
									});
							return d
						},
						_createHelper : function(d) {
							var e = this.options;
							var c = a.isFunction(e.helper) ? a(e.helper.apply(
									this.element[0], [ d ]))
									: (e.helper == "clone" ? this.element
											.clone().removeAttr("id")
											: this.element);
							if (!c.parents("body").length) {
								c
										.appendTo((e.appendTo == "parent" ? this.element[0].parentNode
												: e.appendTo))
							}
							if (c[0] != this.element[0]
									&& !(/(fixed|absolute)/).test(c
											.css("position"))) {
								c.css("position", "absolute")
							}
							return c
						},
						_adjustOffsetFromHelper : function(c) {
							if (typeof c == "string") {
								c = c.split(" ")
							}
							if (a.isArray(c)) {
								c = {
									left : +c[0],
									top : +c[1] || 0
								}
							}
							if ("left" in c) {
								this.offset.click.left = c.left
										+ this.margins.left
							}
							if ("right" in c) {
								this.offset.click.left = this.helperProportions.width
										- c.right + this.margins.left
							}
							if ("top" in c) {
								this.offset.click.top = c.top
										+ this.margins.top
							}
							if ("bottom" in c) {
								this.offset.click.top = this.helperProportions.height
										- c.bottom + this.margins.top
							}
						},
						_getParentOffset : function() {
							this.offsetParent = this.helper.offsetParent();
							var c = this.offsetParent.offset();
							if (this.cssPosition == "absolute"
									&& this.scrollParent[0] != document
									&& a.ui.contains(this.scrollParent[0],
											this.offsetParent[0])) {
								c.left += this.scrollParent.scrollLeft();
								c.top += this.scrollParent.scrollTop()
							}
							if ((this.offsetParent[0] == document.body)
									|| (this.offsetParent[0].tagName
											&& this.offsetParent[0].tagName
													.toLowerCase() == "html" && a.browser.msie)) {
								c = {
									top : 0,
									left : 0
								}
							}
							return {
								top : c.top
										+ (parseInt(this.offsetParent
												.css("borderTopWidth"), 10) || 0),
								left : c.left
										+ (parseInt(this.offsetParent
												.css("borderLeftWidth"), 10) || 0)
							}
						},
						_getRelativeOffset : function() {
							if (this.cssPosition == "relative") {
								var c = this.element.position();
								return {
									top : c.top
											- (parseInt(this.helper.css("top"),
													10) || 0)
											+ this.scrollParent.scrollTop(),
									left : c.left
											- (parseInt(
													this.helper.css("left"), 10) || 0)
											+ this.scrollParent.scrollLeft()
								}
							} else {
								return {
									top : 0,
									left : 0
								}
							}
						},
						_cacheMargins : function() {
							this.margins = {
								left : (parseInt(
										this.element.css("marginLeft"), 10) || 0),
								top : (parseInt(this.element.css("marginTop"),
										10) || 0),
								right : (parseInt(this.element
										.css("marginRight"), 10) || 0),
								bottom : (parseInt(this.element
										.css("marginBottom"), 10) || 0)
							}
						},
						_cacheHelperProportions : function() {
							this.helperProportions = {
								width : this.helper.outerWidth(),
								height : this.helper.outerHeight()
							}
						},
						_setContainment : function() {
							var g = this.options;
							if (g.containment == "parent") {
								g.containment = this.helper[0].parentNode
							}
							if (g.containment == "document"
									|| g.containment == "window") {
								this.containment = [
										g.containment == "document" ? 0 : a(
												window).scrollLeft()
												- this.offset.relative.left
												- this.offset.parent.left,
										g.containment == "document" ? 0 : a(
												window).scrollTop()
												- this.offset.relative.top
												- this.offset.parent.top,
										(g.containment == "document" ? 0 : a(
												window).scrollLeft())
												+ a(
														g.containment == "document" ? document
																: window)
														.width()
												- this.helperProportions.width
												- this.margins.left,
										(g.containment == "document" ? 0 : a(
												window).scrollTop())
												+ (a(
														g.containment == "document" ? document
																: window)
														.height() || document.body.parentNode.scrollHeight)
												- this.helperProportions.height
												- this.margins.top ]
							}
							if (!(/^(document|window|parent)$/)
									.test(g.containment)
									&& g.containment.constructor != Array) {
								var h = a(g.containment);
								var e = h[0];
								if (!e) {
									return
								}
								var f = h.offset();
								var d = (a(e).css("overflow") != "hidden");
								this.containment = [
										(parseInt(a(e).css("borderLeftWidth"),
												10) || 0)
												+ (parseInt(a(e).css(
														"paddingLeft"), 10) || 0),
										(parseInt(a(e).css("borderTopWidth"),
												10) || 0)
												+ (parseInt(a(e).css(
														"paddingTop"), 10) || 0),
										(d ? Math.max(e.scrollWidth,
												e.offsetWidth) : e.offsetWidth)
												- (parseInt(a(e).css(
														"borderLeftWidth"), 10) || 0)
												- (parseInt(a(e).css(
														"paddingRight"), 10) || 0)
												- this.helperProportions.width
												- this.margins.left
												- this.margins.right,
										(d ? Math.max(e.scrollHeight,
												e.offsetHeight)
												: e.offsetHeight)
												- (parseInt(a(e).css(
														"borderTopWidth"), 10) || 0)
												- (parseInt(a(e).css(
														"paddingBottom"), 10) || 0)
												- this.helperProportions.height
												- this.margins.top
												- this.margins.bottom ];
								this.relative_container = h
							} else {
								if (g.containment.constructor == Array) {
									this.containment = g.containment
								}
							}
						},
						_convertPositionTo : function(g, i) {
							if (!i) {
								i = this.position
							}
							var e = g == "absolute" ? 1 : -1;
							var f = this.options, c = this.cssPosition == "absolute"
									&& !(this.scrollParent[0] != document && a.ui
											.contains(this.scrollParent[0],
													this.offsetParent[0])) ? this.offsetParent
									: this.scrollParent, h = (/(html|body)/i)
									.test(c[0].tagName);
							return {
								top : (i.top + this.offset.relative.top * e
										+ this.offset.parent.top * e - (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollTop()
												: (h ? 0 : c.scrollTop()))
												* e)),
								left : (i.left + this.offset.relative.left * e
										+ this.offset.parent.left * e - (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollLeft()
												: h ? 0 : c.scrollLeft())
												* e))
							}
						},
						_generatePosition : function(d) {
							var e = this.options, l = this.cssPosition == "absolute"
									&& !(this.scrollParent[0] != document && a.ui
											.contains(this.scrollParent[0],
													this.offsetParent[0])) ? this.offsetParent
									: this.scrollParent, i = (/(html|body)/i)
									.test(l[0].tagName);
							var h = d.pageX;
							var g = d.pageY;
							if (this.originalPosition) {
								var c;
								if (this.containment) {
									if (this.relative_container) {
										var k = this.relative_container
												.offset();
										c = [ this.containment[0] + k.left,
												this.containment[1] + k.top,
												this.containment[2] + k.left,
												this.containment[3] + k.top ]
									} else {
										c = this.containment
									}
									if (d.pageX - this.offset.click.left < c[0]) {
										h = c[0] + this.offset.click.left
									}
									if (d.pageY - this.offset.click.top < c[1]) {
										g = c[1] + this.offset.click.top
									}
									if (d.pageX - this.offset.click.left > c[2]) {
										h = c[2] + this.offset.click.left
									}
									if (d.pageY - this.offset.click.top > c[3]) {
										g = c[3] + this.offset.click.top
									}
								}
								if (e.grid) {
									var j = e.grid[1] ? this.originalPageY
											+ Math
													.round((g - this.originalPageY)
															/ e.grid[1])
											* e.grid[1]
											: this.originalPageY;
									g = c ? (!(j - this.offset.click.top < c[1] || j
											- this.offset.click.top > c[3]) ? j
											: (!(j - this.offset.click.top < c[1]) ? j
													- e.grid[1]
													: j + e.grid[1]))
											: j;
									var f = e.grid[0] ? this.originalPageX
											+ Math
													.round((h - this.originalPageX)
															/ e.grid[0])
											* e.grid[0]
											: this.originalPageX;
									h = c ? (!(f - this.offset.click.left < c[0] || f
											- this.offset.click.left > c[2]) ? f
											: (!(f - this.offset.click.left < c[0]) ? f
													- e.grid[0]
													: f + e.grid[0]))
											: f
								}
							}
							return {
								top : (g - this.offset.click.top
										- this.offset.relative.top
										- this.offset.parent.top + (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollTop()
												: (i ? 0 : l.scrollTop())))),
								left : (h - this.offset.click.left
										- this.offset.relative.left
										- this.offset.parent.left + (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollLeft()
												: i ? 0 : l.scrollLeft())))
							}
						},
						_clear : function() {
							this.helper.removeClass("ui-draggable-dragging");
							if (this.helper[0] != this.element[0]
									&& !this.cancelHelperRemoval) {
								this.helper.remove()
							}
							this.helper = null;
							this.cancelHelperRemoval = false
						},
						_trigger : function(c, d, e) {
							e = e || this._uiHash();
							a.ui.plugin.call(this, c, [ d, e ]);
							if (c == "drag") {
								this.positionAbs = this
										._convertPositionTo("absolute")
							}
							return a.Widget.prototype._trigger.call(this, c, d,
									e)
						},
						plugins : {},
						_uiHash : function(c) {
							return {
								helper : this.helper,
								position : this.position,
								originalPosition : this.originalPosition,
								offset : this.positionAbs
							}
						}
					});
	a.extend(a.ui.draggable, {
		version : "1.8.15"
	});
	a.ui.plugin
			.add(
					"draggable",
					"connectToSortable",
					{
						start : function(d, f) {
							var e = a(this).data("draggable"), g = e.options, c = a
									.extend( {}, f, {
										item : e.element
									});
							e.sortables = [];
							a(g.connectToSortable).each(function() {
								var h = a.data(this, "sortable");
								if (h && !h.options.disabled) {
									e.sortables.push( {
										instance : h,
										shouldRevert : h.options.revert
									});
									h.refreshPositions();
									h._trigger("activate", d, c)
								}
							})
						},
						stop : function(d, f) {
							var e = a(this).data("draggable"), c = a.extend(
									{}, f, {
										item : e.element
									});
							a
									.each(
											e.sortables,
											function() {
												if (this.instance.isOver) {
													this.instance.isOver = 0;
													e.cancelHelperRemoval = true;
													this.instance.cancelHelperRemoval = false;
													if (this.shouldRevert) {
														this.instance.options.revert = true
													}
													this.instance._mouseStop(d);
													this.instance.options.helper = this.instance.options._helper;
													if (e.options.helper == "original") {
														this.instance.currentItem
																.css( {
																	top : "auto",
																	left : "auto"
																})
													}
												} else {
													this.instance.cancelHelperRemoval = false;
													this.instance._trigger(
															"deactivate", d, c)
												}
											})
						},
						drag : function(d, g) {
							var f = a(this).data("draggable"), c = this;
							var e = function(j) {
								var q = this.offset.click.top, p = this.offset.click.left;
								var h = this.positionAbs.top, l = this.positionAbs.left;
								var k = j.height, m = j.width;
								var r = j.top, i = j.left;
								return a.ui.isOver(h + q, l + p, r, i, k, m)
							};
							a
									.each(
											f.sortables,
											function(h) {
												this.instance.positionAbs = f.positionAbs;
												this.instance.helperProportions = f.helperProportions;
												this.instance.offset.click = f.offset.click;
												if (this.instance
														._intersectsWith(this.instance.containerCache)) {
													if (!this.instance.isOver) {
														this.instance.isOver = 1;
														this.instance.currentItem = a(
																c)
																.clone()
																.removeAttr(
																		"id")
																.appendTo(
																		this.instance.element)
																.data(
																		"sortable-item",
																		true);
														this.instance.options._helper = this.instance.options.helper;
														this.instance.options.helper = function() {
															return g.helper[0]
														};
														d.target = this.instance.currentItem[0];
														this.instance
																._mouseCapture(
																		d, true);
														this.instance
																._mouseStart(d,
																		true,
																		true);
														this.instance.offset.click.top = f.offset.click.top;
														this.instance.offset.click.left = f.offset.click.left;
														this.instance.offset.parent.left -= f.offset.parent.left
																- this.instance.offset.parent.left;
														this.instance.offset.parent.top -= f.offset.parent.top
																- this.instance.offset.parent.top;
														f
																._trigger(
																		"toSortable",
																		d);
														f.dropped = this.instance.element;
														f.currentItem = f.element;
														this.instance.fromOutside = f
													}
													if (this.instance.currentItem) {
														this.instance
																._mouseDrag(d)
													}
												} else {
													if (this.instance.isOver) {
														this.instance.isOver = 0;
														this.instance.cancelHelperRemoval = true;
														this.instance.options.revert = false;
														this.instance
																._trigger(
																		"out",
																		d,
																		this.instance
																				._uiHash(this.instance));
														this.instance
																._mouseStop(d,
																		true);
														this.instance.options.helper = this.instance.options._helper;
														this.instance.currentItem
																.remove();
														if (this.instance.placeholder) {
															this.instance.placeholder
																	.remove()
														}
														f._trigger(
																"fromSortable",
																d);
														f.dropped = false
													}
												}
											})
						}
					});
	a.ui.plugin.add("draggable", "cursor", {
		start : function(d, e) {
			var c = a("body"), f = a(this).data("draggable").options;
			if (c.css("cursor")) {
				f._cursor = c.css("cursor")
			}
			c.css("cursor", f.cursor)
		},
		stop : function(d, e) {
			var c = a(this).data("draggable");
			if (c) {
				var f = c.options;
				if (f._cursor) {
					a("body").css("cursor", f._cursor)
				}
			}
		}
	});
	a.ui.plugin.add("draggable", "opacity", {
		start : function(d, e) {
			var c = a(e.helper), f = a(this).data("draggable").options;
			if (c.css("opacity")) {
				f._opacity = c.css("opacity")
			}
			c.css("opacity", f.opacity)
		},
		stop : function(c, d) {
			var e = a(this).data("draggable").options;
			if (e._opacity) {
				a(d.helper).css("opacity", e._opacity)
			}
		}
	});
	a.ui.plugin
			.add(
					"draggable",
					"scroll",
					{
						start : function(d, e) {
							var c = a(this).data("draggable");
							if (c.scrollParent[0] != document
									&& c.scrollParent[0].tagName != "HTML") {
								c.overflowOffset = c.scrollParent.offset()
							}
						},
						drag : function(e, f) {
							var d = a(this).data("draggable"), g = d.options, c = false;
							if (d.scrollParent[0] != document
									&& d.scrollParent[0].tagName != "HTML") {
								if (!g.axis || g.axis != "x") {
									if ((d.overflowOffset.top + d.scrollParent[0].offsetHeight)
											- e.pageY < g.scrollSensitivity) {
										d.scrollParent[0].scrollTop = c = d.scrollParent[0].scrollTop
												+ g.scrollSpeed
									} else {
										if (e.pageY - d.overflowOffset.top < g.scrollSensitivity) {
											d.scrollParent[0].scrollTop = c = d.scrollParent[0].scrollTop
													- g.scrollSpeed
										}
									}
								}
								if (!g.axis || g.axis != "y") {
									if ((d.overflowOffset.left + d.scrollParent[0].offsetWidth)
											- e.pageX < g.scrollSensitivity) {
										d.scrollParent[0].scrollLeft = c = d.scrollParent[0].scrollLeft
												+ g.scrollSpeed
									} else {
										if (e.pageX - d.overflowOffset.left < g.scrollSensitivity) {
											d.scrollParent[0].scrollLeft = c = d.scrollParent[0].scrollLeft
													- g.scrollSpeed
										}
									}
								}
							} else {
								if (!g.axis || g.axis != "x") {
									if (e.pageY - a(document).scrollTop() < g.scrollSensitivity) {
										c = a(document).scrollTop(
												a(document).scrollTop()
														- g.scrollSpeed)
									} else {
										if (a(window).height()
												- (e.pageY - a(document)
														.scrollTop()) < g.scrollSensitivity) {
											c = a(document).scrollTop(
													a(document).scrollTop()
															+ g.scrollSpeed)
										}
									}
								}
								if (!g.axis || g.axis != "y") {
									if (e.pageX - a(document).scrollLeft() < g.scrollSensitivity) {
										c = a(document).scrollLeft(
												a(document).scrollLeft()
														- g.scrollSpeed)
									} else {
										if (a(window).width()
												- (e.pageX - a(document)
														.scrollLeft()) < g.scrollSensitivity) {
											c = a(document).scrollLeft(
													a(document).scrollLeft()
															+ g.scrollSpeed)
										}
									}
								}
							}
							if (c !== false && a.ui.ddmanager
									&& !g.dropBehaviour) {
								a.ui.ddmanager.prepareOffsets(d, e)
							}
						}
					});
	a.ui.plugin
			.add(
					"draggable",
					"snap",
					{
						start : function(d, e) {
							var c = a(this).data("draggable"), f = c.options;
							c.snapElements = [];
							a(
									f.snap.constructor != String ? (f.snap.items || ":data(draggable)")
											: f.snap).each(function() {
								var h = a(this);
								var g = h.offset();
								if (this != c.element[0]) {
									c.snapElements.push( {
										item : this,
										width : h.outerWidth(),
										height : h.outerHeight(),
										top : g.top,
										left : g.left
									})
								}
							})
						},
						drag : function(v, q) {
							var g = a(this).data("draggable"), s = g.options;
							var z = s.snapTolerance;
							var y = q.offset.left, x = y
									+ g.helperProportions.width, f = q.offset.top, e = f
									+ g.helperProportions.height;
							for ( var w = g.snapElements.length - 1; w >= 0; w--) {
								var u = g.snapElements[w].left, p = u
										+ g.snapElements[w].width, m = g.snapElements[w].top, B = m
										+ g.snapElements[w].height;
								if (!((u - z < y && y < p + z && m - z < f && f < B
										+ z)
										|| (u - z < y && y < p + z && m - z < e && e < B
												+ z)
										|| (u - z < x && x < p + z && m - z < f && f < B
												+ z) || (u - z < x && x < p + z
										&& m - z < e && e < B + z))) {
									if (g.snapElements[w].snapping) {
										(g.options.snap.release && g.options.snap.release
												.call(
														g.element,
														v,
														a
																.extend(
																		g
																				._uiHash(),
																		{
																			snapItem : g.snapElements[w].item
																		})))
									}
									g.snapElements[w].snapping = false;
									continue
								}
								if (s.snapMode != "inner") {
									var c = Math.abs(m - e) <= z;
									var A = Math.abs(B - f) <= z;
									var j = Math.abs(u - x) <= z;
									var k = Math.abs(p - y) <= z;
									if (c) {
										q.position.top = g
												._convertPositionTo(
														"relative",
														{
															top : m
																	- g.helperProportions.height,
															left : 0
														}).top
												- g.margins.top
									}
									if (A) {
										q.position.top = g._convertPositionTo(
												"relative", {
													top : B,
													left : 0
												}).top
												- g.margins.top
									}
									if (j) {
										q.position.left = g
												._convertPositionTo(
														"relative",
														{
															top : 0,
															left : u
																	- g.helperProportions.width
														}).left
												- g.margins.left
									}
									if (k) {
										q.position.left = g._convertPositionTo(
												"relative", {
													top : 0,
													left : p
												}).left
												- g.margins.left
									}
								}
								var h = (c || A || j || k);
								if (s.snapMode != "outer") {
									var c = Math.abs(m - f) <= z;
									var A = Math.abs(B - e) <= z;
									var j = Math.abs(u - y) <= z;
									var k = Math.abs(p - x) <= z;
									if (c) {
										q.position.top = g._convertPositionTo(
												"relative", {
													top : m,
													left : 0
												}).top
												- g.margins.top
									}
									if (A) {
										q.position.top = g
												._convertPositionTo(
														"relative",
														{
															top : B
																	- g.helperProportions.height,
															left : 0
														}).top
												- g.margins.top
									}
									if (j) {
										q.position.left = g._convertPositionTo(
												"relative", {
													top : 0,
													left : u
												}).left
												- g.margins.left
									}
									if (k) {
										q.position.left = g
												._convertPositionTo(
														"relative",
														{
															top : 0,
															left : p
																	- g.helperProportions.width
														}).left
												- g.margins.left
									}
								}
								if (!g.snapElements[w].snapping
										&& (c || A || j || k || h)) {
									(g.options.snap.snap && g.options.snap.snap
											.call(
													g.element,
													v,
													a
															.extend(
																	g._uiHash(),
																	{
																		snapItem : g.snapElements[w].item
																	})))
								}
								g.snapElements[w].snapping = (c || A || j || k || h)
							}
						}
					});
	a.ui.plugin.add("draggable", "stack", {
		start : function(d, e) {
			var g = a(this).data("draggable").options;
			var f = a.makeArray(a(g.stack)).sort(
					function(i, h) {
						return (parseInt(a(i).css("zIndex"), 10) || 0)
								- (parseInt(a(h).css("zIndex"), 10) || 0)
					});
			if (!f.length) {
				return
			}
			var c = parseInt(f[0].style.zIndex) || 0;
			a(f).each(function(h) {
				this.style.zIndex = c + h
			});
			this[0].style.zIndex = c + f.length
		}
	});
	a.ui.plugin.add("draggable", "zIndex", {
		start : function(d, e) {
			var c = a(e.helper), f = a(this).data("draggable").options;
			if (c.css("zIndex")) {
				f._zIndex = c.css("zIndex")
			}
			c.css("zIndex", f.zIndex)
		},
		stop : function(c, d) {
			var e = a(this).data("draggable").options;
			if (e._zIndex) {
				a(d.helper).css("zIndex", e._zIndex)
			}
		}
	})
})(jQuery);
(function(a, b) {
	a
			.widget(
					"ui.droppable",
					{
						widgetEventPrefix : "drop",
						options : {
							accept : "*",
							activeClass : false,
							addClasses : true,
							greedy : false,
							hoverClass : false,
							scope : "default",
							tolerance : "intersect"
						},
						_create : function() {
							var d = this.options, c = d.accept;
							this.isover = 0;
							this.isout = 1;
							this.accept = a.isFunction(c) ? c : function(e) {
								return e.is(c)
							};
							this.proportions = {
								width : this.element[0].offsetWidth,
								height : this.element[0].offsetHeight
							};
							a.ui.ddmanager.droppables[d.scope] = a.ui.ddmanager.droppables[d.scope]
									|| [];
							a.ui.ddmanager.droppables[d.scope].push(this);
							(d.addClasses && this.element
									.addClass("ui-droppable"))
						},
						destroy : function() {
							var c = a.ui.ddmanager.droppables[this.options.scope];
							for ( var d = 0; d < c.length; d++) {
								if (c[d] == this) {
									c.splice(d, 1)
								}
							}
							this.element.removeClass(
									"ui-droppable ui-droppable-disabled")
									.removeData("droppable").unbind(
											".droppable");
							return this
						},
						_setOption : function(c, d) {
							if (c == "accept") {
								this.accept = a.isFunction(d) ? d
										: function(e) {
											return e.is(d)
										}
							}
							a.Widget.prototype._setOption
									.apply(this, arguments)
						},
						_activate : function(d) {
							var c = a.ui.ddmanager.current;
							if (this.options.activeClass) {
								this.element.addClass(this.options.activeClass)
							}
							(c && this._trigger("activate", d, this.ui(c)))
						},
						_deactivate : function(d) {
							var c = a.ui.ddmanager.current;
							if (this.options.activeClass) {
								this.element
										.removeClass(this.options.activeClass)
							}
							(c && this._trigger("deactivate", d, this.ui(c)))
						},
						_over : function(d) {
							var c = a.ui.ddmanager.current;
							if (!c
									|| (c.currentItem || c.element)[0] == this.element[0]) {
								return
							}
							if (this.accept.call(this.element[0],
									(c.currentItem || c.element))) {
								if (this.options.hoverClass) {
									this.element
											.addClass(this.options.hoverClass)
								}
								this._trigger("over", d, this.ui(c))
							}
						},
						_out : function(d) {
							var c = a.ui.ddmanager.current;
							if (!c
									|| (c.currentItem || c.element)[0] == this.element[0]) {
								return
							}
							if (this.accept.call(this.element[0],
									(c.currentItem || c.element))) {
								if (this.options.hoverClass) {
									this.element
											.removeClass(this.options.hoverClass)
								}
								this._trigger("out", d, this.ui(c))
							}
						},
						_drop : function(d, e) {
							var c = e || a.ui.ddmanager.current;
							if (!c
									|| (c.currentItem || c.element)[0] == this.element[0]) {
								return false
							}
							var f = false;
							this.element
									.find(":data(droppable)")
									.not(".ui-draggable-dragging")
									.each(
											function() {
												var g = a.data(this,
														"droppable");
												if (g.options.greedy
														&& !g.options.disabled
														&& g.options.scope == c.options.scope
														&& g.accept
																.call(
																		g.element[0],
																		(c.currentItem || c.element))
														&& a.ui
																.intersect(
																		c,
																		a
																				.extend(
																						g,
																						{
																							offset : g.element
																									.offset()
																						}),
																		g.options.tolerance)) {
													f = true;
													return false
												}
											});
							if (f) {
								return false
							}
							if (this.accept.call(this.element[0],
									(c.currentItem || c.element))) {
								if (this.options.activeClass) {
									this.element
											.removeClass(this.options.activeClass)
								}
								if (this.options.hoverClass) {
									this.element
											.removeClass(this.options.hoverClass)
								}
								this._trigger("drop", d, this.ui(c));
								return this.element
							}
							return false
						},
						ui : function(d) {
							return {
								draggable : (d.currentItem || d.element),
								helper : d.helper,
								position : d.position,
								offset : d.positionAbs
							}
						}
					});
	a.extend(a.ui.droppable, {
		version : "1.8.15"
	});
	a.ui.intersect = function(s, j, p) {
		if (!j.offset) {
			return false
		}
		var e = (s.positionAbs || s.position.absolute).left, d = e
				+ s.helperProportions.width, o = (s.positionAbs || s.position.absolute).top, m = o
				+ s.helperProportions.height;
		var g = j.offset.left, c = g + j.proportions.width, q = j.offset.top, k = q
				+ j.proportions.height;
		switch (p) {
		case "fit":
			return (g <= e && d <= c && q <= o && m <= k);
			break;
		case "intersect":
			return (g < e + (s.helperProportions.width / 2)
					&& d - (s.helperProportions.width / 2) < c
					&& q < o + (s.helperProportions.height / 2) && m
					- (s.helperProportions.height / 2) < k);
			break;
		case "pointer":
			var h = ((s.positionAbs || s.position.absolute).left + (s.clickOffset || s.offset.click).left), i = ((s.positionAbs || s.position.absolute).top + (s.clickOffset || s.offset.click).top), f = a.ui
					.isOver(i, h, q, g, j.proportions.height,
							j.proportions.width);
			return f;
			break;
		case "touch":
			return ((o >= q && o <= k) || (m >= q && m <= k) || (o < q && m > k))
					&& ((e >= g && e <= c) || (d >= g && d <= c) || (e < g && d > c));
			break;
		default:
			return false;
			break
		}
	};
	a.ui.ddmanager = {
		current : null,
		droppables : {
			"default" : []
		},
		prepareOffsets : function(f, h) {
			var c = a.ui.ddmanager.droppables[f.options.scope] || [];
			var g = h ? h.type : null;
			var k = (f.currentItem || f.element).find(":data(droppable)")
					.andSelf();
			droppablesLoop: for ( var e = 0; e < c.length; e++) {
				if (c[e].options.disabled
						|| (f && !c[e].accept.call(c[e].element[0],
								(f.currentItem || f.element)))) {
					continue
				}
				for ( var d = 0; d < k.length; d++) {
					if (k[d] == c[e].element[0]) {
						c[e].proportions.height = 0;
						continue droppablesLoop
					}
				}
				c[e].visible = c[e].element.css("display") != "none";
				if (!c[e].visible) {
					continue
				}
				if (g == "mousedown") {
					c[e]._activate.call(c[e], h)
				}
				c[e].offset = c[e].element.offset();
				c[e].proportions = {
					width : c[e].element[0].offsetWidth,
					height : c[e].element[0].offsetHeight
				}
			}
		},
		drop : function(c, d) {
			var e = false;
			a.each(a.ui.ddmanager.droppables[c.options.scope] || [],
					function() {
						if (!this.options) {
							return
						}
						if (!this.options.disabled
								&& this.visible
								&& a.ui.intersect(c, this,
										this.options.tolerance)) {
							e = e || this._drop.call(this, d)
						}
						if (!this.options.disabled
								&& this.visible
								&& this.accept.call(this.element[0],
										(c.currentItem || c.element))) {
							this.isout = 1;
							this.isover = 0;
							this._deactivate.call(this, d)
						}
					});
			return e
		},
		dragStart : function(c, d) {
			c.element.parentsUntil("body").bind("scroll.droppable", function() {
				if (!c.options.refreshPositions) {
					a.ui.ddmanager.prepareOffsets(c, d)
				}
			})
		},
		drag : function(c, d) {
			if (c.options.refreshPositions) {
				a.ui.ddmanager.prepareOffsets(c, d)
			}
			a
					.each(a.ui.ddmanager.droppables[c.options.scope] || [],
							function() {
								if (this.options.disabled || this.greedyChild
										|| !this.visible) {
									return
								}
								var f = a.ui.intersect(c, this,
										this.options.tolerance);
								var h = !f && this.isover == 1 ? "isout" : (f
										&& this.isover == 0 ? "isover" : null);
								if (!h) {
									return
								}
								var g;
								if (this.options.greedy) {
									var e = this.element
											.parents(":data(droppable):eq(0)");
									if (e.length) {
										g = a.data(e[0], "droppable");
										g.greedyChild = (h == "isover" ? 1 : 0)
									}
								}
								if (g && h == "isover") {
									g.isover = 0;
									g.isout = 1;
									g._out.call(g, d)
								}
								this[h] = 1;
								this[h == "isout" ? "isover" : "isout"] = 0;
								this[h == "isover" ? "_over" : "_out"].call(
										this, d);
								if (g && h == "isout") {
									g.isout = 0;
									g.isover = 1;
									g._over.call(g, d)
								}
							})
		},
		dragStop : function(c, d) {
			c.element.parentsUntil("body").unbind("scroll.droppable");
			if (!c.options.refreshPositions) {
				a.ui.ddmanager.prepareOffsets(c, d)
			}
		}
	}
})(jQuery);
(function(c, d) {
	c
			.widget(
					"ui.resizable",
					c.ui.mouse,
					{
						widgetEventPrefix : "resize",
						options : {
							alsoResize : false,
							animate : false,
							animateDuration : "slow",
							animateEasing : "swing",
							aspectRatio : false,
							autoHide : false,
							containment : false,
							ghost : false,
							grid : false,
							handles : "e,s,se",
							helper : false,
							maxHeight : null,
							maxWidth : null,
							minHeight : 10,
							minWidth : 10,
							zIndex : 1000
						},
						_create : function() {
							var f = this, k = this.options;
							this.element.addClass("om-resizable");
							c.extend(this,
									{
										_aspectRatio : !!(k.aspectRatio),
										aspectRatio : k.aspectRatio,
										originalElement : this.element,
										_proportionallyResizeElements : [],
										_helper : k.helper || k.ghost
												|| k.animate ? k.helper
												|| "om-resizable-helper" : null
									});
							if (this.element[0].nodeName
									.match(/canvas|textarea|input|select|button|img/i)) {
								if (/relative/.test(this.element
										.css("position"))
										&& c.browser.opera) {
									this.element.css( {
										position : "relative",
										top : "auto",
										left : "auto"
									})
								}
								this.element
										.wrap(c(
												'<div class="om-wrapper" style="overflow: hidden;"></div>')
												.css(
														{
															position : this.element
																	.css("position"),
															width : this.element
																	.outerWidth(),
															height : this.element
																	.outerHeight(),
															top : this.element
																	.css("top"),
															left : this.element
																	.css("left")
														}));
								this.element = this.element.parent().data(
										"resizable",
										this.element.data("resizable"));
								this.elementIsWrapper = true;
								this.element.css( {
									marginLeft : this.originalElement
											.css("marginLeft"),
									marginTop : this.originalElement
											.css("marginTop"),
									marginRight : this.originalElement
											.css("marginRight"),
									marginBottom : this.originalElement
											.css("marginBottom")
								});
								this.originalElement.css( {
									marginLeft : 0,
									marginTop : 0,
									marginRight : 0,
									marginBottom : 0
								});
								this.originalResizeStyle = this.originalElement
										.css("resize");
								this.originalElement.css("resize", "none");
								this._proportionallyResizeElements
										.push(this.originalElement.css( {
											position : "static",
											zoom : 1,
											display : "block"
										}));
								this.originalElement.css( {
									margin : this.originalElement.css("margin")
								});
								this._proportionallyResize()
							}
							this.handles = k.handles
									|| (!c(".om-resizable-handle", this.element).length ? "e,s,se"
											: {
												n : ".om-resizable-n",
												e : ".om-resizable-e",
												s : ".om-resizable-s",
												w : ".om-resizable-w",
												se : ".om-resizable-se",
												sw : ".om-resizable-sw",
												ne : ".om-resizable-ne",
												nw : ".om-resizable-nw"
											});
							if (this.handles.constructor == String) {
								if (this.handles == "all") {
									this.handles = "n,e,s,w,se,sw,ne,nw"
								}
								var l = this.handles.split(",");
								this.handles = {};
								for ( var g = 0; g < l.length; g++) {
									var j = c.trim(l[g]), e = "om-resizable-"
											+ j;
									var h = c('<div class="om-resizable-handle ' + e + '"></div>');
									if (/sw|se|ne|nw/.test(j)) {
										h.css( {
											zIndex : ++k.zIndex
										})
									}
									if ("se" == j) {
										h
												.addClass("om-icon om-icon-gripsmall-diagonal-se")
									}
									this.handles[j] = ".om-resizable-" + j;
									this.element.append(h)
								}
							}
							this._renderAxis = function(r) {
								r = r || this.element;
								for ( var o in this.handles) {
									if (this.handles[o].constructor == String) {
										this.handles[o] = c(this.handles[o],
												this.element).show()
									}
									if (this.elementIsWrapper
											&& this.originalElement[0].nodeName
													.match(/textarea|input|select|button/i)) {
										var p = c(this.handles[o], this.element), q = 0;
										q = /sw|ne|nw|se|n|s/.test(o) ? p
												.outerHeight() : p.outerWidth();
										var m = [
												"padding",
												/ne|nw|n/.test(o) ? "Top"
														: /se|sw|s/.test(o) ? "Bottom"
																: /^e$/.test(o) ? "Right"
																		: "Left" ]
												.join("");
										r.css(m, q);
										this._proportionallyResize()
									}
									if (!c(this.handles[o]).length) {
										continue
									}
								}
							};
							this._renderAxis(this.element);
							this._handles = c(".om-resizable-handle",
									this.element).disableSelection();
							this._handles
									.mouseover(function() {
										if (!f.resizing) {
											if (this.className) {
												var i = this.className
														.match(/om-resizable-(se|sw|ne|nw|n|e|s|w)/i)
											}
											f.axis = i && i[1] ? i[1] : "se"
										}
									});
							if (k.autoHide) {
								this._handles.hide();
								c(this.element)
										.addClass("om-resizable-autohide")
										.hover(
												function() {
													if (k.disabled) {
														return
													}
													c(this)
															.removeClass(
																	"om-resizable-autohide");
													f._handles.show()
												},
												function() {
													if (k.disabled) {
														return
													}
													if (!f.resizing) {
														c(this)
																.addClass(
																		"om-resizable-autohide");
														f._handles.hide()
													}
												})
							}
							this._mouseInit()
						},
						destroy : function() {
							this._mouseDestroy();
							var e = function(g) {
								c(g)
										.removeClass(
												"om-resizable om-resizable-disabled om-resizable-resizing")
										.removeData("resizable").unbind(
												".resizable").find(
												".om-resizable-handle")
										.remove()
							};
							if (this.elementIsWrapper) {
								e(this.element);
								var f = this.element;
								f.after(this.originalElement.css( {
									position : f.css("position"),
									width : f.outerWidth(),
									height : f.outerHeight(),
									top : f.css("top"),
									left : f.css("left")
								})).remove()
							}
							this.originalElement.css("resize",
									this.originalResizeStyle);
							e(this.originalElement);
							return this
						},
						_mouseCapture : function(f) {
							var g = false;
							for ( var e in this.handles) {
								if (c(this.handles[e])[0] == f.target) {
									g = true
								}
							}
							return !this.options.disabled && g
						},
						_mouseStart : function(g) {
							var j = this.options, f = this.element.position(), e = this.element;
							this.resizing = true;
							this.documentScroll = {
								top : c(document).scrollTop(),
								left : c(document).scrollLeft()
							};
							if (e.is(".ui-draggable")
									|| (/absolute/).test(e.css("position"))) {
								e.css( {
									position : "absolute",
									top : f.top,
									left : f.left
								})
							}
							if (c.browser.opera
									&& (/relative/).test(e.css("position"))) {
								e.css( {
									position : "relative",
									top : "auto",
									left : "auto"
								})
							}
							this._renderProxy();
							var k = b(this.helper.css("left")), h = b(this.helper
									.css("top"));
							if (j.containment) {
								k += c(j.containment).scrollLeft() || 0;
								h += c(j.containment).scrollTop() || 0
							}
							this.offset = this.helper.offset();
							this.position = {
								left : k,
								top : h
							};
							this.size = this._helper ? {
								width : e.outerWidth(),
								height : e.outerHeight()
							} : {
								width : e.width(),
								height : e.height()
							};
							this.originalSize = this._helper ? {
								width : e.outerWidth(),
								height : e.outerHeight()
							} : {
								width : e.width(),
								height : e.height()
							};
							this.originalPosition = {
								left : k,
								top : h
							};
							this.sizeDiff = {
								width : e.outerWidth() - e.width(),
								height : e.outerHeight() - e.height()
							};
							this.originalMousePosition = {
								left : g.pageX,
								top : g.pageY
							};
							this.aspectRatio = (typeof j.aspectRatio == "number") ? j.aspectRatio
									: ((this.originalSize.width / this.originalSize.height) || 1);
							var i = c(".om-resizable-" + this.axis).css(
									"cursor");
							c("body").css("cursor",
									i == "auto" ? this.axis + "-resize" : i);
							e.addClass("om-resizable-resizing");
							this._propagate("start", g);
							return true
						},
						_mouseDrag : function(e) {
							var h = this.helper, g = this.options, m = {}, r = this, j = this.originalMousePosition, p = this.axis;
							var s = (e.pageX - j.left) || 0, q = (e.pageY - j.top) || 0;
							var i = this._change[p];
							if (!i) {
								return false
							}
							var l = i.apply(this, [ e, s, q ]), k = c.browser.msie
									&& c.browser.version < 7, f = this.sizeDiff;
							this._updateVirtualBoundaries(e.shiftKey);
							if (this._aspectRatio || e.shiftKey) {
								l = this._updateRatio(l, e)
							}
							l = this._respectSize(l, e);
							this._propagate("resize", e);
							h.css( {
								top : this.position.top + "px",
								left : this.position.left + "px",
								width : this.size.width + "px",
								height : this.size.height + "px"
							});
							if (!this._helper
									&& this._proportionallyResizeElements.length) {
								this._proportionallyResize()
							}
							this._updateCache(l);
							this._trigger("resize", e, this.ui());
							return false
						},
						_mouseStop : function(h) {
							this.resizing = false;
							var i = this.options, m = this;
							if (this._helper) {
								var g = this._proportionallyResizeElements, e = g.length
										&& (/textarea/i).test(g[0].nodeName), f = e
										&& c.ui.hasScroll(g[0], "left") ? 0
										: m.sizeDiff.height, k = e ? 0
										: m.sizeDiff.width;
								var p = {
									width : (m.helper.width() - k),
									height : (m.helper.height() - f)
								}, j = (parseInt(m.element.css("left"), 10) + (m.position.left - m.originalPosition.left))
										|| null, l = (parseInt(m.element
										.css("top"), 10) + (m.position.top - m.originalPosition.top))
										|| null;
								if (!i.animate) {
									this.element.css(c.extend(p, {
										top : l,
										left : j
									}))
								}
								m.helper.height(m.size.height);
								m.helper.width(m.size.width);
								if (this._helper && !i.animate) {
									this._proportionallyResize()
								}
							}
							c("body").css("cursor", "auto");
							this.element.removeClass("om-resizable-resizing");
							this._propagate("stop", h);
							if (this._helper) {
								this.helper.remove()
							}
							return false
						},
						_updateVirtualBoundaries : function(g) {
							var j = this.options, i, h, f, k, e;
							e = {
								minWidth : a(j.minWidth) ? j.minWidth : 0,
								maxWidth : a(j.maxWidth) ? j.maxWidth
										: Infinity,
								minHeight : a(j.minHeight) ? j.minHeight : 0,
								maxHeight : a(j.maxHeight) ? j.maxHeight
										: Infinity
							};
							if (this._aspectRatio || g) {
								i = e.minHeight * this.aspectRatio;
								f = e.minWidth / this.aspectRatio;
								h = e.maxHeight * this.aspectRatio;
								k = e.maxWidth / this.aspectRatio;
								if (i > e.minWidth) {
									e.minWidth = i
								}
								if (f > e.minHeight) {
									e.minHeight = f
								}
								if (h < e.maxWidth) {
									e.maxWidth = h
								}
								if (k < e.maxHeight) {
									e.maxHeight = k
								}
							}
							this._vBoundaries = e
						},
						_updateCache : function(e) {
							var f = this.options;
							this.offset = this.helper.offset();
							if (a(e.left)) {
								this.position.left = e.left
							}
							if (a(e.top)) {
								this.position.top = e.top
							}
							if (a(e.height)) {
								this.size.height = e.height
							}
							if (a(e.width)) {
								this.size.width = e.width
							}
						},
						_updateRatio : function(h, g) {
							var i = this.options, j = this.position, f = this.size, e = this.axis;
							if (a(h.height)) {
								h.width = (h.height * this.aspectRatio)
							} else {
								if (a(h.width)) {
									h.height = (h.width / this.aspectRatio)
								}
							}
							if (e == "sw") {
								h.left = j.left + (f.width - h.width);
								h.top = null
							}
							if (e == "nw") {
								h.top = j.top + (f.height - h.height);
								h.left = j.left + (f.width - h.width)
							}
							return h
						},
						_respectSize : function(l, g) {
							var j = this.helper, i = this._vBoundaries, s = this._aspectRatio
									|| g.shiftKey, r = this.axis, u = a(l.width)
									&& i.maxWidth && (i.maxWidth < l.width), m = a(l.height)
									&& i.maxHeight && (i.maxHeight < l.height), h = a(l.width)
									&& i.minWidth && (i.minWidth > l.width), t = a(l.height)
									&& i.minHeight && (i.minHeight > l.height);
							if (h) {
								l.width = i.minWidth
							}
							if (t) {
								l.height = i.minHeight
							}
							if (u) {
								l.width = i.maxWidth
							}
							if (m) {
								l.height = i.maxHeight
							}
							var f = this.originalPosition.left
									+ this.originalSize.width, q = this.position.top
									+ this.size.height;
							var k = /sw|nw|w/.test(r), e = /nw|ne|n/.test(r);
							if (h && k) {
								l.left = f - i.minWidth
							}
							if (u && k) {
								l.left = f - i.maxWidth
							}
							if (t && e) {
								l.top = q - i.minHeight
							}
							if (m && e) {
								l.top = q - i.maxHeight
							}
							var p = !l.width && !l.height;
							if (p && !l.left && l.top) {
								l.top = null
							} else {
								if (p && !l.top && l.left) {
									l.left = null
								}
							}
							return l
						},
						_proportionallyResize : function() {
							var k = this.options;
							if (!this._proportionallyResizeElements.length) {
								return
							}
							var g = this.helper || this.element;
							for ( var f = 0; f < this._proportionallyResizeElements.length; f++) {
								var h = this._proportionallyResizeElements[f];
								if (!this.borderDif) {
									var e = [ h.css("borderTopWidth"),
											h.css("borderRightWidth"),
											h.css("borderBottomWidth"),
											h.css("borderLeftWidth") ], j = [
											h.css("paddingTop"),
											h.css("paddingRight"),
											h.css("paddingBottom"),
											h.css("paddingLeft") ];
									this.borderDif = c
											.map(
													e,
													function(l, o) {
														var m = parseInt(l, 10) || 0, p = parseInt(
																j[o], 10) || 0;
														return m + p
													})
								}
								if (c.browser.msie
										&& !(!(c(g).is(":hidden") || c(g)
												.parents(":hidden").length))) {
									continue
								}
								h
										.css( {
											height : (g.height()
													- this.borderDif[0] - this.borderDif[2]) || 0,
											width : (g.width()
													- this.borderDif[1] - this.borderDif[3]) || 0
										})
							}
						},
						_renderProxy : function() {
							var f = this.element, i = this.options;
							this.elementOffset = f.offset();
							if (this._helper) {
								this.helper = this.helper
										|| c('<div style="overflow:hidden;"></div>');
								var e = c.browser.msie && c.browser.version < 7, g = (e ? 1
										: 0), h = (e ? 2 : -1);
								this.helper.addClass(this._helper).css( {
									width : this.element.outerWidth() + h,
									height : this.element.outerHeight() + h,
									position : "absolute",
									left : this.elementOffset.left - g + "px",
									top : this.elementOffset.top - g + "px",
									zIndex : ++i.zIndex
								});
								this.helper.appendTo("body").disableSelection()
							} else {
								this.helper = this.element
							}
						},
						_change : {
							e : function(g, f, e) {
								return {
									width : this.originalSize.width + f
								}
							},
							w : function(h, f, e) {
								var j = this.options, g = this.originalSize, i = this.originalPosition;
								return {
									left : i.left + f,
									width : g.width - f
								}
							},
							n : function(h, f, e) {
								var j = this.options, g = this.originalSize, i = this.originalPosition;
								return {
									top : i.top + e,
									height : g.height - e
								}
							},
							s : function(g, f, e) {
								return {
									height : this.originalSize.height + e
								}
							},
							se : function(g, f, e) {
								return c.extend(this._change.s.apply(this,
										arguments), this._change.e.apply(this,
										[ g, f, e ]))
							},
							sw : function(g, f, e) {
								return c.extend(this._change.s.apply(this,
										arguments), this._change.w.apply(this,
										[ g, f, e ]))
							},
							ne : function(g, f, e) {
								return c.extend(this._change.n.apply(this,
										arguments), this._change.e.apply(this,
										[ g, f, e ]))
							},
							nw : function(g, f, e) {
								return c.extend(this._change.n.apply(this,
										arguments), this._change.w.apply(this,
										[ g, f, e ]))
							}
						},
						_propagate : function(f, e) {
							c.ui.plugin.call(this, f, [ e, this.ui() ]);
							(f != "resize" && this._trigger(f, e, this.ui()))
						},
						plugins : {},
						ui : function() {
							return {
								originalElement : this.originalElement,
								element : this.element,
								helper : this.helper,
								position : this.position,
								size : this.size,
								originalSize : this.originalSize,
								originalPosition : this.originalPosition
							}
						}
					});
	c.extend(c.ui.resizable, {
		version : "1.8.15"
	});
	c.ui.plugin
			.add(
					"resizable",
					"alsoResize",
					{
						start : function(f, g) {
							var e = c(this).data("resizable"), i = e.options;
							var h = function(j) {
								c(j).each(function() {
									var k = c(this);
									k.data("resizable-alsoresize", {
										width : parseInt(k.width(), 10),
										height : parseInt(k.height(), 10),
										left : parseInt(k.css("left"), 10),
										top : parseInt(k.css("top"), 10),
										position : k.css("position")
									})
								})
							};
							if (typeof (i.alsoResize) == "object"
									&& !i.alsoResize.parentNode) {
								if (i.alsoResize.length) {
									i.alsoResize = i.alsoResize[0];
									h(i.alsoResize)
								} else {
									c.each(i.alsoResize, function(j) {
										h(j)
									})
								}
							} else {
								h(i.alsoResize)
							}
						},
						resize : function(g, i) {
							var f = c(this).data("resizable"), j = f.options, h = f.originalSize, l = f.originalPosition;
							var k = {
								height : (f.size.height - h.height) || 0,
								width : (f.size.width - h.width) || 0,
								top : (f.position.top - l.top) || 0,
								left : (f.position.left - l.left) || 0
							}, e = function(m, o) {
								c(m)
										.each(
												function() {
													var r = c(this), s = c(this)
															.data(
																	"resizable-alsoresize"), q = {}, p = o
															&& o.length ? o
															: r
																	.parents(i.originalElement[0]).length ? [
																	"width",
																	"height" ]
																	: [
																			"width",
																			"height",
																			"top",
																			"left" ];
													c.each(p, function(t, v) {
														var u = (s[v] || 0)
																+ (k[v] || 0);
														if (u && u >= 0) {
															q[v] = u || null
														}
													});
													if (c.browser.opera
															&& /relative/
																	.test(r
																			.css("position"))) {
														f._revertToRelativePosition = true;
														r
																.css( {
																	position : "absolute",
																	top : "auto",
																	left : "auto"
																})
													}
													r.css(q)
												})
							};
							if (typeof (j.alsoResize) == "object"
									&& !j.alsoResize.nodeType) {
								c.each(j.alsoResize, function(m, o) {
									e(m, o)
								})
							} else {
								e(j.alsoResize)
							}
						},
						stop : function(g, h) {
							var f = c(this).data("resizable"), i = f.options;
							var e = function(j) {
								c(j)
										.each(
												function() {
													var k = c(this);
													k
															.css( {
																position : k
																		.data("resizable-alsoresize").position
															})
												})
							};
							if (f._revertToRelativePosition) {
								f._revertToRelativePosition = false;
								if (typeof (i.alsoResize) == "object"
										&& !i.alsoResize.nodeType) {
									c.each(i.alsoResize, function(j) {
										e(j)
									})
								} else {
									e(i.alsoResize)
								}
							}
							c(this).removeData("resizable-alsoresize")
						}
					});
	c.ui.plugin
			.add(
					"resizable",
					"animate",
					{
						stop : function(i, p) {
							var q = c(this).data("resizable"), j = q.options;
							var h = q._proportionallyResizeElements, e = h.length
									&& (/textarea/i).test(h[0].nodeName), f = e
									&& c.ui.hasScroll(h[0], "left") ? 0
									: q.sizeDiff.height, l = e ? 0
									: q.sizeDiff.width;
							var g = {
								width : (q.size.width - l),
								height : (q.size.height - f)
							}, k = (parseInt(q.element.css("left"), 10) + (q.position.left - q.originalPosition.left))
									|| null, m = (parseInt(
									q.element.css("top"), 10) + (q.position.top - q.originalPosition.top))
									|| null;
							q.element.animate(c.extend(g, m && k ? {
								top : m,
								left : k
							} : {}),
									{
										duration : j.animateDuration,
										easing : j.animateEasing,
										step : function() {
											var o = {
												width : parseInt(q.element
														.css("width"), 10),
												height : parseInt(q.element
														.css("height"), 10),
												top : parseInt(q.element
														.css("top"), 10),
												left : parseInt(q.element
														.css("left"), 10)
											};
											if (h && h.length) {
												c(h[0]).css( {
													width : o.width,
													height : o.height
												})
											}
											q._updateCache(o);
											q._propagate("resize", i)
										}
									})
						}
					});
	c.ui.plugin
			.add(
					"resizable",
					"containment",
					{
						start : function(f, s) {
							var u = c(this).data("resizable"), j = u.options, l = u.element;
							var g = j.containment, k = (g instanceof c) ? g
									.get(0) : (/parent/.test(g)) ? l.parent()
									.get(0) : g;
							if (!k) {
								return
							}
							u.containerElement = c(k);
							if (/document/.test(g) || g == document) {
								u.containerOffset = {
									left : 0,
									top : 0
								};
								u.containerPosition = {
									left : 0,
									top : 0
								};
								u.parentData = {
									element : c(document),
									left : 0,
									top : 0,
									width : c(document).width(),
									height : c(document).height()
											|| document.body.parentNode.scrollHeight
								}
							} else {
								var q = c(k), i = [];
								c( [ "Top", "Right", "Left", "Bottom" ]).each(
										function(p, o) {
											i[p] = b(q.css("padding" + o))
										});
								u.containerOffset = q.offset();
								u.containerPosition = q.position();
								u.containerSize = {
									height : (q.innerHeight() - i[3]),
									width : (q.innerWidth() - i[1])
								};
								var r = u.containerOffset, e = u.containerSize.height, m = u.containerSize.width, h = (c.ui
										.hasScroll(k, "left") ? k.scrollWidth
										: m), t = (c.ui.hasScroll(k) ? k.scrollHeight
										: e);
								u.parentData = {
									element : k,
									left : r.left,
									top : r.top,
									width : h,
									height : t
								}
							}
						},
						resize : function(g, r) {
							var u = c(this).data("resizable"), i = u.options, f = u.containerSize, q = u.containerOffset, m = u.size, p = u.position, s = u._aspectRatio
									|| g.shiftKey, e = {
								top : 0,
								left : 0
							}, h = u.containerElement;
							if (h[0] != document
									&& (/static/).test(h.css("position"))) {
								e = q
							}
							if (p.left < (u._helper ? q.left : 0)) {
								u.size.width = u.size.width
										+ (u._helper ? (u.position.left - q.left)
												: (u.position.left - e.left));
								if (s) {
									u.size.height = u.size.width
											/ i.aspectRatio
								}
								u.position.left = i.helper ? q.left : 0
							}
							if (p.top < (u._helper ? q.top : 0)) {
								u.size.height = u.size.height
										+ (u._helper ? (u.position.top - q.top)
												: u.position.top);
								if (s) {
									u.size.width = u.size.height
											* i.aspectRatio
								}
								u.position.top = u._helper ? q.top : 0
							}
							u.offset.left = u.parentData.left + u.position.left;
							u.offset.top = u.parentData.top + u.position.top;
							var l = Math.abs((u._helper ? u.offset.left
									- e.left : (u.offset.left - e.left))
									+ u.sizeDiff.width), t = Math
									.abs((u._helper ? u.offset.top - e.top
											: (u.offset.top - q.top))
											+ u.sizeDiff.height);
							var k = u.containerElement.get(0) == u.element
									.parent().get(0), j = /relative|absolute/
									.test(u.containerElement.css("position"));
							if (k && j) {
								l -= u.parentData.left
							}
							if (l + u.size.width >= u.parentData.width) {
								u.size.width = u.parentData.width - l;
								if (s) {
									u.size.height = u.size.width
											/ u.aspectRatio
								}
							}
							if (t + u.size.height >= u.parentData.height) {
								u.size.height = u.parentData.height - t;
								if (s) {
									u.size.width = u.size.height
											* u.aspectRatio
								}
							}
						},
						stop : function(f, p) {
							var r = c(this).data("resizable"), g = r.options, l = r.position, m = r.containerOffset, e = r.containerPosition, i = r.containerElement;
							var j = c(r.helper), s = j.offset(), q = j
									.outerWidth()
									- r.sizeDiff.width, k = j.outerHeight()
									- r.sizeDiff.height;
							if (r._helper && !g.animate
									&& (/relative/).test(i.css("position"))) {
								c(this).css( {
									left : s.left - e.left - m.left,
									width : q,
									height : k
								})
							}
							if (r._helper && !g.animate
									&& (/static/).test(i.css("position"))) {
								c(this).css( {
									left : s.left - e.left - m.left,
									width : q,
									height : k
								})
							}
						}
					});
	c.ui.plugin.add("resizable", "ghost", {
		start : function(g, h) {
			var e = c(this).data("resizable"), i = e.options, f = e.size;
			e.ghost = e.originalElement.clone();
			e.ghost.css( {
				opacity : 0.25,
				display : "block",
				position : "relative",
				height : f.height,
				width : f.width,
				margin : 0,
				left : 0,
				top : 0
			}).addClass("om-resizable-ghost").addClass(
					typeof i.ghost == "string" ? i.ghost : "");
			e.ghost.appendTo(e.helper)
		},
		resize : function(f, g) {
			var e = c(this).data("resizable"), h = e.options;
			if (e.ghost) {
				e.ghost.css( {
					position : "relative",
					height : e.size.height,
					width : e.size.width
				})
			}
		},
		stop : function(f, g) {
			var e = c(this).data("resizable"), h = e.options;
			if (e.ghost && e.helper) {
				e.helper.get(0).removeChild(e.ghost.get(0))
			}
		}
	});
	c.ui.plugin
			.add(
					"resizable",
					"grid",
					{
						resize : function(e, m) {
							var q = c(this).data("resizable"), h = q.options, k = q.size, i = q.originalSize, j = q.originalPosition, p = q.axis, l = h._aspectRatio
									|| e.shiftKey;
							h.grid = typeof h.grid == "number" ? [ h.grid,
									h.grid ] : h.grid;
							var g = Math.round((k.width - i.width)
									/ (h.grid[0] || 1))
									* (h.grid[0] || 1), f = Math
									.round((k.height - i.height)
											/ (h.grid[1] || 1))
									* (h.grid[1] || 1);
							if (/^(se|s|e)$/.test(p)) {
								q.size.width = i.width + g;
								q.size.height = i.height + f
							} else {
								if (/^(ne)$/.test(p)) {
									q.size.width = i.width + g;
									q.size.height = i.height + f;
									q.position.top = j.top - f
								} else {
									if (/^(sw)$/.test(p)) {
										q.size.width = i.width + g;
										q.size.height = i.height + f;
										q.position.left = j.left - g
									} else {
										q.size.width = i.width + g;
										q.size.height = i.height + f;
										q.position.top = j.top - f;
										q.position.left = j.left - g
									}
								}
							}
						}
					});
	var b = function(e) {
		return parseInt(e, 10) || 0
	};
	var a = function(e) {
		return !isNaN(parseInt(e, 10))
	}
})(jQuery);
(function(a, b) {
	a
			.widget(
					"ui.sortable",
					a.ui.mouse,
					{
						widgetEventPrefix : "sort",
						options : {
							appendTo : "parent",
							axis : false,
							connectWith : false,
							containment : false,
							cursor : "auto",
							cursorAt : false,
							dropOnEmpty : true,
							forcePlaceholderSize : false,
							forceHelperSize : false,
							grid : false,
							handle : false,
							helper : "original",
							items : "> *",
							opacity : false,
							placeholder : false,
							revert : false,
							scroll : true,
							scrollSensitivity : 20,
							scrollSpeed : 20,
							scope : "default",
							tolerance : "intersect",
							zIndex : 1000
						},
						_create : function() {
							var c = this.options;
							this.containerCache = {};
							this.element.addClass("ui-sortable");
							this.refresh();
							this.floating = this.items.length ? c.axis === "x"
									|| (/left|right/).test(this.items[0].item
											.css("float"))
									|| (/inline|table-cell/)
											.test(this.items[0].item
													.css("display")) : false;
							this.offset = this.element.offset();
							this._mouseInit()
						},
						destroy : function() {
							this.element.removeClass(
									"ui-sortable ui-sortable-disabled")
									.removeData("sortable").unbind(".sortable");
							this._mouseDestroy();
							for ( var c = this.items.length - 1; c >= 0; c--) {
								this.items[c].item.removeData("sortable-item")
							}
							return this
						},
						_setOption : function(c, d) {
							if (c === "disabled") {
								this.options[c] = d;
								this.widget()[d ? "addClass" : "removeClass"]
										("ui-sortable-disabled")
							} else {
								a.Widget.prototype._setOption.apply(this,
										arguments)
							}
						},
						_mouseCapture : function(f, g) {
							if (this.reverting) {
								return false
							}
							if (this.options.disabled
									|| this.options.type == "static") {
								return false
							}
							this._refreshItems(f);
							var e = null, d = this, c = a(f.target).parents()
									.each(
											function() {
												if (a.data(this,
														"sortable-item") == d) {
													e = a(this);
													return false
												}
											});
							if (a.data(f.target, "sortable-item") == d) {
								e = a(f.target)
							}
							if (!e) {
								return false
							}
							if (this.options.handle && !g) {
								var h = false;
								a(this.options.handle, e).find("*").andSelf()
										.each(function() {
											if (this == f.target) {
												h = true
											}
										});
								if (!h) {
									return false
								}
							}
							this.currentItem = e;
							this._removeCurrentsFromItems();
							return true
						},
						_mouseStart : function(f, g, c) {
							var h = this.options, d = this;
							this.currentContainer = this;
							this.refreshPositions();
							this.helper = this._createHelper(f);
							this._cacheHelperProportions();
							this._cacheMargins();
							this.scrollParent = this.helper.scrollParent();
							this.offset = this.currentItem.offset();
							this.offset = {
								top : this.offset.top - this.margins.top,
								left : this.offset.left - this.margins.left
							};
							this.helper.css("position", "absolute");
							this.cssPosition = this.helper.css("position");
							a.extend(this.offset, {
								click : {
									left : f.pageX - this.offset.left,
									top : f.pageY - this.offset.top
								},
								parent : this._getParentOffset(),
								relative : this._getRelativeOffset()
							});
							this.originalPosition = this._generatePosition(f);
							this.originalPageX = f.pageX;
							this.originalPageY = f.pageY;
							(h.cursorAt && this
									._adjustOffsetFromHelper(h.cursorAt));
							this.domPosition = {
								prev : this.currentItem.prev()[0],
								parent : this.currentItem.parent()[0]
							};
							if (this.helper[0] != this.currentItem[0]) {
								this.currentItem.hide()
							}
							this._createPlaceholder();
							if (h.containment) {
								this._setContainment()
							}
							if (h.cursor) {
								if (a("body").css("cursor")) {
									this._storedCursor = a("body")
											.css("cursor")
								}
								a("body").css("cursor", h.cursor)
							}
							if (h.opacity) {
								if (this.helper.css("opacity")) {
									this._storedOpacity = this.helper
											.css("opacity")
								}
								this.helper.css("opacity", h.opacity)
							}
							if (h.zIndex) {
								if (this.helper.css("zIndex")) {
									this._storedZIndex = this.helper
											.css("zIndex")
								}
								this.helper.css("zIndex", h.zIndex)
							}
							if (this.scrollParent[0] != document
									&& this.scrollParent[0].tagName != "HTML") {
								this.overflowOffset = this.scrollParent
										.offset()
							}
							this._trigger("start", f, this._uiHash());
							if (!this._preserveHelperProportions) {
								this._cacheHelperProportions()
							}
							if (!c) {
								for ( var e = this.containers.length - 1; e >= 0; e--) {
									this.containers[e]._trigger("activate", f,
											d._uiHash(this))
								}
							}
							if (a.ui.ddmanager) {
								a.ui.ddmanager.current = this
							}
							if (a.ui.ddmanager && !h.dropBehaviour) {
								a.ui.ddmanager.prepareOffsets(this, f)
							}
							this.dragging = true;
							this.helper.addClass("ui-sortable-helper");
							this._mouseDrag(f);
							return true
						},
						_mouseDrag : function(g) {
							this.position = this._generatePosition(g);
							this.positionAbs = this
									._convertPositionTo("absolute");
							if (!this.lastPositionAbs) {
								this.lastPositionAbs = this.positionAbs
							}
							if (this.options.scroll) {
								var h = this.options, c = false;
								if (this.scrollParent[0] != document
										&& this.scrollParent[0].tagName != "HTML") {
									if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight)
											- g.pageY < h.scrollSensitivity) {
										this.scrollParent[0].scrollTop = c = this.scrollParent[0].scrollTop
												+ h.scrollSpeed
									} else {
										if (g.pageY - this.overflowOffset.top < h.scrollSensitivity) {
											this.scrollParent[0].scrollTop = c = this.scrollParent[0].scrollTop
													- h.scrollSpeed
										}
									}
									if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth)
											- g.pageX < h.scrollSensitivity) {
										this.scrollParent[0].scrollLeft = c = this.scrollParent[0].scrollLeft
												+ h.scrollSpeed
									} else {
										if (g.pageX - this.overflowOffset.left < h.scrollSensitivity) {
											this.scrollParent[0].scrollLeft = c = this.scrollParent[0].scrollLeft
													- h.scrollSpeed
										}
									}
								} else {
									if (g.pageY - a(document).scrollTop() < h.scrollSensitivity) {
										c = a(document).scrollTop(
												a(document).scrollTop()
														- h.scrollSpeed)
									} else {
										if (a(window).height()
												- (g.pageY - a(document)
														.scrollTop()) < h.scrollSensitivity) {
											c = a(document).scrollTop(
													a(document).scrollTop()
															+ h.scrollSpeed)
										}
									}
									if (g.pageX - a(document).scrollLeft() < h.scrollSensitivity) {
										c = a(document).scrollLeft(
												a(document).scrollLeft()
														- h.scrollSpeed)
									} else {
										if (a(window).width()
												- (g.pageX - a(document)
														.scrollLeft()) < h.scrollSensitivity) {
											c = a(document).scrollLeft(
													a(document).scrollLeft()
															+ h.scrollSpeed)
										}
									}
								}
								if (c !== false && a.ui.ddmanager
										&& !h.dropBehaviour) {
									a.ui.ddmanager.prepareOffsets(this, g)
								}
							}
							this.positionAbs = this
									._convertPositionTo("absolute");
							if (!this.options.axis || this.options.axis != "y") {
								this.helper[0].style.left = this.position.left
										+ "px"
							}
							if (!this.options.axis || this.options.axis != "x") {
								this.helper[0].style.top = this.position.top
										+ "px"
							}
							for ( var e = this.items.length - 1; e >= 0; e--) {
								var f = this.items[e], d = f.item[0], j = this
										._intersectsWithPointer(f);
								if (!j) {
									continue
								}
								if (d != this.currentItem[0]
										&& this.placeholder[j == 1 ? "next"
												: "prev"]()[0] != d
										&& !a.ui.contains(this.placeholder[0],
												d)
										&& (this.options.type == "semi-dynamic" ? !a.ui
												.contains(this.element[0], d)
												: true)) {
									this.direction = j == 1 ? "down" : "up";
									if (this.options.tolerance == "pointer"
											|| this._intersectsWithSides(f)) {
										this._rearrange(g, f)
									} else {
										break
									}
									this._trigger("change", g, this._uiHash());
									break
								}
							}
							this._contactContainers(g);
							if (a.ui.ddmanager) {
								a.ui.ddmanager.drag(this, g)
							}
							this._trigger("sort", g, this._uiHash());
							this.lastPositionAbs = this.positionAbs;
							return false
						},
						_mouseStop : function(d, e) {
							if (!d) {
								return
							}
							if (a.ui.ddmanager && !this.options.dropBehaviour) {
								a.ui.ddmanager.drop(this, d)
							}
							if (this.options.revert) {
								var c = this;
								var f = c.placeholder.offset();
								c.reverting = true;
								a(this.helper)
										.animate(
												{
													left : f.left
															- this.offset.parent.left
															- c.margins.left
															+ (this.offsetParent[0] == document.body ? 0
																	: this.offsetParent[0].scrollLeft),
													top : f.top
															- this.offset.parent.top
															- c.margins.top
															+ (this.offsetParent[0] == document.body ? 0
																	: this.offsetParent[0].scrollTop)
												},
												parseInt(this.options.revert,
														10) || 500, function() {
													c._clear(d)
												})
							} else {
								this._clear(d, e)
							}
							return false
						},
						cancel : function() {
							var c = this;
							if (this.dragging) {
								this._mouseUp( {
									target : null
								});
								if (this.options.helper == "original") {
									this.currentItem.css(this._storedCSS)
											.removeClass("ui-sortable-helper")
								} else {
									this.currentItem.show()
								}
								for ( var d = this.containers.length - 1; d >= 0; d--) {
									this.containers[d]._trigger("deactivate",
											null, c._uiHash(this));
									if (this.containers[d].containerCache.over) {
										this.containers[d]._trigger("out",
												null, c._uiHash(this));
										this.containers[d].containerCache.over = 0
									}
								}
							}
							if (this.placeholder) {
								if (this.placeholder[0].parentNode) {
									this.placeholder[0].parentNode
											.removeChild(this.placeholder[0])
								}
								if (this.options.helper != "original"
										&& this.helper
										&& this.helper[0].parentNode) {
									this.helper.remove()
								}
								a.extend(this, {
									helper : null,
									dragging : false,
									reverting : false,
									_noFinalSort : null
								});
								if (this.domPosition.prev) {
									a(this.domPosition.prev).after(
											this.currentItem)
								} else {
									a(this.domPosition.parent).prepend(
											this.currentItem)
								}
							}
							return this
						},
						serialize : function(e) {
							var c = this._getItemsAsjQuery(e && e.connected);
							var d = [];
							e = e || {};
							a(c)
									.each(
											function() {
												var f = (a(e.item || this)
														.attr(
																e.attribute
																		|| "id") || "")
														.match(e.expression || (/(.+)[-=_](.+)/));
												if (f) {
													d
															.push((e.key || f[1]
																	+ "[]")
																	+ "="
																	+ (e.key
																			&& e.expression ? f[1]
																			: f[2]))
												}
											});
							if (!d.length && e.key) {
								d.push(e.key + "=")
							}
							return d.join("&")
						},
						toArray : function(e) {
							var c = this._getItemsAsjQuery(e && e.connected);
							var d = [];
							e = e || {};
							c.each(function() {
								d.push(a(e.item || this).attr(
										e.attribute || "id")
										|| "")
							});
							return d
						},
						_intersectsWith : function(m) {
							var e = this.positionAbs.left, d = e
									+ this.helperProportions.width, k = this.positionAbs.top, j = k
									+ this.helperProportions.height;
							var f = m.left, c = f + m.width, o = m.top, i = o
									+ m.height;
							var p = this.offset.click.top, h = this.offset.click.left;
							var g = (k + p) > o && (k + p) < i && (e + h) > f
									&& (e + h) < c;
							if (this.options.tolerance == "pointer"
									|| this.options.forcePointerForContainers
									|| (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? "width"
											: "height"] > m[this.floating ? "width"
											: "height"])) {
								return g
							} else {
								return (f < e
										+ (this.helperProportions.width / 2)
										&& d
												- (this.helperProportions.width / 2) < c
										&& o < k
												+ (this.helperProportions.height / 2) && j
										- (this.helperProportions.height / 2) < i)
							}
						},
						_intersectsWithPointer : function(e) {
							var f = a.ui.isOverAxis(this.positionAbs.top
									+ this.offset.click.top, e.top, e.height), d = a.ui
									.isOverAxis(this.positionAbs.left
											+ this.offset.click.left, e.left,
											e.width), h = f && d, c = this
									._getDragVerticalDirection(), g = this
									._getDragHorizontalDirection();
							if (!h) {
								return false
							}
							return this.floating ? (((g && g == "right") || c == "down") ? 2
									: 1)
									: (c && (c == "down" ? 2 : 1))
						},
						_intersectsWithSides : function(f) {
							var d = a.ui.isOverAxis(this.positionAbs.top
									+ this.offset.click.top, f.top
									+ (f.height / 2), f.height), e = a.ui
									.isOverAxis(this.positionAbs.left
											+ this.offset.click.left, f.left
											+ (f.width / 2), f.width), c = this
									._getDragVerticalDirection(), g = this
									._getDragHorizontalDirection();
							if (this.floating && g) {
								return ((g == "right" && e) || (g == "left" && !e))
							} else {
								return c
										&& ((c == "down" && d) || (c == "up" && !d))
							}
						},
						_getDragVerticalDirection : function() {
							var c = this.positionAbs.top
									- this.lastPositionAbs.top;
							return c != 0 && (c > 0 ? "down" : "up")
						},
						_getDragHorizontalDirection : function() {
							var c = this.positionAbs.left
									- this.lastPositionAbs.left;
							return c != 0 && (c > 0 ? "right" : "left")
						},
						refresh : function(c) {
							this._refreshItems(c);
							this.refreshPositions();
							return this
						},
						_connectWith : function() {
							var c = this.options;
							return c.connectWith.constructor == String ? [ c.connectWith ]
									: c.connectWith
						},
						_getItemsAsjQuery : function(c) {
							var m = this;
							var h = [];
							var f = [];
							var k = this._connectWith();
							if (k && c) {
								for ( var e = k.length - 1; e >= 0; e--) {
									var l = a(k[e]);
									for ( var d = l.length - 1; d >= 0; d--) {
										var g = a.data(l[d], "sortable");
										if (g && g != this
												&& !g.options.disabled) {
											f
													.push( [
															a
																	.isFunction(g.options.items) ? g.options.items
																	.call(g.element)
																	: a(
																			g.options.items,
																			g.element)
																			.not(
																					".ui-sortable-helper")
																			.not(
																					".ui-sortable-placeholder"),
															g ])
										}
									}
								}
							}
							f
									.push( [
											a.isFunction(this.options.items) ? this.options.items
													.call(this.element, null, {
														options : this.options,
														item : this.currentItem
													})
													: a(this.options.items,
															this.element)
															.not(
																	".ui-sortable-helper")
															.not(
																	".ui-sortable-placeholder"),
											this ]);
							for ( var e = f.length - 1; e >= 0; e--) {
								f[e][0].each(function() {
									h.push(this)
								})
							}
							return a(h)
						},
						_removeCurrentsFromItems : function() {
							var e = this.currentItem
									.find(":data(sortable-item)");
							for ( var d = 0; d < this.items.length; d++) {
								for ( var c = 0; c < e.length; c++) {
									if (e[c] == this.items[d].item[0]) {
										this.items.splice(d, 1)
									}
								}
							}
						},
						_refreshItems : function(c) {
							this.items = [];
							this.containers = [ this ];
							var k = this.items;
							var r = this;
							var g = [ [
									a.isFunction(this.options.items) ? this.options.items
											.call(this.element[0], c, {
												item : this.currentItem
											})
											: a(this.options.items,
													this.element), this ] ];
							var m = this._connectWith();
							if (m) {
								for ( var f = m.length - 1; f >= 0; f--) {
									var o = a(m[f]);
									for ( var e = o.length - 1; e >= 0; e--) {
										var h = a.data(o[e], "sortable");
										if (h && h != this
												&& !h.options.disabled) {
											g
													.push( [
															a
																	.isFunction(h.options.items) ? h.options.items
																	.call(
																			h.element[0],
																			c,
																			{
																				item : this.currentItem
																			})
																	: a(
																			h.options.items,
																			h.element),
															h ]);
											this.containers.push(h)
										}
									}
								}
							}
							for ( var f = g.length - 1; f >= 0; f--) {
								var l = g[f][1];
								var d = g[f][0];
								for ( var e = 0, p = d.length; e < p; e++) {
									var q = a(d[e]);
									q.data("sortable-item", l);
									k.push( {
										item : q,
										instance : l,
										width : 0,
										height : 0,
										left : 0,
										top : 0
									})
								}
							}
						},
						refreshPositions : function(c) {
							if (this.offsetParent && this.helper) {
								this.offset.parent = this._getParentOffset()
							}
							for ( var e = this.items.length - 1; e >= 0; e--) {
								var f = this.items[e];
								if (f.instance != this.currentContainer
										&& this.currentContainer
										&& f.item[0] != this.currentItem[0]) {
									continue
								}
								var d = this.options.toleranceElement ? a(
										this.options.toleranceElement, f.item)
										: f.item;
								if (!c) {
									f.width = d.outerWidth();
									f.height = d.outerHeight()
								}
								var g = d.offset();
								f.left = g.left;
								f.top = g.top
							}
							if (this.options.custom
									&& this.options.custom.refreshContainers) {
								this.options.custom.refreshContainers
										.call(this)
							} else {
								for ( var e = this.containers.length - 1; e >= 0; e--) {
									var g = this.containers[e].element.offset();
									this.containers[e].containerCache.left = g.left;
									this.containers[e].containerCache.top = g.top;
									this.containers[e].containerCache.width = this.containers[e].element
											.outerWidth();
									this.containers[e].containerCache.height = this.containers[e].element
											.outerHeight()
								}
							}
							return this
						},
						_createPlaceholder : function(e) {
							var c = e || this, f = c.options;
							if (!f.placeholder
									|| f.placeholder.constructor == String) {
								var d = f.placeholder;
								f.placeholder = {
									element : function() {
										var g = a(
												document
														.createElement(c.currentItem[0].nodeName))
												.addClass(
														d
																|| c.currentItem[0].className
																+ " ui-sortable-placeholder")
												.removeClass(
														"ui-sortable-helper")[0];
										if (!d) {
											g.style.visibility = "hidden"
										}
										return g
									},
									update : function(g, h) {
										if (d && !f.forcePlaceholderSize) {
											return
										}
										if (!h.height()) {
											h
													.height(c.currentItem
															.innerHeight()
															- parseInt(
																	c.currentItem
																			.css("paddingTop") || 0,
																	10)
															- parseInt(
																	c.currentItem
																			.css("paddingBottom") || 0,
																	10))
										}
										if (!h.width()) {
											h
													.width(c.currentItem
															.innerWidth()
															- parseInt(
																	c.currentItem
																			.css("paddingLeft") || 0,
																	10)
															- parseInt(
																	c.currentItem
																			.css("paddingRight") || 0,
																	10))
										}
									}
								}
							}
							c.placeholder = a(f.placeholder.element.call(
									c.element, c.currentItem));
							c.currentItem.after(c.placeholder);
							f.placeholder.update(c, c.placeholder)
						},
						_contactContainers : function(c) {
							var e = null, l = null;
							for ( var g = this.containers.length - 1; g >= 0; g--) {
								if (a.ui.contains(this.currentItem[0],
										this.containers[g].element[0])) {
									continue
								}
								if (this
										._intersectsWith(this.containers[g].containerCache)) {
									if (e
											&& a.ui
													.contains(
															this.containers[g].element[0],
															e.element[0])) {
										continue
									}
									e = this.containers[g];
									l = g
								} else {
									if (this.containers[g].containerCache.over) {
										this.containers[g]._trigger("out", c,
												this._uiHash(this));
										this.containers[g].containerCache.over = 0
									}
								}
							}
							if (!e) {
								return
							}
							if (this.containers.length === 1) {
								this.containers[l]._trigger("over", c, this
										._uiHash(this));
								this.containers[l].containerCache.over = 1
							} else {
								if (this.currentContainer != this.containers[l]) {
									var k = 10000;
									var h = null;
									var d = this.positionAbs[this.containers[l].floating ? "left"
											: "top"];
									for ( var f = this.items.length - 1; f >= 0; f--) {
										if (!a.ui.contains(
												this.containers[l].element[0],
												this.items[f].item[0])) {
											continue
										}
										var m = this.items[f][this.containers[l].floating ? "left"
												: "top"];
										if (Math.abs(m - d) < k) {
											k = Math.abs(m - d);
											h = this.items[f]
										}
									}
									if (!h && !this.options.dropOnEmpty) {
										return
									}
									this.currentContainer = this.containers[l];
									h ? this._rearrange(c, h, null, true)
											: this._rearrange(c, null,
													this.containers[l].element,
													true);
									this._trigger("change", c, this._uiHash());
									this.containers[l]._trigger("change", c,
											this._uiHash(this));
									this.options.placeholder.update(
											this.currentContainer,
											this.placeholder);
									this.containers[l]._trigger("over", c, this
											._uiHash(this));
									this.containers[l].containerCache.over = 1
								}
							}
						},
						_createHelper : function(d) {
							var e = this.options;
							var c = a.isFunction(e.helper) ? a(e.helper.apply(
									this.element[0], [ d, this.currentItem ]))
									: (e.helper == "clone" ? this.currentItem
											.clone() : this.currentItem);
							if (!c.parents("body").length) {
								a(e.appendTo != "parent" ? e.appendTo
										: this.currentItem[0].parentNode)[0]
										.appendChild(c[0])
							}
							if (c[0] == this.currentItem[0]) {
								this._storedCSS = {
									width : this.currentItem[0].style.width,
									height : this.currentItem[0].style.height,
									position : this.currentItem.css("position"),
									top : this.currentItem.css("top"),
									left : this.currentItem.css("left")
								}
							}
							if (c[0].style.width == "" || e.forceHelperSize) {
								c.width(this.currentItem.width())
							}
							if (c[0].style.height == "" || e.forceHelperSize) {
								c.height(this.currentItem.height())
							}
							return c
						},
						_adjustOffsetFromHelper : function(c) {
							if (typeof c == "string") {
								c = c.split(" ")
							}
							if (a.isArray(c)) {
								c = {
									left : +c[0],
									top : +c[1] || 0
								}
							}
							if ("left" in c) {
								this.offset.click.left = c.left
										+ this.margins.left
							}
							if ("right" in c) {
								this.offset.click.left = this.helperProportions.width
										- c.right + this.margins.left
							}
							if ("top" in c) {
								this.offset.click.top = c.top
										+ this.margins.top
							}
							if ("bottom" in c) {
								this.offset.click.top = this.helperProportions.height
										- c.bottom + this.margins.top
							}
						},
						_getParentOffset : function() {
							this.offsetParent = this.helper.offsetParent();
							var c = this.offsetParent.offset();
							if (this.cssPosition == "absolute"
									&& this.scrollParent[0] != document
									&& a.ui.contains(this.scrollParent[0],
											this.offsetParent[0])) {
								c.left += this.scrollParent.scrollLeft();
								c.top += this.scrollParent.scrollTop()
							}
							if ((this.offsetParent[0] == document.body)
									|| (this.offsetParent[0].tagName
											&& this.offsetParent[0].tagName
													.toLowerCase() == "html" && a.browser.msie)) {
								c = {
									top : 0,
									left : 0
								}
							}
							return {
								top : c.top
										+ (parseInt(this.offsetParent
												.css("borderTopWidth"), 10) || 0),
								left : c.left
										+ (parseInt(this.offsetParent
												.css("borderLeftWidth"), 10) || 0)
							}
						},
						_getRelativeOffset : function() {
							if (this.cssPosition == "relative") {
								var c = this.currentItem.position();
								return {
									top : c.top
											- (parseInt(this.helper.css("top"),
													10) || 0)
											+ this.scrollParent.scrollTop(),
									left : c.left
											- (parseInt(
													this.helper.css("left"), 10) || 0)
											+ this.scrollParent.scrollLeft()
								}
							} else {
								return {
									top : 0,
									left : 0
								}
							}
						},
						_cacheMargins : function() {
							this.margins = {
								left : (parseInt(this.currentItem
										.css("marginLeft"), 10) || 0),
								top : (parseInt(this.currentItem
										.css("marginTop"), 10) || 0)
							}
						},
						_cacheHelperProportions : function() {
							this.helperProportions = {
								width : this.helper.outerWidth(),
								height : this.helper.outerHeight()
							}
						},
						_setContainment : function() {
							var f = this.options;
							if (f.containment == "parent") {
								f.containment = this.helper[0].parentNode
							}
							if (f.containment == "document"
									|| f.containment == "window") {
								this.containment = [
										0 - this.offset.relative.left
												- this.offset.parent.left,
										0 - this.offset.relative.top
												- this.offset.parent.top,
										a(
												f.containment == "document" ? document
														: window).width()
												- this.helperProportions.width
												- this.margins.left,
										(a(
												f.containment == "document" ? document
														: window).height() || document.body.parentNode.scrollHeight)
												- this.helperProportions.height
												- this.margins.top ]
							}
							if (!(/^(document|window|parent)$/)
									.test(f.containment)) {
								var d = a(f.containment)[0];
								var e = a(f.containment).offset();
								var c = (a(d).css("overflow") != "hidden");
								this.containment = [
										e.left
												+ (parseInt(a(d).css(
														"borderLeftWidth"), 10) || 0)
												+ (parseInt(a(d).css(
														"paddingLeft"), 10) || 0)
												- this.margins.left,
										e.top
												+ (parseInt(a(d).css(
														"borderTopWidth"), 10) || 0)
												+ (parseInt(a(d).css(
														"paddingTop"), 10) || 0)
												- this.margins.top,
										e.left
												+ (c ? Math.max(d.scrollWidth,
														d.offsetWidth)
														: d.offsetWidth)
												- (parseInt(a(d).css(
														"borderLeftWidth"), 10) || 0)
												- (parseInt(a(d).css(
														"paddingRight"), 10) || 0)
												- this.helperProportions.width
												- this.margins.left,
										e.top
												+ (c ? Math.max(d.scrollHeight,
														d.offsetHeight)
														: d.offsetHeight)
												- (parseInt(a(d).css(
														"borderTopWidth"), 10) || 0)
												- (parseInt(a(d).css(
														"paddingBottom"), 10) || 0)
												- this.helperProportions.height
												- this.margins.top ]
							}
						},
						_convertPositionTo : function(g, i) {
							if (!i) {
								i = this.position
							}
							var e = g == "absolute" ? 1 : -1;
							var f = this.options, c = this.cssPosition == "absolute"
									&& !(this.scrollParent[0] != document && a.ui
											.contains(this.scrollParent[0],
													this.offsetParent[0])) ? this.offsetParent
									: this.scrollParent, h = (/(html|body)/i)
									.test(c[0].tagName);
							return {
								top : (i.top + this.offset.relative.top * e
										+ this.offset.parent.top * e - (a.browser.safari
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollTop()
												: (h ? 0 : c.scrollTop()))
												* e)),
								left : (i.left + this.offset.relative.left * e
										+ this.offset.parent.left * e - (a.browser.safari
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollLeft()
												: h ? 0 : c.scrollLeft())
												* e))
							}
						},
						_generatePosition : function(f) {
							var i = this.options, c = this.cssPosition == "absolute"
									&& !(this.scrollParent[0] != document && a.ui
											.contains(this.scrollParent[0],
													this.offsetParent[0])) ? this.offsetParent
									: this.scrollParent, j = (/(html|body)/i)
									.test(c[0].tagName);
							if (this.cssPosition == "relative"
									&& !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
								this.offset.relative = this
										._getRelativeOffset()
							}
							var e = f.pageX;
							var d = f.pageY;
							if (this.originalPosition) {
								if (this.containment) {
									if (f.pageX - this.offset.click.left < this.containment[0]) {
										e = this.containment[0]
												+ this.offset.click.left
									}
									if (f.pageY - this.offset.click.top < this.containment[1]) {
										d = this.containment[1]
												+ this.offset.click.top
									}
									if (f.pageX - this.offset.click.left > this.containment[2]) {
										e = this.containment[2]
												+ this.offset.click.left
									}
									if (f.pageY - this.offset.click.top > this.containment[3]) {
										d = this.containment[3]
												+ this.offset.click.top
									}
								}
								if (i.grid) {
									var h = this.originalPageY
											+ Math
													.round((d - this.originalPageY)
															/ i.grid[1])
											* i.grid[1];
									d = this.containment ? (!(h
											- this.offset.click.top < this.containment[1] || h
											- this.offset.click.top > this.containment[3]) ? h
											: (!(h - this.offset.click.top < this.containment[1]) ? h
													- i.grid[1]
													: h + i.grid[1]))
											: h;
									var g = this.originalPageX
											+ Math
													.round((e - this.originalPageX)
															/ i.grid[0])
											* i.grid[0];
									e = this.containment ? (!(g
											- this.offset.click.left < this.containment[0] || g
											- this.offset.click.left > this.containment[2]) ? g
											: (!(g - this.offset.click.left < this.containment[0]) ? g
													- i.grid[0]
													: g + i.grid[0]))
											: g
								}
							}
							return {
								top : (d - this.offset.click.top
										- this.offset.relative.top
										- this.offset.parent.top + (a.browser.safari
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollTop()
												: (j ? 0 : c.scrollTop())))),
								left : (e - this.offset.click.left
										- this.offset.relative.left
										- this.offset.parent.left + (a.browser.safari
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollLeft()
												: j ? 0 : c.scrollLeft())))
							}
						},
						_rearrange : function(h, g, d, f) {
							d ? d[0].appendChild(this.placeholder[0])
									: g.item[0].parentNode
											.insertBefore(
													this.placeholder[0],
													(this.direction == "down" ? g.item[0]
															: g.item[0].nextSibling));
							this.counter = this.counter ? ++this.counter : 1;
							var e = this, c = this.counter;
							window.setTimeout(function() {
								if (c == e.counter) {
									e.refreshPositions(!f)
								}
							}, 0)
						},
						_clear : function(e, f) {
							this.reverting = false;
							var g = [], c = this;
							if (!this._noFinalSort
									&& this.currentItem.parent().length) {
								this.placeholder.before(this.currentItem)
							}
							this._noFinalSort = null;
							if (this.helper[0] == this.currentItem[0]) {
								for ( var d in this._storedCSS) {
									if (this._storedCSS[d] == "auto"
											|| this._storedCSS[d] == "static") {
										this._storedCSS[d] = ""
									}
								}
								this.currentItem.css(this._storedCSS)
										.removeClass("ui-sortable-helper")
							} else {
								this.currentItem.show()
							}
							if (this.fromOutside && !f) {
								g.push(function(h) {
									this._trigger("receive", h, this
											._uiHash(this.fromOutside))
								})
							}
							if ((this.fromOutside
									|| this.domPosition.prev != this.currentItem
											.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem
									.parent()[0])
									&& !f) {
								g.push(function(h) {
									this._trigger("update", h, this._uiHash())
								})
							}
							if (!a.ui.contains(this.element[0],
									this.currentItem[0])) {
								if (!f) {
									g.push(function(h) {
										this._trigger("remove", h, this
												._uiHash())
									})
								}
								for ( var d = this.containers.length - 1; d >= 0; d--) {
									if (a.ui.contains(
											this.containers[d].element[0],
											this.currentItem[0])
											&& !f) {
										g.push((function(h) {
											return function(i) {
												h._trigger("receive", i, this
														._uiHash(this))
											}
										}).call(this, this.containers[d]));
										g.push((function(h) {
											return function(i) {
												h._trigger("update", i, this
														._uiHash(this))
											}
										}).call(this, this.containers[d]))
									}
								}
							}
							for ( var d = this.containers.length - 1; d >= 0; d--) {
								if (!f) {
									g.push((function(h) {
										return function(i) {
											h._trigger("deactivate", i, this
													._uiHash(this))
										}
									}).call(this, this.containers[d]))
								}
								if (this.containers[d].containerCache.over) {
									g.push((function(h) {
										return function(i) {
											h._trigger("out", i, this
													._uiHash(this))
										}
									}).call(this, this.containers[d]));
									this.containers[d].containerCache.over = 0
								}
							}
							if (this._storedCursor) {
								a("body").css("cursor", this._storedCursor)
							}
							if (this._storedOpacity) {
								this.helper.css("opacity", this._storedOpacity)
							}
							if (this._storedZIndex) {
								this.helper.css("zIndex",
										this._storedZIndex == "auto" ? ""
												: this._storedZIndex)
							}
							this.dragging = false;
							if (this.cancelHelperRemoval) {
								if (!f) {
									this._trigger("beforeStop", e, this
											._uiHash());
									for ( var d = 0; d < g.length; d++) {
										g[d].call(this, e)
									}
									this._trigger("stop", e, this._uiHash())
								}
								return false
							}
							if (!f) {
								this._trigger("beforeStop", e, this._uiHash())
							}
							this.placeholder[0].parentNode
									.removeChild(this.placeholder[0]);
							if (this.helper[0] != this.currentItem[0]) {
								this.helper.remove()
							}
							this.helper = null;
							if (!f) {
								for ( var d = 0; d < g.length; d++) {
									g[d].call(this, e)
								}
								this._trigger("stop", e, this._uiHash())
							}
							this.fromOutside = false;
							return true
						},
						_trigger : function() {
							if (a.Widget.prototype._trigger.apply(this,
									arguments) === false) {
								this.cancel()
							}
						},
						_uiHash : function(d) {
							var c = d || this;
							return {
								helper : c.helper,
								placeholder : c.placeholder || a( []),
								position : c.position,
								originalPosition : c.originalPosition,
								offset : c.positionAbs,
								item : c.currentItem,
								sender : d ? d.element : null
							}
						}
					});
	a.extend(a.ui.sortable, {
		version : "1.8.15"
	})
})(jQuery);
(function() {
	var j = {
		title : null,
		iconCls : null,
		width : "auto",
		height : "auto",
		left : null,
		top : null,
		cls : null,
		headerCls : null,
		bodyCls : null,
		style : {},
		href : null,
		cache : true,
		fit : false,
		border : true,
		doSize : true,
		noHeader : false,
		clickExpand : false,
		content : null,
		url : null,
		collapsible : false,
		minimizable : false,
		maximizable : false,
		closable : false,
		collapsed : false,
		minimized : false,
		maximized : false,
		closed : false,
		tools : [],
		lazyLoad : false,
		loadingMessage : "Loading...",
		extractor : function(v) {
			var u = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
			var t = u.exec(v);
			if (t) {
				return t[1]
			} else {
				return v
			}
		},
		onLoad : function() {
		},
		onBeforeOpen : function() {
		},
		onOpen : function() {
		},
		onBeforeClose : function() {
		},
		onClose : function() {
		},
		onBeforeDestroy : function() {
		},
		onDestroy : function() {
		},
		onResize : function(u, t) {
		},
		onMove : function(t, u) {
		},
		onMaximize : function() {
		},
		onRestore : function() {
		},
		onMinimize : function() {
		},
		onBeforeCollapse : function() {
		},
		onBeforeExpand : function() {
		},
		onCollapse : function() {
		},
		onExpand : function() {
		}
	};
	function a(u) {
		var t = $(u).addClass("om-panel-body om-widget-content").wrap(
				'<div class="om-panel"></div>').parent();
		return t
	}
	function s(u) {
		var x = $.data(u, "panel");
		var v = x.options, t = x.panel;
		var w = t.attr("style");
		if ((w && w.indexOf("width") != -1) || v.width == "auto") {
		} else {
			if (v.width == "fit") {
				t.css("width", "100%")
			} else {
				if (!!v.width) {
					t.css("width", v.width)
				}
			}
		}
		if ((w && w.indexOf("height") != -1) || v.height == "auto") {
		} else {
			if (v.height == "fit") {
				t.css("height", "100%")
			} else {
				if (!!v.height) {
					t.css("height", v.height)
				}
			}
		}
		q(u);
		c(u)
	}
	function q(E) {
		var v = $.data(E, "panel");
		var F = v.options, t = v.panel;
		if (F.title && !F.noHeader) {
			var w = $('<div class="om-panel-header"></div>').prependTo(t);
			if (F.clickExpand) {
				w.addClass("om-state-cursor-pointer")
			}
			var C = $('<div class="om-panel-title"></div>').html(F.title);
			if (F.iconCls) {
				var B = $('<div class="om-panel-icon"></div>').appendTo(w);
				B.addClass(F.iconCls)
			}
			C.appendTo(w);
			var y = $('<div class="om-panel-tool"></div>').appendTo(w);
			var u, D, z, x;
			if (A(F.tools, "collapse")) {
				x = $('<div class="om-panel-tool-collapse"></div>')
						.prependTo(y)
			}
			if (A(F.tools, "min")) {
				D = $('<div class="om-panel-tool-min"></div>').prependTo(y)
			}
			if (A(F.tools, "max")) {
				z = $('<div class="om-panel-tool-max"></div>').prependTo(y)
			}
			if (F.closable || A(F.tools, "close")) {
				u = $('<div class="om-panel-tool-close"></div>').prependTo(y)
			}
		}
		function A(I, H) {
			var G = I.length;
			while (G--) {
				if (I[G] == H) {
					return true
				}
			}
			return false
		}
	}
	function c(v) {
		var y = $.data(v, "panel");
		var w = y.options, u = y.panel;
		var t = u.find(">.om-panel-body");
		if (w.noHeader || !w.title) {
			t.addClass("om-panel-body-noheader")
		} else {
			t.removeClass("om-panel-body-noheader")
		}
		if (!w.lazyLoad) {
			d(v)
		}
		if (w.border == false) {
			t.addClass("om-panel-body-noborder")
		} else {
			t.removeClass("om-panel-body-noborder")
		}
		var x = t.attr("style");
		if ((x && x.indexOf("height") != -1) || w.height == "auto") {
		} else {
			var z = t.outerHeight() - t.height();
			t.css("height", u.innerHeight()
					- u.find(">.om-panel-header").outerHeight() - z)
		}
		u.css( {
			marginTop : t.css("marginTop"),
			marginRight : t.css("marginRight"),
			marginBottom : t.css("marginBottom"),
			marginLeft : t.css("marginLeft")
		});
		t.css( {
			marginTop : 0,
			marginRight : 0,
			marginBottom : 0,
			marginLeft : 0,
			display : "block"
		})
	}
	function m(u) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		if (v.closed == true) {
			$(u).omPanel("close")
		} else {
			if (v.maximized == true) {
				$(u).omPanel("maximize")
			} else {
				if (v.minimized == true) {
					$(u).omPanel("minimize")
				}
			}
		}
		if (v.collapsed == true) {
			$(u).omPanel("collapse")
		}
	}
	function b(u) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		var x = t.find(">div.om-panel-header >div.om-panel-tool");
		x.find(".om-panel-tool-close").click(function() {
			$(u).omPanel("close", true);
			return false
		});
		x.find(".om-panel-tool-max").click(function() {
			alert("not implemented yet!");
			return false
		});
		x.find(".om-panel-tool-min").click(function() {
			alert("not implemented yet!");
			return false
		});
		x.find(".om-panel-tool-collapse").click(function() {
			if (v.collapsed == true) {
				$(u).omPanel("expand", true)
			} else {
				$(u).omPanel("collapse", true)
			}
			return false
		});
		if (v.clickExpand) {
			t.find(">div.om-panel-header").click(function() {
				if (v.collapsed == true) {
					$(u).omPanel("expand", true)
				} else {
					$(u).omPanel("collapse", true)
				}
				return false
			})
		}
	}
	function f(u) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		var y = t.find(">div.om-panel-header");
		var x = y.find(">div.om-panel-tool");
		y.unbind();
		x.children().unbind()
	}
	function i(v, z, y) {
		var x = $.data(v, "panel");
		var w = x.options, u = x.panel;
		if (w.onBeforeOpen.call(v) == false) {
			return false
		}
		var t = $.data(v, "panel").isLoaded;
		if (!t) {
			d(v)
		}
		u.hide();
		u.css( {
			position : "static",
			left : "auto",
			top : "auto"
		});
		if (z == true) {
			u.fadeIn(y || "normal", function() {
				w.closed = false;
				w.minimized = false;
				w.onOpen.call(v)
			})
		} else {
			u.show();
			w.closed = false;
			w.minimized = false;
			w.onOpen.call(v)
		}
	}
	function e(u, y, x) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		if (v.onBeforeClose.call(u) == false) {
			return false
		}
		if (y == true) {
			t.fadeOut(x || "normal", function() {
				v.closed = true;
				t.css( {
					position : "absolute",
					left : -50000,
					top : -50000
				});
				t.show();
				v.onClose.call(u)
			})
		} else {
			v.closed = true;
			t.css( {
				position : "absolute",
				left : -50000,
				top : -50000
			});
			v.onClose.call(u)
		}
	}
	function g(u, y, x) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		var A = t.find(">div.om-panel-header"), z = A
				.find("div.om-panel-tool-collapse");
		if (z.length == 0) {
			return
		}
		if (v.onBeforeCollapse.call(u) == false) {
			return false
		}
		A.removeClass("om-panel-expanded").addClass("om-panel-collapsed");
		z.removeClass("om-panel-tool-collapse")
				.addClass("om-panel-tool-expand");
		if (y) {
			t.find(">div.om-panel-body").slideUp(x || "slow", function() {
				v.collapsed = true;
				v.onCollapse.call(u)
			})
		} else {
			t.find(">div.om-panel-body").hide();
			v.collapsed = true;
			v.onCollapse.call(u)
		}
	}
	function h(u, z, y) {
		var x = $.data(u, "panel");
		var v = x.options, t = x.panel;
		var A = t.find(">div.om-panel-header"), w = A
				.find("div.om-panel-tool-expand");
		if (w.length == 0) {
			return
		}
		if (v.onBeforeExpand.call(u) == false) {
			return false
		}
		A.removeClass("om-panel-collapsed").addClass("om-panel-expanded");
		w.removeClass("om-panel-tool-expand")
				.addClass("om-panel-tool-collapse");
		if (z) {
			t.find(">div.om-panel-body").slideDown(y || "normal", function() {
				v.collapsed = false;
				v.onExpand.call(u)
			})
		} else {
			t.find(">div.om-panel-body").show();
			v.collapsed = false;
			v.onExpand.call(u)
		}
	}
	function l(u, x) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		v.title = x;
		t.find(">div.om-panel-header div.om-panel-title").html(x)
	}
	function r(t, v, w) {
		if (!(v = $.trim(v))) {
			return false
		}
		var u = $.data(t, "panel").options;
		u.content = u.url = null;
		w == true ? u.url = v : u.content = v;
		$.data(t, "panel") && ($.data(t, "panel").isLoaded = false)
	}
	function d(v) {
		var x = $.data(v, "panel");
		var w = x.options, u = x.panel;
		var t = u.find(">.om-panel-body");
		if ($.data(v, "panel").isLoading) {
			return
		}
		$.data(v, "panel").isLoading = true;
		if (w.url) {
			t.load(w.url, function(z, y, A) {
				if (y == "success") {
					if ($.data(v, "panel")) {
						$.data(v, "panel").isLoaded = true;
						$.data(v, "panel").isLoading = false;
						w.onLoad.call(v)
					}
				}
			})
		} else {
			if (w.content) {
				t.html(w.content);
				$.data(v, "panel").isLoading = false
			} else {
				$.data(v, "panel").isLoading = false
			}
		}
	}
	function k(u) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		if (!t.hasClass("om-state-disabled")) {
			t.addClass("om-state-disabled");
			var x = $(u).omPanel("header");
			x.addClass("om-state-disabled");
			x.removeClass("om-state-cursor-pointer");
			x.find(">div.om-panel-icon").addClass("om-panel-icon-disabled");
			$(u).omPanel("body").addClass("om-state-disabled")
		}
		f(u)
	}
	function p(u) {
		var w = $.data(u, "panel");
		var v = w.options, t = w.panel;
		if (t.hasClass("om-state-disabled")) {
			t.removeClass("om-state-disabled");
			var x = $(u).omPanel("header");
			x.removeClass("om-state-disabled");
			x.find(">div.om-panel-icon").removeClass("om-panel-icon-disabled");
			$(u).omPanel("body").removeClass("om-state-disabled")
		}
		$(u).omPanel("header").addClass("om-state-cursor-pointer");
		b(u)
	}
	var o = {
		options : function(u) {
			var t = $.data(this[0], "panel").options;
			if (u) {
				$.extend(t, u)
			}
			return t
		},
		panel : function() {
			return $.data(this[0], "panel").panel
		},
		header : function() {
			return $.data(this[0], "panel").panel.find(">div.om-panel-header")
		},
		body : function() {
			return $.data(this[0], "panel").panel.find(">div.om-panel-body")
		},
		setTitle : function(t) {
			return this.each(function() {
				l(this, t)
			})
		},
		setDataSource : function(t, u) {
			return this.each(function() {
				r(this, t, u)
			})
		},
		open : function(u, t) {
			return this.each(function() {
				i(this, u, t)
			})
		},
		close : function(u, t) {
			return this.each(function() {
				e(this, u, t)
			})
		},
		disable : function() {
			return this.each(function() {
				k(this)
			})
		},
		enable : function() {
			return this.each(function() {
				p(this)
			})
		},
		collapse : function(u, t) {
			return this.each(function() {
				g(this, u, t)
			})
		},
		expand : function(u, t) {
			return this.each(function() {
				h(this, u, t)
			})
		},
		reload : function(t, u) {
			return this.each(function() {
				r(this, t, u);
				d(this)
			})
		},
		destroy : function(t) {
			return this.each(function() {
				_30(this, t)
			})
		},
		resize : function(t) {
			return this.each(function() {
				resize(this, t)
			})
		},
		move : function(t) {
			return this.each(function() {
				_a(this, t)
			})
		},
		maximize : function() {
			return this.each(function() {
				_2a(this)
			})
		},
		minimize : function() {
			return this.each(function() {
				_46(this)
			})
		},
		restore : function() {
			return this.each(function() {
				_4a(this)
			})
		}
	};
	$.fn.omPanel = function(t) {
		if (t && typeof (t) == "string") {
			if (o[t]) {
				return o[t].apply(this, Array.prototype.slice
						.call(arguments, 1))
			}
			return null
		}
		return this.each(function() {
			var v = $.data(this, "panel");
			var u;
			if (v) {
				$.extend(v.options, t)
			} else {
				u = $.extend( {}, j, t);
				v = $.data(this, "panel", {
					options : u,
					panel : a(this),
					isLoaded : false,
					isLoading : false
				})
			}
			s(this);
			m(this);
			b(this)
		})
	}
})(jQuery);
(function(a) {
	a
			.extend(
					a.fn,
					{
						validate : function(b) {
							if (!this.length) {
								b
										&& b.debug
										&& window.console
										&& console
												.warn("nothing selected, can't validate, returning nothing");
								return
							}
							var c = a.data(this[0], "validator");
							if (c) {
								return c
							}
							c = new a.validator(b, this[0]);
							a.data(this[0], "validator", c);
							if (c.settings.onsubmit) {
								this.find("input, button").filter(".cancel")
										.click(function() {
											c.cancelSubmit = true
										});
								if (c.settings.submitHandler) {
									this.find("input, button")
											.filter(":submit").click(
													function() {
														c.submitButton = this
													})
								}
								this
										.submit(function(d) {
											if (c.settings.debug) {
												d.preventDefault()
											}
											function e() {
												if (c.settings.submitHandler) {
													if (c.submitButton) {
														var f = a(
																"<input type='hidden'/>")
																.attr(
																		"name",
																		c.submitButton.name)
																.val(
																		c.submitButton.value)
																.appendTo(
																		c.currentForm)
													}
													c.settings.submitHandler
															.call(
																	c,
																	c.currentForm);
													if (c.submitButton) {
														f.remove()
													}
													return false
												}
												return true
											}
											if (c.cancelSubmit) {
												c.cancelSubmit = false;
												return e()
											}
											if (c.form()) {
												if (c.pendingRequest) {
													c.formSubmitted = true;
													return false
												}
												return e()
											} else {
												c.focusInvalid();
												return false
											}
										})
							}
							return c
						},
						valid : function() {
							if (a(this[0]).is("form")) {
								return this.validate().form()
							} else {
								var c = true;
								var b = a(this[0].form).validate();
								this.each(function() {
									c &= b.element(this)
								});
								return c
							}
						},
						removeAttrs : function(d) {
							var b = {}, c = this;
							a.each(d.split(/\s/), function(e, f) {
								b[f] = c.attr(f);
								c.removeAttr(f)
							});
							return b
						},
						rules : function(e, b) {
							var g = this[0];
							if (e) {
								var d = a.data(g.form, "validator").settings;
								var i = d.rules;
								var j = a.validator.staticRules(g);
								switch (e) {
								case "add":
									a.extend(j, a.validator.normalizeRule(b));
									i[g.name] = j;
									if (b.messages) {
										d.messages[g.name] = a.extend(
												d.messages[g.name], b.messages)
									}
									break;
								case "remove":
									if (!b) {
										delete i[g.name];
										return j
									}
									var h = {};
									a.each(b.split(/\s/), function(k, l) {
										h[l] = j[l];
										delete j[l]
									});
									return h
								}
							}
							var f = a.validator.normalizeRules(a.extend( {},
									a.validator.metadataRules(g), a.validator
											.classRules(g), a.validator
											.attributeRules(g), a.validator
											.staticRules(g)), g);
							if (f.required) {
								var c = f.required;
								delete f.required;
								f = a.extend( {
									required : c
								}, f)
							}
							return f
						}
					});
	a.extend(a.expr[":"], {
		blank : function(b) {
			return !a.trim("" + b.value)
		},
		filled : function(b) {
			return !!a.trim("" + b.value)
		},
		unchecked : function(b) {
			return !b.checked
		}
	});
	a.validator = function(b, c) {
		this.settings = a.extend(true, {}, a.validator.defaults, b);
		this.currentForm = c;
		this.init()
	};
	a.validator.format = function(b, c) {
		if (arguments.length == 1) {
			return function() {
				var d = a.makeArray(arguments);
				d.unshift(b);
				return a.validator.format.apply(this, d)
			}
		}
		if (arguments.length > 2 && c.constructor != Array) {
			c = a.makeArray(arguments).slice(1)
		}
		if (c.constructor != Array) {
			c = [ c ]
		}
		a.each(c, function(d, e) {
			b = b.replace(new RegExp("\\{" + d + "\\}", "g"), e)
		});
		return b
	};
	a
			.extend(
					a.validator,
					{
						defaults : {
							messages : {},
							groups : {},
							rules : {},
							errorClass : "error",
							validClass : "valid",
							success : "valid",
							errorElement : "label",
							focusInvalid : true,
							focusCleanup : false,
							errorContainer : a( []),
							errorLabelContainer : a( []),
							onsubmit : true,
							ignore : [],
							ignoreTitle : false,
							onfocusin : function(b) {
								this.lastActive = b;
								if (this.settings.focusCleanup
										&& !this.blockFocusCleanup) {
									this.settings.unhighlight
											&& this.settings.unhighlight.call(
													this, b,
													this.settings.errorClass,
													this.settings.validClass);
									this.addWrapper(this.errorsFor(b)).hide()
								}
							},
							onfocusout : function(b) {
								if (!this.checkable(b)
										&& (b.name in this.submitted || !this
												.optional(b))) {
									this.element(b)
								}
							},
							onkeyup : function(b) {
								if (b.name in this.submitted
										|| b == this.lastElement) {
									this.element(b)
								}
							},
							onclick : function(b) {
								if (b.name in this.submitted) {
									this.element(b)
								} else {
									if (b.parentNode.name in this.submitted) {
										this.element(b.parentNode)
									}
								}
							},
							highlight : function(d, b, c) {
								if (d.type === "radio") {
									this.findByName(d.name).addClass(b)
											.removeClass(c)
								} else {
									a(d).addClass(b).removeClass(c)
								}
							},
							unhighlight : function(d, b, c) {
								if (d.type === "radio") {
									this.findByName(d.name).removeClass(b)
											.addClass(c)
								} else {
									a(d).removeClass(b).addClass(c)
								}
							}
						},
						setDefaults : function(b) {
							a.extend(a.validator.defaults, b)
						},
						messages : {
							required : "This field is required.",
							remote : "Please fix this field.",
							email : "Please enter a valid email address.",
							url : "Please enter a valid URL.",
							date : "Please enter a valid date.",
							number : "Please enter a valid number.",
							digits : "Please enter only digits.",
							equalTo : "Please enter the same value again.",
							accept : "Please enter a value with a valid extension.",
							maxlength : a.validator
									.format("Please enter no more than {0} characters."),
							minlength : a.validator
									.format("Please enter at least {0} characters."),
							rangelength : a.validator
									.format("Please enter a value between {0} and {1} characters long."),
							range : a.validator
									.format("Please enter a value between {0} and {1}."),
							max : a.validator
									.format("Please enter a value less than or equal to {0}."),
							min : a.validator
									.format("Please enter a value greater than or equal to {0}.")
						},
						autoCreateRanges : false,
						prototype : {
							init : function() {
								this.labelContainer = a(this.settings.errorLabelContainer);
								this.errorContext = this.labelContainer.length
										&& this.labelContainer
										|| a(this.currentForm);
								this.containers = a(
										this.settings.errorContainer).add(
										this.settings.errorLabelContainer);
								this.submitted = {};
								this.valueCache = {};
								this.pendingRequest = 0;
								this.pending = {};
								this.invalid = {};
								this.reset();
								var b = (this.groups = {});
								a.each(this.settings.groups, function(e, f) {
									a.each(f.split(/\s/), function(h, g) {
										b[g] = e
									})
								});
								var d = this.settings.rules;
								a.each(d, function(e, f) {
									d[e] = a.validator.normalizeRule(f)
								});
								function c(g) {
									var f = a.data(this[0].form, "validator"), e = "on"
											+ g.type.replace(/^validate/, "");
									f.settings[e]
											&& f.settings[e].call(f, this[0])
								}
								a(this.currentForm)
										.validateDelegate(
												":text, :password, :file, select, textarea",
												"focusin focusout keyup", c)
										.validateDelegate(
												":radio, :checkbox, select, option",
												"click", c);
								if (this.settings.invalidHandler) {
									a(this.currentForm).bind(
											"invalid-form.validate",
											this.settings.invalidHandler)
								}
							},
							form : function() {
								this.checkForm();
								a.extend(this.submitted, this.errorMap);
								this.invalid = a.extend( {}, this.errorMap);
								if (!this.valid()) {
									a(this.currentForm).triggerHandler(
											"invalid-form", [ this ])
								}
								this.showErrors();
								return this.valid()
							},
							checkForm : function() {
								this.prepareForm();
								for ( var b = 0, c = (this.currentElements = this
										.elements()); c[b]; b++) {
									this.check(c[b])
								}
								return this.valid()
							},
							element : function(c) {
								c = this.clean(c);
								this.lastElement = c;
								this.prepareElement(c);
								this.currentElements = a(c);
								var b = this.check(c);
								if (b) {
									delete this.invalid[c.name]
								} else {
									this.invalid[c.name] = true
								}
								if (!this.numberOfInvalids()) {
									this.toHide = this.toHide
											.add(this.containers)
								}
								this.showErrors();
								return b
							},
							showErrors : function(c) {
								if (c) {
									a.extend(this.errorMap, c);
									this.errorList = [];
									for ( var b in c) {
										this.errorList.push( {
											message : c[b],
											element : this.findByName(b)[0]
										})
									}
									this.successList = a.grep(this.successList,
											function(d) {
												return !(d.name in c)
											})
								}
								this.settings.showErrors ? this.settings.showErrors
										.call(this, this.errorMap,
												this.errorList)
										: this.defaultShowErrors()
							},
							resetForm : function() {
								if (a.fn.resetForm) {
									a(this.currentForm).resetForm()
								}
								this.submitted = {};
								this.prepareForm();
								this.hideErrors();
								this.elements().removeClass(
										this.settings.errorClass)
							},
							numberOfInvalids : function() {
								return this.objectLength(this.invalid)
							},
							objectLength : function(d) {
								var c = 0;
								for ( var b in d) {
									c++
								}
								return c
							},
							hideErrors : function() {
								this.addWrapper(this.toHide).hide()
							},
							valid : function() {
								return this.size() == 0
							},
							size : function() {
								return this.errorList.length
							},
							focusInvalid : function() {
								if (this.settings.focusInvalid) {
									try {
										a(
												this.findLastActive()
														|| this.errorList.length
														&& this.errorList[0].element
														|| []).filter(
												":visible").focus().trigger(
												"focusin")
									} catch (b) {
									}
								}
							},
							findLastActive : function() {
								var b = this.lastActive;
								return b && a.grep(this.errorList, function(c) {
									return c.element.name == b.name
								}).length == 1 && b
							},
							elements : function() {
								var c = this, b = {};
								return a(this.currentForm)
										.find("input, select, textarea")
										.not(
												":submit, :reset, :image, [disabled]")
										.not(this.settings.ignore)
										.filter(
												function() {
													!this.name
															&& c.settings.debug
															&& window.console
															&& console
																	.error(
																			"%o has no name assigned",
																			this);
													if (this.name in b
															|| !c
																	.objectLength(a(
																			this)
																			.rules())) {
														return false
													}
													b[this.name] = true;
													return true
												})
							},
							clean : function(b) {
								return a(b)[0]
							},
							errors : function() {
								return a(this.settings.errorElement + "."
										+ this.settings.errorClass,
										this.errorContext)
							},
							reset : function() {
								this.successList = [];
								this.errorList = [];
								this.errorMap = {};
								this.toShow = a( []);
								this.toHide = a( []);
								this.currentElements = a( [])
							},
							prepareForm : function() {
								this.reset();
								this.toHide = this.errors()
										.add(this.containers)
							},
							prepareElement : function(b) {
								this.reset();
								this.toHide = this.errorsFor(b)
							},
							check : function(c) {
								c = this.clean(c);
								if (this.checkable(c)) {
									c = this.findByName(c.name).not(
											this.settings.ignore)[0]
								}
								var h = a(c).rules();
								var d = false;
								for ( var i in h) {
									var g = {
										method : i,
										parameters : h[i]
									};
									try {
										var b = a.validator.methods[i].call(
												this, c.value
														.replace(/\r/g, ""), c,
												g.parameters);
										if (b == "dependency-mismatch") {
											d = true;
											continue
										}
										d = false;
										if (b == "pending") {
											this.toHide = this.toHide.not(this
													.errorsFor(c));
											return
										}
										if (!b) {
											this.formatAndAdd(c, g);
											return false
										}
									} catch (f) {
										this.settings.debug
												&& window.console
												&& console
														.log(
																"exception occured when checking element "
																		+ c.id
																		+ ", check the '"
																		+ g.method
																		+ "' method",
																f);
										throw f
									}
								}
								if (d) {
									return
								}
								if (this.objectLength(h)) {
									this.successList.push(c)
								}
								return true
							},
							customMetaMessage : function(b, d) {
								if (!a.metadata) {
									return
								}
								var c = this.settings.meta ? a(b).metadata()[this.settings.meta]
										: a(b).metadata();
								return c && c.messages && c.messages[d]
							},
							customMessage : function(c, d) {
								var b = this.settings.messages[c];
								return b
										&& (b.constructor == String ? b : b[d])
							},
							findDefined : function() {
								for ( var b = 0; b < arguments.length; b++) {
									if (arguments[b] !== undefined) {
										return arguments[b]
									}
								}
								return undefined
							},
							defaultMessage : function(b, c) {
								return this.findDefined(this.customMessage(
										b.name, c), this
										.customMetaMessage(b, c),
										!this.settings.ignoreTitle && b.title
												|| undefined,
										a.validator.messages[c],
										"<strong>Warning: No message defined for "
												+ b.name + "</strong>")
							},
							formatAndAdd : function(c, e) {
								var d = this.defaultMessage(c, e.method), b = /\$?\{(\d+)\}/g;
								if (typeof d == "function") {
									d = d.call(this, e.parameters, c)
								} else {
									if (b.test(d)) {
										d = jQuery.format(d.replace(b, "{$1}"),
												e.parameters)
									}
								}
								this.errorList.push( {
									message : d,
									element : c
								});
								this.errorMap[c.name] = d;
								this.submitted[c.name] = d
							},
							addWrapper : function(b) {
								if (this.settings.wrapper) {
									b = b.add(b.parent(this.settings.wrapper))
								}
								return b
							},
							defaultShowErrors : function() {
								for ( var c = 0; this.errorList[c]; c++) {
									var b = this.errorList[c];
									this.settings.highlight
											&& this.settings.highlight.call(
													this, b.element,
													this.settings.errorClass,
													this.settings.validClass);
									this.showLabel(b.element, b.message)
								}
								if (this.errorList.length) {
									this.toShow = this.toShow
											.add(this.containers)
								}
								if (this.settings.success) {
									for ( var c = 0; this.successList[c]; c++) {
										this.showLabel(this.successList[c])
									}
								}
								if (this.settings.unhighlight) {
									for ( var c = 0, d = this.validElements(); d[c]; c++) {
										this.settings.unhighlight.call(this,
												d[c], this.settings.errorClass,
												this.settings.validClass)
									}
								}
								this.toHide = this.toHide.not(this.toShow);
								this.hideErrors();
								this.addWrapper(this.toShow).show()
							},
							validElements : function() {
								return this.currentElements.not(this
										.invalidElements())
							},
							invalidElements : function() {
								return a(this.errorList).map(function() {
									return this.element
								})
							},
							showLabel : function(c, d) {
								var b = this.errorsFor(c);
								if (b.length) {
									b.removeClass().addClass(
											this.settings.errorClass);
									b.attr("generated") && b.html(d)
								} else {
									b = a(
											"<" + this.settings.errorElement
													+ "/>").attr( {
										"for" : this.idOrName(c),
										generated : true
									}).addClass(this.settings.errorClass).html(
											d || "");
									if (this.settings.wrapper) {
										b = b.hide().show().wrap(
												"<" + this.settings.wrapper
														+ "/>").parent()
									}
									if (!this.labelContainer.append(b).length) {
										this.settings.errorPlacement ? this.settings
												.errorPlacement(b, a(c))
												: b.insertAfter(c)
									}
								}
								if (!d && this.settings.success) {
									b.text("");
									typeof this.settings.success == "string" ? b
											.addClass(this.settings.success)
											: this.settings.success(b)
								}
								this.toShow = this.toShow.add(b)
							},
							errorsFor : function(c) {
								var b = this.idOrName(c);
								return this.errors().filter(function() {
									return a(this).attr("for") == b
								})
							},
							idOrName : function(b) {
								return this.groups[b.name]
										|| (this.checkable(b) ? b.name : b.id
												|| b.name)
							},
							checkable : function(b) {
								return /radio|checkbox/i.test(b.type)
							},
							findByName : function(b) {
								var c = this.currentForm;
								return a(document.getElementsByName(b)).map(
										function(d, e) {
											return e.form == c && e.name == b
													&& e || null
										})
							},
							getLength : function(c, b) {
								switch (b.nodeName.toLowerCase()) {
								case "select":
									return a("option:selected", b).length;
								case "input":
									if (this.checkable(b)) {
										return this.findByName(b.name).filter(
												":checked").length
									}
								}
								return c.length
							},
							depend : function(c, b) {
								return this.dependTypes[typeof c] ? this.dependTypes[typeof c]
										(c, b)
										: true
							},
							dependTypes : {
								"boolean" : function(c, b) {
									return c
								},
								string : function(c, b) {
									return !!a(c, b.form).length
								},
								"function" : function(c, b) {
									return c(b)
								}
							},
							optional : function(b) {
								return !a.validator.methods.required.call(this,
										a.trim(b.value), b)
										&& "dependency-mismatch"
							},
							startRequest : function(b) {
								if (!this.pending[b.name]) {
									this.pendingRequest++;
									this.pending[b.name] = true
								}
							},
							stopRequest : function(b, c) {
								this.pendingRequest--;
								if (this.pendingRequest < 0) {
									this.pendingRequest = 0
								}
								delete this.pending[b.name];
								if (c && this.pendingRequest == 0
										&& this.formSubmitted && this.form()) {
									a(this.currentForm).submit();
									this.formSubmitted = false
								} else {
									if (!c && this.pendingRequest == 0
											&& this.formSubmitted) {
										a(this.currentForm).triggerHandler(
												"invalid-form", [ this ]);
										this.formSubmitted = false
									}
								}
							},
							previousValue : function(b) {
								return a.data(b, "previousValue")
										|| a.data(b, "previousValue", {
											old : null,
											valid : true,
											message : this.defaultMessage(b,
													"remote")
										})
							}
						},
						classRuleSettings : {
							required : {
								required : true
							},
							email : {
								email : true
							},
							url : {
								url : true
							},
							date : {
								date : true
							},
							dateISO : {
								dateISO : true
							},
							dateDE : {
								dateDE : true
							},
							number : {
								number : true
							},
							numberDE : {
								numberDE : true
							},
							digits : {
								digits : true
							},
							creditcard : {
								creditcard : true
							}
						},
						addClassRules : function(b, c) {
							b.constructor == String ? this.classRuleSettings[b] = c
									: a.extend(this.classRuleSettings, b)
						},
						classRules : function(c) {
							var d = {};
							var b = a(c).attr("class");
							b
									&& a
											.each(
													b.split(" "),
													function() {
														if (this in a.validator.classRuleSettings) {
															a
																	.extend(
																			d,
																			a.validator.classRuleSettings[this])
														}
													});
							return d
						},
						attributeRules : function(c) {
							var e = {};
							var b = a(c);
							for ( var f in a.validator.methods) {
								var d = b.attr(f);
								if (d) {
									e[f] = d
								}
							}
							if (e.maxlength
									&& /-1|2147483647|524288/.test(e.maxlength)) {
								delete e.maxlength
							}
							return e
						},
						metadataRules : function(b) {
							if (!a.metadata) {
								return {}
							}
							var c = a.data(b.form, "validator").settings.meta;
							return c ? a(b).metadata()[c] : a(b).metadata()
						},
						staticRules : function(c) {
							var d = {};
							var b = a.data(c.form, "validator");
							if (b.settings.rules) {
								d = a.validator
										.normalizeRule(b.settings.rules[c.name])
										|| {}
							}
							return d
						},
						normalizeRules : function(c, b) {
							a.each(c, function(f, e) {
								if (e === false) {
									delete c[f];
									return
								}
								if (e.param || e.depends) {
									var d = true;
									switch (typeof e.depends) {
									case "string":
										d = !!a(e.depends, b.form).length;
										break;
									case "function":
										d = e.depends.call(b, b);
										break
									}
									if (d) {
										c[f] = e.param !== undefined ? e.param
												: true
									} else {
										delete c[f]
									}
								}
							});
							a.each(c, function(d, e) {
								c[d] = a.isFunction(e) ? e(b) : e
							});
							a.each( [ "minlength", "maxlength", "min", "max" ],
									function() {
										if (c[this]) {
											c[this] = Number(c[this])
										}
									});
							a.each( [ "rangelength", "range" ], function() {
								if (c[this]) {
									c[this] = [ Number(c[this][0]),
											Number(c[this][1]) ]
								}
							});
							if (a.validator.autoCreateRanges) {
								if (c.min && c.max) {
									c.range = [ c.min, c.max ];
									delete c.min;
									delete c.max
								}
								if (c.minlength && c.maxlength) {
									c.rangelength = [ c.minlength, c.maxlength ];
									delete c.minlength;
									delete c.maxlength
								}
							}
							if (c.messages) {
								delete c.messages
							}
							return c
						},
						normalizeRule : function(c) {
							if (typeof c == "string") {
								var b = {};
								a.each(c.split(/\s/), function() {
									b[this] = true
								});
								c = b
							}
							return c
						},
						addMethod : function(b, d, c) {
							a.validator.methods[b] = d;
							a.validator.messages[b] = c != undefined ? c
									: a.validator.messages[b];
							if (d.length < 3) {
								a.validator.addClassRules(b, a.validator
										.normalizeRule(b))
							}
						},
						methods : {
							required : function(c, b, e) {
								if (!this.depend(e, b)) {
									return "dependency-mismatch"
								}
								switch (b.nodeName.toLowerCase()) {
								case "select":
									var d = a(b).val();
									return d && d.length > 0;
								case "input":
									if (this.checkable(b)) {
										return this.getLength(c, b) > 0
									}
								default:
									return a.trim(c).length > 0
								}
							},
							remote : function(f, c, g) {
								if (this.optional(c)) {
									return "dependency-mismatch"
								}
								var d = this.previousValue(c);
								if (!this.settings.messages[c.name]) {
									this.settings.messages[c.name] = {}
								}
								d.originalMessage = this.settings.messages[c.name].remote;
								this.settings.messages[c.name].remote = d.message;
								g = typeof g == "string" && {
									url : g
								} || g;
								if (this.pending[c.name]) {
									return "pending"
								}
								if (d.old === f) {
									return d.valid
								}
								d.old = f;
								var b = this;
								this.startRequest(c);
								var e = {};
								e[c.name] = f;
								a
										.ajax(a
												.extend(
														true,
														{
															url : g,
															mode : "abort",
															port : "validate"
																	+ c.name,
															dataType : "json",
															data : e,
															success : function(
																	i) {
																b.settings.messages[c.name].remote = d.originalMessage;
																var k = i === true;
																if (k) {
																	var h = b.formSubmitted;
																	b
																			.prepareElement(c);
																	b.formSubmitted = h;
																	b.successList
																			.push(c);
																	b
																			.showErrors()
																} else {
																	var l = {};
																	var j = i
																			|| b
																					.defaultMessage(
																							c,
																							"remote");
																	l[c.name] = d.message = a
																			.isFunction(j) ? j(f)
																			: j;
																	b
																			.showErrors(l)
																}
																d.valid = k;
																b.stopRequest(
																		c, k)
															}
														}, g));
								return "pending"
							},
							minlength : function(c, b, d) {
								return this.optional(b)
										|| this.getLength(a.trim(c), b) >= d
							},
							maxlength : function(c, b, d) {
								return this.optional(b)
										|| this.getLength(a.trim(c), b) <= d
							},
							rangelength : function(d, b, e) {
								var c = this.getLength(a.trim(d), b);
								return this.optional(b)
										|| (c >= e[0] && c <= e[1])
							},
							min : function(c, b, d) {
								return this.optional(b) || c >= d
							},
							max : function(c, b, d) {
								return this.optional(b) || c <= d
							},
							range : function(c, b, d) {
								return this.optional(b)
										|| (c >= d[0] && c <= d[1])
							},
							email : function(c, b) {
								return this.optional(b)
										|| /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i
												.test(c)
							},
							url : function(c, b) {
								return this.optional(b)
										|| /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
												.test(c)
							},
							date : function(c, b) {
								return this.optional(b)
										|| !/Invalid|NaN/.test(new Date(c))
							},
							number : function(c, b) {
								return this.optional(b)
										|| /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/
												.test(c)
							},
							digits : function(c, b) {
								return this.optional(b) || /^\d+$/.test(c)
							},
							accept : function(c, b, d) {
								d = typeof d == "string" ? d.replace(/,/g, "|")
										: "png|jpe?g|gif";
								return this.optional(b)
										|| c.match(new RegExp(".(" + d + ")$",
												"i"))
							},
							equalTo : function(c, b, e) {
								var d = a(e).unbind(".validate-equalTo").bind(
										"blur.validate-equalTo", function() {
											a(b).valid()
										});
								return c == d.val()
							}
						}
					});
	a.format = a.validator.format
})(jQuery);
(function(c) {
	var a = {};
	if (c.ajaxPrefilter) {
		c.ajaxPrefilter(function(f, e, g) {
			var d = f.port;
			if (f.mode == "abort") {
				if (a[d]) {
					a[d].abort()
				}
				a[d] = g
			}
		})
	} else {
		var b = c.ajax;
		c.ajax = function(e) {
			var f = ("mode" in e ? e : c.ajaxSettings).mode, d = ("port" in e ? e
					: c.ajaxSettings).port;
			if (f == "abort") {
				if (a[d]) {
					a[d].abort()
				}
				return (a[d] = b.apply(this, arguments))
			}
			return b.apply(this, arguments)
		}
	}
})(jQuery);
(function(a) {
	if (!jQuery.event.special.focusin && !jQuery.event.special.focusout
			&& document.addEventListener) {
		a.each( {
			focus : "focusin",
			blur : "focusout"
		}, function(c, b) {
			a.event.special[b] = {
				setup : function() {
					this.addEventListener(c, d, true)
				},
				teardown : function() {
					this.removeEventListener(c, d, true)
				},
				handler : function(f) {
					arguments[0] = a.event.fix(f);
					arguments[0].type = b;
					return a.event.handle.apply(this, arguments)
				}
			};
			function d(f) {
				f = a.event.fix(f);
				f.type = b;
				return a.event.handle.call(this, f)
			}
		})
	}
	a.extend(a.fn, {
		validateDelegate : function(d, c, b) {
			return this.bind(c, function(e) {
				var f = a(e.target);
				if (f.is(d)) {
					return b.apply(f, arguments)
				}
			})
		}
	})
})(jQuery);
(function(b, c) {
	var a = "om-accordion-panel-"
			+ (((1 + Math.random()) * 65536) | 0).toString(16).substring(1)
			+ "-", d = 0;
	b
			.widget(
					"om.omAccordion",
					{
						options : {
							active : 0,
							autoPlay : false,
							collapsible : false,
							disabled : false,
							height : "auto",
							iconCls : null,
							interval : 1000,
							switchEffect : false,
							switchMode : "click",
							width : "auto",
							onActivate : function(e) {
							},
							onBeforeActivate : function(e) {
							},
							onBeforeCollapse : function(e) {
							},
							onCollapse : function(e) {
							}
						},
						activate : function(f) {
							var e = this.options;
							clearInterval(e.autoInterId);
							f = this._correctIndex(f);
							f = f == -1 ? 0 : f;
							this._activate(f);
							this._setAutoInterId(this);
							return this
						},
						disable : function() {
							var g = b.data(this.element, "panels");
							var e = g.length;
							while (e--) {
								b(g[e]).omPanel("disable")
							}
							var f = this.options;
							if (f.autoPlay) {
								clearInterval(f.autoInterId)
							}
							f.disabled = true
						},
						enable : function() {
							var f = b.data(this.element, "panels");
							var e = f.length;
							while (e--) {
								b(f[e]).omPanel("enable")
							}
							this._buildEvent();
							this.options.disabled = false
						},
						getActivated : function() {
							var e = b.data(this.element, "panels"), f = this.options.active;
							return f === -1 || !this.element.data("hasCreated") ? null
									: b(e[f]).omPanel("body").prop("id")
						},
						getLength : function() {
							return b.data(this.element, "panels").length
						},
						reload : function(f) {
							var e = b.data(this.element, "panels");
							if (this.options.disabled !== false
									|| e.length === 0) {
								return this
							}
							f = this._correctIndex(f);
							b(e[f]).omPanel("reload")
						},
						resize : function() {
							if (this.options.disabled !== false) {
								return this
							}
							var k = this.element, f = b.data(this.element,
									"panels"), e = f.length, h;
							this._initWidthOrHeight("width");
							this._initWidthOrHeight("height");
							if (this.options.height !== "auto") {
								h = k.innerHeight();
								var g;
								for (g = 0; g < e; g++) {
									h -= b(f[g]).omPanel("panel").outerHeight(
											true)
								}
								var l = this.getActivated();
								if (l) {
									h += k.find("#" + l).omPanel("body")
											.outerHeight()
								}
								for (g = 0; g < e; g++) {
									var j = b(f[g]).omPanel("body");
									j
											.height(h
													- (j.outerHeight() - j
															.height()))
								}
							} else {
								for (g = 0; g < e; g++) {
									var j = b(f[g]).omPanel("body");
									j.css("height", "")
								}
							}
							return this
						},
						setTitle : function(f, g) {
							var e = b.data(this.element, "panels");
							if (this.options.disabled !== false
									|| e.length === 0) {
								return this
							}
							f = this._correctIndex(f);
							b(e[f]).omPanel("header").find(
									">div.om-panel-title").html(g);
							return this
						},
						url : function(h, g) {
							var f = b.data(this.element, "panels"), e = f.length;
							if (!g || this.options.disabled !== false
									|| f.length === 0) {
								return
							}
							h = this._correctIndex(h);
							b(f[h]).omPanel("options", {
								url : g
							})
						},
						_create : function() {
							var j = this.element, i = this.options, h = [], e, g = i.active, f;
							j.addClass("om-widget om-accordion");
							this._renderPanels();
							this.resize();
							g = this._correctIndex(g);
							if (g != -1 || !(i.collapsible !== false)) {
								g = g == -1 ? 0 : g;
								this._activate(g)
							}
							i.disabled !== false ? this.disable() : this
									._buildEvent();
							j.data("hasCreated", true)
						},
						_correctIndex : function(i) {
							var k = this.element, h = this.options, g = b.data(
									this.element, "panels"), f = k.children()
									.find(">div#" + i), e = g.length, l = i;
							i = f.length ? b(g).index(f) : i;
							i = i == -1 ? l : i;
							var j = parseInt(i);
							j = (isNaN(j) && "0" || j) - 0;
							return e == 0 || j == -1 && !k.data("hasCreated") ? -1
									: (j < 0 ? 0 : (j >= e ? e - 1 : j))
						},
						_renderPanels : function() {
							var h = this.element, e = this, g = [], f = this.options;
							var i = h.find("ul:first");
							i
									.find("a")
									.each(
											function(m) {
												var k = this.getAttribute(
														"href", 2);
												var t = k.split("#")[0], u;
												if (t
														&& (t === location
																.toString()
																.split("#")[0] || (u = b("base")[0])
																&& t === u.href)) {
													k = this.hash;
													this.href = k
												}
												var o = b(this);
												var q = {
													title : o.text(),
													tools : [ "collapse" ],
													iconCls : o.attr("iconCls"),
													clickExpand : true,
													onExpand : function() {
														f.onActivate(m)
													},
													collapsed : true,
													onCollapse : function() {
														if (h
																.data("hasCreated")) {
															f.onCollapse(m)
														}
													},
													border : true
												};
												var r = b(">" + k, h);
												var s = r.prop("id");
												if (!!(r[0])) {
													if (!s) {
														r.prop("id", a + (d++))
													}
													q.content = r.html();
													g.push(e._createPanel(r[0],
															q))
												} else {
													q.url = o.attr("href");
													var j = e
															._createPanel(
																	b("<div></div>")[0],
																	q);
													g.push(j);
													var l = o.prop("id");
													b(j).prop("id",
															l ? l : a + (d++))
												}
												b(g[m]).omPanel("panel")
														.appendTo(h);
												if (m === 0) {
													var p = b(g[0]).omPanel(
															"header");
													p
															.css(
																	"border-top-width",
																	p
																			.css("border-bottom-width"))
												}
											});
							b.data(h, "panels", g);
							i.remove()
						},
						_initWidthOrHeight : function(f) {
							var i = this.element, e = this.options, g = this.element
									.attr("style"), h = e[f];
							if (g && g.indexOf(f) != -1
									&& !i.data("hasCreated")) {
								e[f] = i.css(f)
							} else {
								if (h === "fit") {
									e[f] = "100%";
									i.css(f, "100%")
								} else {
									i.css(f, h === "auto" ? "" : h)
								}
							}
						},
						_createPanel : function(f, e) {
							b(f).omPanel(e);
							return f
						},
						_buildEvent : function() {
							var f = this.options, e = this;
							this.element
									.children()
									.find(">div.om-panel-header")
									.each(
											function(h) {
												var g = b(this);
												g.unbind();
												g.find("div.om-panel-tool")
														.children().unbind();
												g.hover(function() {
													b(this).addClass(
															"om-state-hover")
												}, function() {
													b(this).removeClass(
															"om-state-hover")
												});
												if (f.switchMode == "mouseover") {
													g
															.bind(
																	"mouseenter.omaccordions",
																	function(i) {
																		clearInterval(f.autoInterId);
																		var j = b
																				.data(
																						e.element,
																						"expandTimer");
																		(typeof j !== "undefined")
																				&& clearTimeout(j);
																		j = setTimeout(
																				function() {
																					e
																							._activate(
																									h,
																									true);
																					e
																							._setAutoInterId(e)
																				},
																				200);
																		b
																				.data(
																						e.element,
																						"expandTimer",
																						j)
																	})
												} else {
													if (f.switchMode == "click") {
														g
																.bind(
																		"click.omaccordions",
																		function(
																				i) {
																			clearInterval(f.autoInterId);
																			e
																					._activate(
																							h,
																							true);
																			e
																					._setAutoInterId(e)
																		})
													}
												}
											});
							if (f.autoPlay) {
								clearInterval(f.autoInterId);
								e._setAutoInterId(e)
							}
						},
						_setAutoInterId : function(e) {
							var f = e.options;
							if (f.autoPlay) {
								f.autoInterId = setInterval(function() {
									e._activate("next")
								}, f.interval)
							}
						},
						_setOption : function(h, k) {
							b.Widget.prototype._setOption
									.apply(this, arguments);
							var g = this.options;
							switch (h) {
							case "active":
								var l = this.getActivated();
								if (k == "-1" && g.collapsible !== false
										&& g.disabled === false) {
									var e = l, j, i;
									l = this._correctIndex(l);
									if (e
											&& g.onBeforeCollapse.call(this, l) !== false) {
										if (g.switchEffect) {
											j = true;
											i = "fast"
										}
										var f = b.data(this.element, "panels");
										b(f[l]).omPanel("collapse", j, i);
										g.active = -1
									}
									break
								}
								this.activate(this._correctIndex(k));
								break;
							case "disabled":
								k === false ? this.enable() : this.disable();
								break;
							case "width":
								if (k == "fit") {
									g.width = "100%"
								}
								break;
							case "height":
								if (k == "fit") {
									g.height = "100%"
								}
								break
							}
						},
						_activate : function(l, o) {
							var p = b.data(this.element, "panels"), m = p.length, s = this.options, r = this, j = false, k = -1, g, e;
							if (s.disabled !== false
									&& this.element.data("hasCreated")
									|| m === 0) {
								return
							}
							l = l === "next" ? (s.active + 1) % m : r
									._correctIndex(l);
							if (s.switchEffect) {
								g = true;
								e = "fast"
							}
							for ( var h = 0; h < m; h++) {
								b(p[h]).stop(true, true)
							}
							var f = r.getActivated();
							j = !!f;
							if (j) {
								k = r._correctIndex(f);
								if (k == l) {
									if (o === true
											&& s.collapsible !== false
											&& s.onBeforeCollapse.call(r, k) !== false) {
										b(p[k]).omPanel("collapse", g, e);
										s.active = -1
									}
								} else {
									var q;
									if (s.onBeforeCollapse.call(r, k) !== false
											&& ((q = s.onBeforeActivate.call(r,
													l) !== false) || s.collapsible !== false)) {
										b(p[k]).omPanel("collapse", g, e);
										if (q) {
											b(p[l]).omPanel("expand", g, e)
										}
										s.active = q ? l : -1
									}
								}
							} else {
								if (s.onBeforeActivate.call(r, l) !== false) {
									b(p[l]).omPanel("expand", g, e);
									s.active = l
								}
							}
							return this
						}
					})
})(jQuery);
(function(b) {
	b.fn.omAjaxSubmit = function(d) {
		if (!this.length) {
			a("omAjaxSubmit: skipping submit process - no element selected");
			return this
		}
		var c, p, f, g = this;
		if (typeof d == "function") {
			d = {
				success : d
			}
		}
		c = this.attr("method");
		p = this.attr("action");
		f = (typeof p === "string") ? b.trim(p) : "";
		f = f || window.location.href || "";
		if (f) {
			f = (f.match(/^([^#]+)/) || [])[1]
		}
		d = b
				.extend(true,
						{
							url : f,
							success : b.ajaxSettings.success,
							method : c || "GET",
							iframeSrc : /^https/i.test(window.location.href
									|| "") ? "javascript:false" : "about:blank"
						}, d);
		var j = {};
		this.trigger("form-pre-serialize", [ this, d, j ]);
		if (j.veto) {
			a("omAjaxSubmit: submit vetoed via form-pre-serialize trigger");
			return this
		}
		if (d.beforeSerialize && d.beforeSerialize(this, d) === false) {
			a("omAjaxSubmit: submit aborted via beforeSerialize callback");
			return this
		}
		var o, i, w = this.formToArray(d.semantic);
		if (d.data) {
			d.extraData = d.data;
			for (o in d.data) {
				if (d.data[o] instanceof Array) {
					for ( var r in d.data[o]) {
						w.push( {
							name : o,
							value : d.data[o][r]
						})
					}
				} else {
					i = d.data[o];
					i = b.isFunction(i) ? i() : i;
					w.push( {
						name : o,
						value : i
					})
				}
			}
		}
		if (d.beforeSubmit && d.beforeSubmit(w, this, d) === false) {
			a("omAjaxSubmit: submit aborted via beforeSubmit callback");
			return this
		}
		this.trigger("form-submit-validate", [ w, this, d, j ]);
		if (j.veto) {
			a("omAjaxSubmit: submit vetoed via form-submit-validate trigger");
			return this
		}
		var m = b.param(w);
		if (d.method.toUpperCase() == "GET") {
			d.url += (d.url.indexOf("?") >= 0 ? "&" : "?") + m;
			d.data = null
		} else {
			d.data = m
		}
		var x = [];
		if (d.resetForm) {
			x.push(function() {
				g.resetForm()
			})
		}
		if (d.clearForm) {
			x.push(function() {
				g.clearForm()
			})
		}
		if (!d.dataType && d.target) {
			var e = d.success || function() {
			};
			x.push(function(q) {
				var k = d.replaceTarget ? "replaceWith" : "html";
				b(d.target)[k](q).each(e, arguments)
			})
		} else {
			if (d.success) {
				x.push(d.success)
			}
		}
		d.success = function(z, q, A) {
			var y = d.context || d;
			for ( var v = 0, k = x.length; v < k; v++) {
				x[v].apply(y, [ z, q, A || g, g ])
			}
		};
		var t = b("input:file", this).length > 0;
		var s = "multipart/form-data";
		var l = (g.attr("enctype") == s || g.attr("encoding") == s);
		if (d.iframe !== false && (t || d.iframe || l)) {
			if (d.closeKeepAlive) {
				b.get(d.closeKeepAlive, function() {
					h(w)
				})
			} else {
				h(w)
			}
		} else {
			if (b.browser.msie && c == "get") {
				var u = g[0].getAttribute("method");
				if (typeof u === "string") {
					d.method = u
				}
			}
			d.type = d.method;
			b.ajax(d)
		}
		this.trigger("form-submit-notify", [ this, d ]);
		return this;
		function h(T) {
			var y = g[0], v, P, J, R, M, A, E, C, D, N, Q, H;
			var B = !!b.fn.prop;
			if (T) {
				for (P = 0; P < T.length; P++) {
					v = b(y[T[P].name]);
					v[B ? "prop" : "attr"]("disabled", false)
				}
			}
			if (b(":input[name=submit],:input[id=submit]", y).length) {
				alert('Error: Form elements must not have name or id of "submit".');
				return
			}
			J = b.extend(true, {}, b.ajaxSettings, d);
			J.context = J.context || J;
			M = "jqFormIO" + (new Date().getTime());
			if (J.iframeTarget) {
				A = b(J.iframeTarget);
				N = A.attr("name");
				if (N == null) {
					A.attr("name", M)
				} else {
					M = N
				}
			} else {
				A = b('<iframe name="' + M + '" src="' + J.iframeSrc + '" />');
				A.css( {
					position : "absolute",
					top : "-1000px",
					left : "-1000px"
				})
			}
			E = A[0];
			C = {
				aborted : 0,
				responseText : null,
				responseXML : null,
				status : 0,
				statusText : "n/a",
				getAllResponseHeaders : function() {
				},
				getResponseHeader : function() {
				},
				setRequestHeader : function() {
				},
				abort : function(W) {
					var X = (W === "timeout" ? "timeout" : "aborted");
					a("aborting upload... " + X);
					this.aborted = 1;
					A.attr("src", J.iframeSrc);
					C.error = X;
					J.error && J.error.call(J.context, C, X, W);
					R && b.event.trigger("ajaxError", [ C, J, X ]);
					J.complete && J.complete.call(J.context, C, X)
				}
			};
			R = J.global;
			if (R && !b.active++) {
				b.event.trigger("ajaxStart")
			}
			if (R) {
				b.event.trigger("ajaxSend", [ C, J ])
			}
			if (J.beforeSend && J.beforeSend.call(J.context, C, J) === false) {
				if (J.global) {
					b.active--
				}
				return
			}
			if (C.aborted) {
				return
			}
			D = y.clk;
			if (D) {
				N = D.name;
				if (N && !D.disabled) {
					J.extraData = J.extraData || {};
					J.extraData[N] = D.value;
					if (D.type == "image") {
						J.extraData[N + ".x"] = y.clk_x;
						J.extraData[N + ".y"] = y.clk_y
					}
				}
			}
			var I = 1;
			var F = 2;
			function G(X) {
				var W = X.contentWindow ? X.contentWindow.document
						: X.contentDocument ? X.contentDocument : X.document;
				return W
			}
			function O() {
				var Y = g.attr("target"), W = g.attr("action");
				y.setAttribute("target", M);
				if (!c) {
					y.setAttribute("method", "POST")
				}
				if (W != J.url) {
					y.setAttribute("action", J.url)
				}
				if (!J.skipEncodingOverride && (!c || /post/i.test(c))) {
					g.attr( {
						encoding : "multipart/form-data",
						enctype : "multipart/form-data"
					})
				}
				if (J.timeout) {
					H = setTimeout(function() {
						Q = true;
						L(I)
					}, J.timeout)
				}
				function Z() {
					try {
						var ab = G(E).readyState;
						a("state = " + ab);
						if (ab.toLowerCase() == "uninitialized") {
							setTimeout(Z, 50)
						}
					} catch (ac) {
						a("Server abort: ", ac, " (", ac.name, ")");
						L(F);
						H && clearTimeout(H);
						H = undefined
					}
				}
				var X = [];
				try {
					if (J.extraData) {
						for ( var aa in J.extraData) {
							X
									.push(b(
											'<input type="hidden" name="' + aa + '" />')
											.attr("value", J.extraData[aa])
											.appendTo(y)[0])
						}
					}
					if (!J.iframeTarget) {
						A.appendTo("body");
						E.attachEvent ? E.attachEvent("onload", L) : E
								.addEventListener("load", L, false)
					}
					setTimeout(Z, 15);
					y.submit()
				} finally {
					y.setAttribute("action", W);
					if (Y) {
						y.setAttribute("target", Y)
					} else {
						g.removeAttr("target")
					}
					b(X).remove()
				}
			}
			if (J.forceSync) {
				O()
			} else {
				setTimeout(O, 10)
			}
			var U, V, S = 50, z;
			function L(ab) {
				if (C.aborted || z) {
					return
				}
				try {
					V = G(E)
				} catch (ae) {
					a("cannot access response document: ", ae);
					ab = F
				}
				if (ab === I && C) {
					C.abort("timeout");
					return
				} else {
					if (ab == F && C) {
						C.abort("server abort");
						return
					}
				}
				if (!V || V.location.href == J.iframeSrc) {
					if (!Q) {
						return
					}
				}
				E.detachEvent ? E.detachEvent("onload", L) : E
						.removeEventListener("load", L, false);
				var Z = "success", ad;
				try {
					if (Q) {
						throw "timeout"
					}
					var Y = J.dataType == "xml" || V.XMLDocument
							|| b.isXMLDoc(V);
					a("isXml=" + Y);
					if (!Y && window.opera
							&& (V.body == null || V.body.innerHTML == "")) {
						if (--S) {
							a("requeing onLoad callback, DOM not available");
							setTimeout(L, 250);
							return
						}
					}
					var af = V.body ? V.body : V.documentElement;
					C.responseText = af ? af.innerHTML : null;
					C.responseXML = V.XMLDocument ? V.XMLDocument : V;
					if (Y) {
						J.dataType = "xml"
					}
					C.getResponseHeader = function(ai) {
						var ah = {
							"content-type" : J.dataType
						};
						return ah[ai]
					};
					if (af) {
						C.status = Number(af.getAttribute("status"))
								|| C.status;
						C.statusText = af.getAttribute("statusText")
								|| C.statusText
					}
					var W = J.dataType || "";
					var ac = /(json|script|text)/.test(W.toLowerCase());
					if (ac || J.textarea) {
						var aa = V.getElementsByTagName("textarea")[0];
						if (aa) {
							C.responseText = aa.value;
							C.status = Number(aa.getAttribute("status"))
									|| C.status;
							C.statusText = aa.getAttribute("statusText")
									|| C.statusText
						} else {
							if (ac) {
								var X = V.getElementsByTagName("pre")[0];
								var ag = V.getElementsByTagName("body")[0];
								if (X) {
									C.responseText = X.textContent ? X.textContent
											: X.innerHTML
								} else {
									if (ag) {
										C.responseText = ag.innerHTML
									}
								}
							}
						}
					} else {
						if (J.dataType == "xml" && !C.responseXML
								&& C.responseText != null) {
							C.responseXML = K(C.responseText)
						}
					}
					try {
						U = k(C, J.dataType, J)
					} catch (ab) {
						Z = "parsererror";
						C.error = ad = (ab || Z)
					}
				} catch (ab) {
					a("error caught: ", ab);
					Z = "error";
					C.error = ad = (ab || Z)
				}
				if (C.aborted) {
					a("upload aborted");
					Z = null
				}
				if (C.status) {
					Z = (C.status >= 200 && C.status < 300 || C.status === 304) ? "success"
							: "error"
				}
				if (Z === "success") {
					J.success && J.success.call(J.context, U, "success", C);
					R && b.event.trigger("ajaxSuccess", [ C, J ])
				} else {
					if (Z) {
						if (ad == undefined) {
							ad = C.statusText
						}
						J.error && J.error.call(J.context, C, Z, ad);
						R && b.event.trigger("ajaxError", [ C, J, ad ])
					}
				}
				R && b.event.trigger("ajaxComplete", [ C, J ]);
				if (R && !--b.active) {
					b.event.trigger("ajaxStop")
				}
				J.complete && J.complete.call(J.context, C, Z);
				z = true;
				if (J.timeout) {
					clearTimeout(H)
				}
				setTimeout(function() {
					if (!J.iframeTarget) {
						A.remove()
					}
					C.responseXML = null
				}, 100)
			}
			var K = b.parseXML
					|| function(W, X) {
						if (window.ActiveXObject) {
							X = new ActiveXObject("Microsoft.XMLDOM");
							X.async = "false";
							X.loadXML(W)
						} else {
							X = (new DOMParser())
									.parseFromString(W, "text/xml")
						}
						return (X && X.documentElement && X.documentElement.nodeName != "parsererror") ? X
								: null
					};
			var q = b.parseJSON || function(W) {
				return window["eval"]("(" + W + ")")
			};
			var k = function(ab, Z, Y) {
				var X = ab.getResponseHeader("content-type") || "", W = Z === "xml"
						|| !Z && X.indexOf("xml") >= 0, aa = W ? ab.responseXML
						: ab.responseText;
				if (W && aa.documentElement.nodeName === "parsererror") {
					b.error && b.error("parsererror")
				}
				if (Y && Y.dataFilter) {
					aa = Y.dataFilter(aa, Z)
				}
				if (typeof aa === "string") {
					if (Z === "json" || !Z && X.indexOf("json") >= 0) {
						aa = q(aa)
					} else {
						if (Z === "script" || !Z
								&& X.indexOf("javascript") >= 0) {
							b.globalEval(aa)
						}
					}
				}
				return aa
			}
		}
	};
	b.fn.ajaxForm = function(c) {
		if (this.length === 0) {
			var d = {
				s : this.selector,
				c : this.context
			};
			if (!b.isReady && d.s) {
				a("DOM not ready, queuing ajaxForm");
				b(function() {
					b(d.s, d.c).ajaxForm(c)
				});
				return this
			}
			a("terminating; zero elements found by selector"
					+ (b.isReady ? "" : " (DOM not ready)"));
			return this
		}
		return this.ajaxFormUnbind().bind("submit.form-plugin", function(f) {
			if (!f.isDefaultPrevented()) {
				f.preventDefault();
				b(this).omAjaxSubmit(c)
			}
		}).bind("click.form-plugin", function(j) {
			var i = j.target;
			var g = b(i);
			if (!(g.is(":submit,input:image"))) {
				var f = g.closest(":submit");
				if (f.length == 0) {
					return
				}
				i = f[0]
			}
			var h = this;
			h.clk = i;
			if (i.type == "image") {
				if (j.offsetX != undefined) {
					h.clk_x = j.offsetX;
					h.clk_y = j.offsetY
				} else {
					if (typeof b.fn.offset == "function") {
						var k = g.offset();
						h.clk_x = j.pageX - k.left;
						h.clk_y = j.pageY - k.top
					} else {
						h.clk_x = j.pageX - i.offsetLeft;
						h.clk_y = j.pageY - i.offsetTop
					}
				}
			}
			setTimeout(function() {
				h.clk = h.clk_x = h.clk_y = null
			}, 100)
		})
	};
	b.fn.ajaxFormUnbind = function() {
		return this.unbind("submit.form-plugin click.form-plugin")
	};
	b.fn.formToArray = function(q) {
		var p = [];
		if (this.length === 0) {
			return p
		}
		var d = this[0];
		var g = q ? d.getElementsByTagName("*") : d.elements;
		if (!g) {
			return p
		}
		var k, h, f, r, e, m, c;
		for (k = 0, m = g.length; k < m; k++) {
			e = g[k];
			f = e.name;
			if (!f) {
				continue
			}
			if (q && d.clk && e.type == "image") {
				if (!e.disabled && d.clk == e) {
					p.push( {
						name : f,
						value : b(e).val()
					});
					p.push( {
						name : f + ".x",
						value : d.clk_x
					}, {
						name : f + ".y",
						value : d.clk_y
					})
				}
				continue
			}
			r = b.fieldValue(e, true);
			if (r && r.constructor == Array) {
				for (h = 0, c = r.length; h < c; h++) {
					p.push( {
						name : f,
						value : r[h]
					})
				}
			} else {
				if (r !== null && typeof r != "undefined") {
					p.push( {
						name : f,
						value : r
					})
				}
			}
		}
		if (!q && d.clk) {
			var l = b(d.clk), o = l[0];
			f = o.name;
			if (f && !o.disabled && o.type == "image") {
				p.push( {
					name : f,
					value : l.val()
				});
				p.push( {
					name : f + ".x",
					value : d.clk_x
				}, {
					name : f + ".y",
					value : d.clk_y
				})
			}
		}
		return p
	};
	b.fn.formSerialize = function(c) {
		return b.param(this.formToArray(c))
	};
	b.fn.fieldSerialize = function(d) {
		var c = [];
		this.each(function() {
			var h = this.name;
			if (!h) {
				return
			}
			var f = b.fieldValue(this, d);
			if (f && f.constructor == Array) {
				for ( var g = 0, e = f.length; g < e; g++) {
					c.push( {
						name : h,
						value : f[g]
					})
				}
			} else {
				if (f !== null && typeof f != "undefined") {
					c.push( {
						name : this.name,
						value : f
					})
				}
			}
		});
		return b.param(c)
	};
	b.fn.fieldValue = function(h) {
		for ( var g = [], e = 0, c = this.length; e < c; e++) {
			var f = this[e];
			var d = b.fieldValue(f, h);
			if (d === null || typeof d == "undefined"
					|| (d.constructor == Array && !d.length)) {
				continue
			}
			d.constructor == Array ? b.merge(g, d) : g.push(d)
		}
		return g
	};
	b.fieldValue = function(c, j) {
		var e = c.name, p = c.type, q = c.tagName.toLowerCase();
		if (j === undefined) {
			j = true
		}
		if (j
				&& (!e || c.disabled || p == "reset" || p == "button"
						|| (p == "checkbox" || p == "radio") && !c.checked
						|| (p == "submit" || p == "image") && c.form
						&& c.form.clk != c || q == "select"
						&& c.selectedIndex == -1)) {
			return null
		}
		if (q == "select") {
			var k = c.selectedIndex;
			if (k < 0) {
				return null
			}
			var m = [], d = c.options;
			var g = (p == "select-one");
			var l = (g ? k + 1 : d.length);
			for ( var f = (g ? k : 0); f < l; f++) {
				var h = d[f];
				if (h.selected) {
					var o = h.value;
					if (!o) {
						o = (h.attributes && h.attributes.value && !(h.attributes.value.specified)) ? h.text
								: h.value
					}
					if (g) {
						return o
					}
					m.push(o)
				}
			}
			return m
		}
		return b(c).val()
	};
	b.fn.clearForm = function() {
		return this.each(function() {
			b("input,select,textarea", this).clearFields()
		})
	};
	b.fn.clearFields = b.fn.clearInputs = function() {
		var c = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
		return this.each(function() {
			var e = this.type, d = this.tagName.toLowerCase();
			if (c.test(e) || d == "textarea") {
				this.value = ""
			} else {
				if (e == "checkbox" || e == "radio") {
					this.checked = false
				} else {
					if (d == "select") {
						this.selectedIndex = -1
					}
				}
			}
		})
	};
	b.fn.resetForm = function() {
		return this
				.each(function() {
					if (typeof this.reset == "function"
							|| (typeof this.reset == "object" && !this.reset.nodeType)) {
						this.reset()
					}
				})
	};
	b.fn.enable = function(c) {
		if (c === undefined) {
			c = true
		}
		return this.each(function() {
			this.disabled = !c
		})
	};
	b.fn.selected = function(c) {
		if (c === undefined) {
			c = true
		}
		return this.each(function() {
			var d = this.type;
			if (d == "checkbox" || d == "radio") {
				this.checked = c
			} else {
				if (this.tagName.toLowerCase() == "option") {
					var e = b(this).parent("select");
					if (c && e[0] && e[0].type == "select-one") {
						e.find("option").selected(false)
					}
					this.selected = c
				}
			}
		})
	};
	function a() {
		var c = "[jquery.form] " + Array.prototype.join.call(arguments, "");
		if (window.console && window.console.log) {
			window.console.log(c)
		} else {
			if (window.opera && window.opera.postError) {
				window.opera.postError(c)
			}
		}
	}
})(jQuery);
(function(a) {
	a
			.widget(
					"om.omButton",
					{
						options : {
							disabled : null,
							label : null,
							icons : {
								left : null,
								right : null
							},
							width : null,
							onClick : null
						},
						_create : function() {
							var b = this;
							var e = this.options.disabled;
							if (typeof e != "boolean") {
								e = this.element.propAttr("disabled")
							}
							this._determineButtonType();
							var c = this.options;
							if (this.buttonElement.attr("disabled") == "disabled"
									|| c.disabled == "disabled") {
								c.disabled = true
							}
							this._initButton();
							if (c.disabled) {
								b._addClass("disabled");
								this.buttonElement.css("cursor", "default")
							}
							var d = this.buttonElement.parent().parent();
							d
									.bind("mouseenter.button", function(f) {
										if (c.disabled) {
											return false
										}
										b._addClass("hover")
									})
									.bind("mouseleave.button", function(f) {
										if (c.disabled) {
											return false
										}
										b._removeClass("hover");
										b._removeClass("active")
									})
									.bind("click.button", function(f) {
										if (c.disabled) {
											f.preventDefault();
											f.stopImmediatePropagation();
											return false
										} else {
											if (b.options.onClick) {
												b.options.onClick()
											}
										}
									})
									.bind("mousedown.button", function(f) {
										if (c.disabled) {
											return false
										}
										b._addClass("active");
										b._removeClass("focus");
										var g = c.onClick;
										if (g && g(f) === false) {
											return
										}
									})
									.bind("mouseup.button", function(f) {
										if (c.disabled) {
											return false
										}
										b._addClass("focus");
										b._removeClass("active")
									})
									.bind(
											"keydown.button",
											function(f) {
												if (c.disabled) {
													return false
												}
												if (f.keyCode == a.ui.keyCode.SPACE
														|| f.keyCode == a.ui.keyCode.ENTER) {
													b._addClass("active")
												}
												if (f.keyCode == a.ui.keyCode.SPACE) {
													var g = c.onClick;
													if (g && g(f) === false) {
														return
													}
												}
											}).bind("keyup.button", function() {
										b._removeClass("active")
									});
							this.element.bind("focus", function(f) {
								if (c.disabled) {
									return false
								}
								b._addClass("focus")
							}).bind("blur", function(f) {
								if (c.disabled) {
									return false
								}
								b._removeClass("focus")
							})
						},
						enable : function() {
							this._removeClass("disabled");
							this.options.disabled = false;
							this.buttonElement.css("cursor", "pointer");
							return this.element.removeAttr("disabled")
						},
						disable : function() {
							this._addClass("disabled");
							this.options.disabled = true;
							this.buttonElement.css("cursor", "default");
							return this.element.attr("disabled", "disabled")
						},
						click : function() {
							if (!this.options.disabled && this.options.onClick) {
								this.options.onClick()
							}
						},
						changeLabel : function(b) {
							if (this.type == "a") {
								this.buttonElement.text(b)
							} else {
								if (this.type == "input") {
									this.buttonElement.val(b)
								} else {
									if (this.type == "button") {
										this.buttonElement.html(b)
									}
								}
							}
						},
						changeIcons : function(b) {
							if (!this.options.disabled) {
								if (b) {
									b.left ? this.buttonElement.css(
											"backgroundImage", "url( " + b.left
													+ " )") : null;
									b.right ? this.buttonElement.next().attr(
											"src", b.right) : null
								}
							}
						},
						_addClass : function(b) {
							this.buttonElement.parent().parent().addClass(
									"om-state-" + b)
						},
						_removeClass : function(b) {
							this.buttonElement.parent().parent().removeClass(
									"om-state-" + b)
						},
						_initButton : function() {
							var d = this.options;
							var c = this._getLabel();
							var g = a("<span>").addClass(
									"om-btn om-state-default"), f = a("<span>")
									.addClass("om-btn-bg om-btn-left"), e = a(
									"<span>").addClass(
									"om-btn-bg om-btn-center"), b = a("<span>")
									.addClass("om-btn-bg om-btn-right");
							if (d.width > 10) {
								e.css("width", parseInt(d.width) - 10)
							}
							var h = this.buttonElement.addClass("om-btn-txt");
							if (this.type == "a" || this.type == "button") {
								h.html(c)
							} else {
								h.val(c)
							}
							if (d.icons.left) {
								if (c) {
									h.addClass("om-btn-icon").css(
											"background-image",
											"url(" + d.icons.left + ")")
								} else {
									h.addClass("om-btn-only-icon").css(
											"background-image",
											"url(" + d.icons.left + ")")
								}
							}
							h.css( {
								"background-position" : "left center",
								"background-repeat" : "no-repeat"
							});
							h.wrap(g);
							f.insertBefore(h);
							b.insertAfter(h);
							h.wrap(e);
							if (d.icons.right) {
								if (c != "") {
									a("<img>").attr("src", d.icons.right).css( {
										"vertical-align" : "text-top",
										"padding-left" : "3px"
									}).insertAfter(h)
								} else {
									a("<img>").attr("src", d.icons.right).css(
											"vertical-align", "text-top")
											.insertAfter(h)
								}
							}
						},
						_getLabel : function() {
							return this.options.label
									|| this.buttonElement.html()
									|| this.buttonElement.text()
									|| this.buttonElement.val()
						},
						_determineButtonType : function() {
							if (this.element.is("input")) {
								this.type = "input"
							} else {
								if (this.element.is("a")) {
									this.type = "a"
								} else {
									if (this.element.is("button")) {
										this.type = "button"
									}
								}
							}
							this.buttonElement = this.element
						}
					})
})(jQuery);
(function(b) {
	function d(f, e) {
		this._init(f, e)
	}
	b
			.extend(
					d.prototype,
					{
						_init : function(f, j) {
							var h = this, g = f;
							h.id = h.C_Id = h._stamp(g);
							h._buildParam(j);
							if (!h.popup) {
								h.con = g
							} else {
								h.trigger = g;
								g = b("<span></span>").insertAfter(f)
										.wrapInner(f);
								f
										.after('<span class="om-calendar-trigger"></span>');
								h.con = b("<div></div>");
								b("body").append(h.con);
								h.C_Id = h._stamp(h.con);
								h.con.css( {
									top : "0px",
									position : "absolute",
									background : "white",
									visibility : "hidden"
								});
								g
										.addClass("om-calendar om-widget om-state-default");
								var l = h.trigger.val();
								if (b.trim(l) != "") {
									try {
										var i = b.omCalendar.parseDate(l,
												h.dateFormat);
										i && (h.date = i)
									} catch (k) {
									}
								}
							}
							h.render();
							h._buildEvent();
							if (h.popup) {
								if (h.readOnly || !h.editable) {
									h.trigger.attr("readonly", "readOnly")
											.unbind()
								}
								if (h.disabled) {
									h.trigger.attr("disabled", true);
									h.trigger.next().addClass(
											"om-state-disabled").unbind()
								}
							}
							return this
						},
						render : function(k) {
							var e = this, h = 0, g, f, j;
							k = k || {};
							e._parseParam(k);
							e.ca = [];
							e.con
									.addClass("om-calendar-list-wrapper om-widget om-clearfix multi-"
											+ e.pages + " om-widget-content");
							e.con.html("");
							for (h = 0, j = [ e.year, e.month ]; h < e.pages; h++) {
								if (h === 0) {
									g = true
								} else {
									g = false;
									j = e._computeNextMonth(j)
								}
								f = h == (e.pages - 1);
								e.ca.push(new e.Page( {
									year : j[0],
									month : j[1],
									prevArrow : g,
									nextArrow : f,
									showTime : e.showTime
								}, e));
								e.ca[h].render()
							}
							return this
						},
						_stamp : function(e) {
							if (e.attr("id") === undefined
									|| e.attr("id") === "") {
								e.attr("id", "K_" + new Date().getTime())
							}
							return e.attr("id")
						},
						_showdate : function(g, f) {
							var e = new Date(f - 0 + g * 86400000);
							e = e.getFullYear() + "/" + (e.getMonth() + 1)
									+ "/" + e.getDate();
							return new Date(e)
						},
						_buildEvent : function(f) {
							var e = this;
							if (!e.popup) {
								return this
							}
							for ( var g = 1; g < e.EV.length; g++) {
								e.EV[g] && e.EV[g].unbind(".omCalendar")
							}
							if (!f) {
								e.EV[0] && e.EV[0].unbind(".omCalendar");
								e.EV[0] = b("body")
										.bind(
												"mousedown.omCalendar",
												function(l) {
													var k = b(l.target);
													if (k.attr("id") === e.C_Id) {
														return
													}
													if ((k.hasClass("om-next") || k
															.hasClass("om-prev"))
															&& k[0].nodeName
																	.toLowerCase() === "a") {
														return
													}
													if (b.contains(e.con[0],
															k[0])
															&& (k[0].nodeName
																	.toLowerCase() === "option" || k[0].nodeName
																	.toLowerCase() === "select")) {
														return
													}
													if (k.attr("id") == e.id
															|| k.siblings()
																	.attr("id") == e.id) {
														return
													}
													if (e.con.css("visibility") == "hidden") {
														return
													}
													var i = function(m, o) {
														if (m[0] > o[0].x
																&& m[0] < o[1].x
																&& m[1] > o[0].y
																&& m[1] < o[1].y) {
															return true
														} else {
															return false
														}
													};
													if (!i(
															[ l.pageX, l.pageY ],
															[
																	{
																		x : e.con
																				.offset().left,
																		y : e.con
																				.offset().top
																	},
																	{
																		x : e.con
																				.offset().left
																				+ e.con
																						.width(),
																		y : e.con
																				.offset().top
																				+ e.con
																						.height()
																	} ])) {
														e.hide()
													}
												})
							}
							var j = e.trigger || e.con || b("#" + e.id);
							e.EV[1] = j
									.bind("click.omCalendar", function(i) {
										i.preventDefault();
										e.toggle()
									})
									.bind(
											"focus.omCalendar",
											function() {
												b(this)
														.parent()
														.addClass(
																"om-state-hover om-state-active")
											})
									.bind(
											"blur.omCalendar",
											function() {
												b(this)
														.parent()
														.removeClass(
																"om-state-hover om-state-active")
											});
							var h = j.next();
							e.EV[2] = h
									.bind("click.omCalendar", function() {
										j.trigger("focus");
										e.show()
									})
									.bind(
											"mouseover.omCalendar",
											function() {
												b(this).parent().addClass(
														"om-state-hover")
											})
									.bind(
											"mouseout.omCalendar",
											function() {
												!e.isVisible()
														&& b(this)
																.parent()
																.removeClass(
																		"om-state-hover")
											});
							return this
						},
						toggle : function() {
							var e = this;
							if (!e.isVisible()) {
								e.show()
							} else {
								e.hide()
							}
						},
						isVisible : function() {
							var e = this;
							if (e.con.css("visibility") == "hidden") {
								return false
							}
							return true
						},
						show : function() {
							var g = this;
							g.con.css("visibility", "");
							var h = g.trigger.parent().offset().left, e = g.trigger
									.parent().offsetHeight
									|| g.trigger.parent().outerHeight(), f = g.trigger
									.parent().offset().top
									+ e;
							g.con.css("left", h.toString() + "px");
							g.con.css("top", f.toString() + "px");
							return this
						},
						hide : function() {
							var e = this;
							e.con.css("visibility", "hidden");
							b(".om-trigger-press").removeClass(
									"om-trigger-press");
							return this
						},
						_buildParam : function(j) {
							var f = this;
							if (j === undefined || j === null) {
								j = {}
							}
							function e(l, k) {
								var i = j[k];
								f[k] = (i === undefined || i === null) ? l : i
							}
							var h = {
								date : new Date(),
								startDay : 0,
								pages : 1,
								closable : true,
								minDate : false,
								maxDate : false,
								multiSelect : false,
								navigator : true,
								popup : true,
								showTime : false,
								onSelect : function(i) {
								},
								disabledDays : [],
								disabledFn : function(i) {
								},
								disabled : false,
								readOnly : false,
								editable : true,
								dateFormat : false
							};
							for ( var g in h) {
								e(h[g], g)
							}
							e(f.date, "selected");
							if (j.startDay) {
								f.startDay = (7 - j.startDay) % 7
							}
							if (!f.dateFormat) {
								f.dateFormat = f.showTime ? "yy-mm-dd H:i:s"
										: "yy-mm-dd"
							}
							f.EV = [];
							return this
						},
						_parseParam : function(g) {
							var e = this, f;
							if (g === undefined || g === null) {
								g = {}
							}
							for (f in g) {
								e[f] = g[f]
							}
							e._handleDate();
							return this
						},
						_templetShow : function(f, l) {
							var h, o, g, e, k, j;
							if (l instanceof Array) {
								h = "";
								for (g = 0; g < l.length; g++) {
									h += arguments.callee(f, l[g])
								}
								f = h
							} else {
								o = f.match(/{\$(.*?)}/g);
								if (l !== undefined && o !== null) {
									for (g = 0, e = o.length; g < e; g++) {
										j = o[g].replace(/({\$)|}/g, "");
										k = (l[j] !== undefined) ? l[j] : "";
										f = f.replace(o[g], k)
									}
								}
							}
							return f
						},
						_handleDate : function() {
							var e = this, f = e.date;
							e.weekday = f.getDay() + 1;
							e.day = f.getDate();
							e.month = f.getMonth();
							e.year = f.getFullYear();
							return this
						},
						_getHeadStr : function(e, f) {
							return e.toString() + "年"
									+ (Number(f) + 1).toString() + "月"
						},
						_monthAdd : function() {
							var e = this;
							if (e.month == 11) {
								e.year++;
								e.month = 0
							} else {
								e.month++
							}
							e.date = new Date(e.year.toString() + "/"
									+ (e.month + 1).toString() + "/"
									+ e.day.toString());
							return this
						},
						_monthMinus : function() {
							var e = this;
							if (e.month === 0) {
								e.year--;
								e.month = 11
							} else {
								e.month--
							}
							e.date = new Date(e.year.toString() + "/"
									+ (e.month + 1).toString() + "/"
									+ e.day.toString());
							return this
						},
						_computeNextMonth : function(e) {
							var g = e[0], f = e[1];
							if (f == 11) {
								g++;
								f = 0
							} else {
								f++
							}
							return [ g, f ]
						},
						_handleOffset : function() {
							var g = this, j = [ "日", "一", "二", "三", "四", "五",
									"六" ], f = "<span>{$day}</span>", l = g.startDay, k = "", e = [];
							for ( var h = 0; h < 7; h++) {
								e[h] = {
									day : j[(h - l + 7) % 7]
								}
							}
							k = g._templetShow(f, e);
							return {
								day_html : k
							}
						}
					});
	b
			.extend(
					d.prototype,
					{
						Page : function(f, e) {
							this.father = e;
							this.month = Number(f.month);
							this.year = Number(f.year);
							this.prevArrow = f.prevArrow;
							this.nextArrow = f.nextArrow;
							this.node = null;
							this.timmer = null;
							this.id = "";
							this.EV = [];
							this.html = [
									'<div class="om-cal-box" id="{$id}">',
									'<div class="om-cal-hd om-widget-header">',
									'<a href="javascript:void(0);" class="om-prev {$prev}"><span class="om-icon om-icon-seek-prev">Prev</span></a>',
									'<a href="javascript:void(0);" class="om-title">{$title}</a>',
									'<a href="javascript:void(0);" class="om-next {$next}"><span class="om-icon om-icon-seek-next">Next</span></a>',
									"</div>",
									'<div class="om-cal-bd">',
									'<div class="om-whd">',
									e._handleOffset().day_html,
									"</div>",
									'<div class="om-dbd om-clearfix">',
									"{$ds}",
									"</div>",
									"</div>",
									'<div class="om-setime om-state-default hidden">',
									"</div>",
									'<div class="om-cal-ft {$showtime}">',
									'<div class="om-cal-time om-state-default">',
									"时间：00:00 &hearts;",
									"</div>",
									"</div>",
									'<div class="om-selectime om-state-default hidden">',
									"</div>", "</div><!--#om-cal-box-->" ]
									.join("");
							this.nav_html = [
									"<p>",
									"月",
									'<select value="{$the_month}">',
									'<option class="m1" value="1">01</option>',
									'<option class="m2" value="2">02</option>',
									'<option class="m3" value="3">03</option>',
									'<option class="m4" value="4">04</option>',
									'<option class="m5" value="5">05</option>',
									'<option class="m6" value="6">06</option>',
									'<option class="m7" value="7">07</option>',
									'<option class="m8" value="8">08</option>',
									'<option class="m9" value="9">09</option>',
									'<option class="m10" value="10">10</option>',
									'<option class="m11" value="11">11</option>',
									'<option class="m12" value="12">12</option>',
									"</select>",
									"</p>",
									"<p>",
									"年",
									'<input type="text" value="{$the_year}" onfocus="this.select()"/>',
									"</p>",
									"<p>",
									'<button class="ok">确定</button><button class="cancel">取消</button>',
									"</p>" ].join("");
							this.Verify = function() {
								var h = function(j) {
									if (!/^\d+$/i.test(j)) {
										return false
									}
									j = Number(j);
									return !(j < 1 || j > 31)
								}, g = function(j) {
									if (!/^\d+$/i.test(j)) {
										return false
									}
									j = Number(j);
									return !(j < 100 || j > 10000)
								}, i = function(j) {
									if (!/^\d+$/i.test(j)) {
										return false
									}
									j = Number(j);
									return !(j < 1 || j > 12)
								};
								return {
									isDay : h,
									isYear : g,
									isMonth : i
								}
							};
							this._renderUI = function() {
								var i = this, g = {}, h;
								i.HTML = "";
								g.prev = "";
								g.next = "";
								g.title = "";
								g.ds = "";
								if (!i.prevArrow) {
									g.prev = "hidden"
								}
								if (!i.nextArrow) {
									g.next = "hidden"
								}
								if (!i.father.showtime) {
									g.showtime = "hidden"
								}
								g.id = i.id = "om-cal-"
										+ Math.random().toString().replace(
												/.\./i, "");
								g.title = i.father._getHeadStr(i.year, i.month);
								i.createDS();
								g.ds = i.ds;
								i.father.con.append(i.father._templetShow(
										i.html, g));
								i.node = b("#" + i.id);
								if (i.father.showTime) {
									h = i.node.find(".om-cal-ft");
									h.removeClass("hidden");
									i.timmer = new i.father.TimeSelector(h,
											i.father)
								}
								return this
							};
							this._buildEvent = function() {
								var j = this, h, g = b("#" + j.id);
								for (h = 0; h < j.EV.length; h++) {
									if (typeof j.EV[h] != "undefined") {
										j.EV[h].unbind(".omCalednar")
									}
								}
								j.EV[0] = g
										.find("div.om-dbd")
										.bind(
												"click",
												function(l) {
													source = b(l.target);
													if (source
															.hasClass("om-null")) {
														return
													}
													if (source
															.hasClass("om-state-disabled")) {
														return
													}
													var k = Number(source
															.html());
													var m = new Date(
															"2010/01/01");
													m.setYear(j.year);
													m.setMonth(j.month);
													m.setDate(k);
													j.father.dt_date = m;
													if (!j.father.showTime) {
														j.father.onSelect
																.call(
																		j.father.con,
																		m)
													}
													if (j.father.popup
															&& !j.father.showTime) {
														if (j.father.closable) {
															j.father.hide()
														}
														if (!isNaN(j.father.dt_date)) {
															var i = b.omCalendar
																	.formatDate(
																			j.father.dt_date,
																			j.father.dateFormat);
															b(j.father.trigger)
																	.val(i)
														}
													}
													j.father.render( {
														selected : m
													})
												})
										.find("a")
										.bind(
												"mouseover",
												function(i) {
													b(this)
															.addClass(
																	"om-state-hover om-state-nobd")
												})
										.bind(
												"mouseout",
												function(i) {
													b(this).removeClass(
															"om-state-hover");
													if (b(this)
															.hasClass(
																	"om-state-highlight")
															|| b(this)
																	.hasClass(
																			"om-state-active")) {
														return
													} else {
														b(this)
																.removeClass(
																		"om-state-nobd")
													}
												});
								j.EV[1] = g
										.find("a.om-prev")
										.bind(
												"click",
												function(i) {
													i.preventDefault();
													j.father._monthMinus()
															.render();
													j.father.con
															.trigger(
																	"monthChange",
																	{
																		date : new Date(
																				j.father.year
																						+ "/"
																						+ (j.father.month + 1)
																						+ "/01")
																	})
												});
								j.EV[2] = g
										.find("a.om-next")
										.bind(
												"click",
												function(i) {
													i.preventDefault();
													j.father._monthAdd()
															.render();
													j.father.con
															.trigger(
																	"monthChange",
																	{
																		date : new Date(
																				j.father.year
																						+ "/"
																						+ (j.father.month + 1)
																						+ "/01")
																	})
												});
								if (j.father.navigator) {
									j.EV[3] = g
											.find("a.om-title")
											.bind(
													"click",
													function(k) {
														try {
															j.timmer
																	.hidePopup();
															k.preventDefault()
														} catch (m) {
														}
														source = b(k.target);
														var l = g
																.find(".om-setime");
														l.html("");
														var i = j.father
																._templetShow(
																		j.nav_html,
																		{
																			the_month : j.month + 1,
																			the_year : j.year
																		});
														l.html(i);
														l
																.find(
																		"option:[value="
																				+ (j.month + 1)
																				+ "]")
																.attr(
																		"selected",
																		"selected");
														l.removeClass("hidden");
														g
																.find("input")
																.bind(
																		"keydown",
																		function(
																				q) {
																			source = b(q.target);
																			if (q.keyCode == 38) {
																				source
																						.val(Number(source
																								.val()) + 1);
																				source[0]
																						.select()
																			}
																			if (q.keyCode == 40) {
																				source
																						.val(Number(source
																								.val()) - 1);
																				source[0]
																						.select()
																			}
																			if (q.keyCode == 13) {
																				var p = g
																						.find(
																								".om-setime select")
																						.val();
																				var o = g
																						.find(
																								".om-setime input")
																						.val();
																				g
																						.find(
																								".om-setime")
																						.addClass(
																								"hidden");
																				if (!j
																						.Verify()
																						.isYear(
																								o)) {
																					return
																				}
																				if (!j
																						.Verify()
																						.isMonth(
																								p)) {
																					return
																				}
																				j.father
																						.render( {
																							date : new Date(
																									o
																											+ "/"
																											+ p
																											+ "/01")
																						});
																				j.father.con
																						.trigger(
																								"monthChange",
																								{
																									date : new Date(
																											o
																													+ "/"
																													+ p
																													+ "/01")
																								})
																			}
																		})
													})
											.bind(
													"mouseover",
													function(i) {
														b(this)
																.addClass(
																		"om-state-hover")
													})
											.bind(
													"mouseout",
													function(i) {
														b(this)
																.removeClass(
																		"om-state-hover")
													});
									j.EV[4] = g
											.find(".om-setime")
											.bind(
													"click",
													function(l) {
														l.preventDefault();
														source = b(l.target);
														if (source
																.hasClass("ok")) {
															var k = b(this)
																	.find(
																			"select")
																	.val(), i = b(
																	this).find(
																	"input")
																	.val();
															b(this).addClass(
																	"hidden");
															if (!j.Verify()
																	.isYear(i)) {
																return
															}
															if (!j.Verify()
																	.isMonth(k)) {
																return
															}
															j.father
																	.render( {
																		date : new Date(
																				i
																						+ "/"
																						+ k
																						+ "/01")
																	});
															j.father.con
																	.trigger(
																			"monthChange",
																			{
																				date : new Date(
																						i
																								+ "/"
																								+ k
																								+ "/01")
																			})
														} else {
															if (source
																	.hasClass("cancel")) {
																b(this)
																		.addClass(
																				"hidden")
															}
														}
													})
								}
								return this
							};
							this._getNode = function() {
								var g = this;
								return g.node
							};
							this._getNumOfDays = function(g, h) {
								return 32 - new Date(g, h - 1, 32).getDate()
							};
							this.createDS = function() {
								var q = this, l = "", p = (new Date(q.year
										+ "/" + (q.month + 1) + "/01").getDay()
										+ q.father.startDay + 7) % 7, h = q
										._getNumOfDays(q.year, q.month + 1)
										+ p, j, m;
								var g = [];
								for (j = 0; j < q.father.disabledDays.length; j++) {
									g[j] = q.father.disabledDays[j] % 7
								}
								for (j = 0; j < h; j++) {
									var o = new Date(q.year + "/"
											+ Number(q.month + 1) + "/"
											+ (j + 1 - p).toString());
									if (j < p) {
										l += '<a href="javascript:void(0);" class="om-null">0</a>'
									} else {
										if (b.inArray(
												(j + q.father.startDay) % 7, g) >= 0) {
											l += '<a href="javascript:void(0);" class="om-state-disabled">'
													+ (j - p + 1) + "</a>"
										} else {
											if (q.father.disabledFn(o) === false) {
												l += '<a href="javascript:void(0);" class="om-state-disabled">'
														+ (j - p + 1) + "</a>"
											} else {
												if (q.father.minDate instanceof Date
														&& new Date(q.year
																+ "/"
																+ (q.month + 1)
																+ "/"
																+ (j + 1 - p))
																.getTime() < (q.father.minDate
																.getTime() + 1)) {
													l += '<a href="javascript:void(0);" class="om-state-disabled">'
															+ (j - p + 1)
															+ "</a>"
												} else {
													if (q.father.maxDate instanceof Date
															&& new Date(
																	q.year
																			+ "/"
																			+ (q.month + 1)
																			+ "/"
																			+ (j + 1 - p))
																	.getTime() > q.father.maxDate
																	.getTime()) {
														l += '<a href="javascript:void(0);" class="om-state-disabled">'
																+ (j - p + 1)
																+ "</a>"
													} else {
														if (j == (p
																+ (new Date())
																		.getDate() - 1)
																&& (new Date())
																		.getFullYear() == q.year
																&& (new Date())
																		.getMonth() == q.month) {
															l += '<a href="javascript:void(0);" class="om-state-highlight om-state-nobd">'
																	+ (j - p + 1)
																	+ "</a>"
														} else {
															if (j == (p
																	+ q.father.selected
																			.getDate() - 1)
																	&& q.month == q.father.selected
																			.getMonth()
																	&& q.year == q.father.selected
																			.getFullYear()) {
																l += '<a href="javascript:void(0);" class="om-state-active om-state-nobd">'
																		+ (j
																				- p + 1)
																		+ "</a>"
															} else {
																l += '<a href="javascript:void(0);">'
																		+ (j
																				- p + 1)
																		+ "</a>"
															}
														}
													}
												}
											}
										}
									}
								}
								if (h % 7 !== 0) {
									for (j = 0; j < (7 - h % 7); j++) {
										l += '<a href="javascript:void(0);" class="om-null">0</a>'
									}
								}
								q.ds = l;
								return this
							};
							this.render = function() {
								var g = this;
								g._renderUI();
								g._buildEvent();
								return this
							}
						}
					});
	b
			.extend(
					d.prototype,
					{
						TimeSelector : function(f, e) {
							this.father = e;
							this.fcon = f.parent(".om-cal-box");
							this.popupannel = this.fcon.find(".om-selectime");
							if (typeof e.date == "undefined") {
								e.date = new Date()
							}
							this.time = e.date;
							this.status = "s";
							this.ctime = b('<div class="om-cal-time om-state-default">时间：<span class="h">h</span>:<span class="m">m</span>:<span class="s">s</span><!--{{arrow--><div class="cta"><button class="u om-icon om-icon-triangle-1-n"></button><button class="d om-icon om-icon-triangle-1-s"></button></div><!--arrow}}--></div>');
							this.button = b('<button class="ct-ok om-state-default">确定</button>');
							this.h_a = [ "00", "01", "02", "03", "04", "05",
									"06", "07", "08", "09", "10", "11", "12",
									"13", "14", "15", "16", "17", "18", "19",
									"20", "21", "22", "23" ];
							this.m_a = [ "00", "10", "20", "30", "40", "50" ];
							this.s_a = [ "00", "10", "20", "30", "40", "50" ];
							this.parseSubHtml = function(g) {
								var j = "";
								for ( var h = 0; h < g.length; h++) {
									j += '<a href="javascript:void(0);" class="om-cal-item">'
											+ g[h] + "</a>"
								}
								j += '<a href="javascript:void(0);" class="x">x</a>';
								return j
							};
							this.showPopup = function(h) {
								var i = this;
								this.popupannel.html(h);
								this.popupannel.removeClass("hidden");
								var g = i.status;
								var j = "om-state-active om-state-nobd";
								i.ctime.find("span").removeClass(j);
								switch (g) {
								case "h":
									i.ctime.find(".h").addClass(j);
									break;
								case "m":
									i.ctime.find(".m").addClass(j);
									break;
								case "s":
									i.ctime.find(".s").addClass(j);
									break
								}
							};
							this.hidePopup = function() {
								this.popupannel.addClass("hidden")
							};
							this.render = function() {
								var i = this;
								var k = i.get("h");
								var g = i.get("m");
								var j = i.get("s");
								i.father._time = i.time;
								i.ctime.find(".h").html(k);
								i.ctime.find(".m").html(g);
								i.ctime.find(".s").html(j);
								return i
							};
							this.set = function(g, i) {
								var h = this;
								i = Number(i);
								switch (g) {
								case "h":
									h.time.setHours(i);
									break;
								case "m":
									h.time.setMinutes(i);
									break;
								case "s":
									h.time.setSeconds(i);
									break
								}
								h.render()
							};
							this.get = function(g) {
								var h = this;
								var i = h.time;
								switch (g) {
								case "h":
									return i.getHours();
								case "m":
									return i.getMinutes();
								case "s":
									return i.getSeconds()
								}
							};
							this.add = function() {
								var i = this;
								var g = i.status;
								var h = i.get(g);
								h++;
								i.set(g, h)
							};
							this.minus = function() {
								var i = this;
								var g = i.status;
								var h = i.get(g);
								h--;
								i.set(g, h)
							};
							this._init = function() {
								var g = this;
								f.html("").append(g.ctime);
								f.append(g.button);
								g.render();
								g.popupannel.bind("click", function(j) {
									var i = b(j.target);
									if (i.hasClass("x")) {
										g.hidePopup()
									} else {
										if (i.hasClass("om-cal-item")) {
											var h = Number(i.html());
											g.set(g.status, h);
											g.hidePopup()
										}
									}
								});
								g.button
										.bind(
												"click",
												function() {
													var i = typeof g.father.dt_date == "undefined" ? g.father.date
															: g.father.dt_date;
													i.setHours(g.get("h"));
													i.setMinutes(g.get("m"));
													i.setSeconds(g.get("s"));
													g.father.onSelect
															.call(
																	g.father.trigger,
																	i);
													if (g.father.popup) {
														var h = b.omCalendar
																.formatDate(
																		i,
																		g.father.dateFormat);
														b(g.father.trigger)
																.val(h);
														if (g.father.closable) {
															g.father.hide()
														}
													}
												});
								g.ctime.bind("keyup", function(h) {
									if (h.keyCode == 38 || h.keyCode == 37) {
										h.preventDefault();
										g.add()
									}
									if (h.keyCode == 40 || h.keyCode == 39) {
										h.preventDefault();
										g.minus()
									}
								});
								g.ctime.find(".u").bind("click", function() {
									g.hidePopup();
									g.add()
								});
								g.ctime.find(".d").bind("click", function() {
									g.hidePopup();
									g.minus()
								});
								g.ctime.find(".h").bind("click", function() {
									var h = g.parseSubHtml(g.h_a);
									g.status = "h";
									g.showPopup(h)
								});
								g.ctime.find(".m").bind("click", function() {
									var h = g.parseSubHtml(g.m_a);
									g.status = "m";
									g.showPopup(h)
								});
								g.ctime.find(".s").bind("click", function() {
									var h = g.parseSubHtml(g.s_a);
									g.status = "s";
									g.showPopup(h)
								})
							};
							this._init()
						}
					});
	var c = false;
	b(document).ready(function() {
		c = true
	});
	var a = {
		disable : function() {
			return this.each(function() {
				b(this).attr("disabled", true);
				b(this).next().addClass("om-state-disabled").unbind()
			})
		},
		enable : function() {
			return this.each(function() {
				b(this).attr("disabled", false);
				b(this).next().removeClass("om-state-disabled");
				this.calendar._buildEvent(true)
			})
		},
		getDate : function() {
			var e = this[0];
			if (e && e.calendar) {
				return e.calendar.selected
			}
		},
		setDate : function(e) {
			return this.each(function() {
				if (this.calendar) {
					this.calendar.render( {
						selected : e,
						date : e
					})
				}
			})
		}
	};
	b.fn.omCalendar = function(e) {
		if (e && typeof (e) == "string") {
			if (a[e]) {
				return a[e].apply(this, Array.prototype.slice
						.call(arguments, 1))
			}
			return null
		}
		return this.each(function() {
			if (!c) {
				b(this).hide();
				var f = this;
				b(document).ready(function() {
					this.calendar = new d(b(this), e)
				})
			} else {
				this.calendar = new d(b(this), e)
			}
		})
	};
	b.omCalendar = b.omCalendar || {};
	b.extend(b.omCalendar, {
		leftPad : function(h, f, g) {
			var e = new String(h);
			if (!g) {
				g = " "
			}
			while (e.length < f) {
				e = g + e
			}
			return e.toString()
		}
	});
	b
			.extend(
					b.omCalendar,
					{
						getShortDayName : function(e) {
							return b.omCalendar.dayMaps[e][0]
						},
						getDayName : function(e) {
							return b.omCalendar.dayMaps[e][1]
						},
						getShortMonthName : function(e) {
							return b.omCalendar.monthMaps[e][0]
						},
						getMonthName : function(e) {
							return b.omCalendar.monthMaps[e][1]
						},
						dayMaps : [ [ "Sun", "Sunday" ], [ "Mon", "Monday" ],
								[ "Tue", "Tuesday" ], [ "Wed", "Wednesday" ],
								[ "Thu", "Thursday" ], [ "Fri", "Friday" ],
								[ "Sat", "Saturday" ] ],
						monthMaps : [ [ "Jan", "January" ],
								[ "Feb", "February" ], [ "Mar", "March" ],
								[ "Apr", "April" ], [ "May", "May" ],
								[ "Jun", "June" ], [ "Jul", "July" ],
								[ "Aug", "August" ], [ "Sep", "September" ],
								[ "Oct", "October" ], [ "Nov", "November" ],
								[ "Dec", "December" ] ],
						formatCodes : {
							d : {
								g : "this.getDate()",
								s : "this.setDate({param})",
								r : "(0[1-9]|[1-2][0-9]|3[0-1]|[1-9])"
							},
							dd : {
								g : "$.omCalendar.leftPad(this.getDate(), 2, '0')",
								s : "this.setDate(parseInt('{param}', 10))",
								r : "(0[1-9]|[1-2][0-9]|3[0-1]|[1-9])"
							},
							m : {
								g : "(this.getMonth() + 1)",
								s : "this.setMonth(parseInt('{param}', 10))",
								r : "(0[1-9]|1[0-2]|[1-9])"
							},
							mm : {
								g : "$.omCalendar.leftPad(this.getMonth() + 1, 2, '0')",
								s : "this.setMonth(parseInt('{param}', 10))",
								r : "(0[1-9]|1[0-2]|[1-9])"
							},
							y : {
								g : "('' + this.getFullYear()).substring(2, 4)",
								s : "this.setFullYear(parseInt('20{param}', 10))",
								r : "(\\d{2})"
							},
							yy : {
								g : "this.getFullYear()",
								s : "this.setFullYear(parseInt('{param}', 10))",
								r : "(\\d{4})"
							},
							h : {
								g : "$.omCalendar.leftPad((this.getHours() % 12) ? this.getHours() % 12 : 12, 2, '0')",
								s : "this.setHours(parseInt('{param}', 10))",
								r : "(0[0-9]|1[0-1])"
							},
							H : {
								g : "$.omCalendar.leftPad(this.getHours(), 2, '0')",
								s : "this.setHours(parseInt('{param}', 10))",
								r : "([0-1][0-9]|2[0-3])"
							},
							g : {
								g : "((this.getHours() % 12) ? this.getHours() % 12 : 12)",
								s : "this.setHours(parseInt('{param}', 10))",
								r : "([0-9]|1[0-1])"
							},
							G : {
								g : "this.getHours()",
								s : "this.setHours(parseInt('{param}', 10))",
								r : "([0-9]|1[0-9]|2[0-3])"
							},
							i : {
								g : "$.omCalendar.leftPad(this.getMinutes(), 2, '0')",
								s : "this.setMinutes(parseInt('{param}', 10))",
								r : "([0-5][0-9])"
							},
							s : {
								g : "$.omCalendar.leftPad(this.getSeconds(), 2, '0')",
								s : "this.setSeconds(parseInt('{param}', 10))",
								r : "([0-5][0-9])"
							},
							u : {
								g : "$.omCalendar.leftPad(this.getMilliseconds(), 3, '0')",
								s : "this.setMilliseconds(parseInt('{param}', 10))",
								r : "(\\d{1,3})"
							},
							D : {
								g : "$.omCalendar.getShortDayName(this.getDay())",
								s : "",
								r : ""
							},
							DD : {
								g : "$.omCalendar.getDayName(this.getDay())",
								s : "",
								r : ""
							},
							M : {
								g : "$.omCalendar.getShortMonthName(this.getMonth())",
								s : "",
								r : ""
							},
							MM : {
								g : "$.omCalendar.getMonthName(this.getMonth())",
								s : "",
								r : ""
							},
							a : {
								g : "(this.getHours() < 12 ? 'am' : 'pm')",
								s : "",
								r : ""
							},
							A : {
								g : "(this.getHours() < 12 ? 'AM' : 'PM')",
								s : "",
								r : ""
							}
						}
					});
	b.extend(b.omCalendar, {
		formatDate : function(f, h) {
			if (!f || !h) {
				return null
			}
			if (!(Object.prototype.toString.call(f) === "[object Date]")) {
				return null
			}
			var g, k, e = "", j = false;
			for (g = 0; g < h.length; g++) {
				k = h.charAt(g);
				fi_next = h.charAt(g + 1);
				if (k == "'") {
					j = !j;
					continue
				}
				if (!j && b.omCalendar.formatCodes[k + fi_next]) {
					k = new Function("return "
							+ b.omCalendar.formatCodes[k + fi_next].g).call(f);
					g++
				} else {
					if (!j && b.omCalendar.formatCodes[k]) {
						k = new Function("return "
								+ b.omCalendar.formatCodes[k].g).call(f)
					}
				}
				e += k
			}
			return e
		},
		parseDate : function(k, m) {
			if (!k || !m) {
				return null
			}
			if (!(Object.prototype.toString.call(k) === "[object String]")) {
				return null
			}
			var f = [], h, o, l = null, e;
			for (h = 0; h < m.length; h++) {
				o = m.charAt(h);
				fi_next = m.charAt(h + 1);
				if (b.omCalendar.formatCodes[o + fi_next]) {
					l = b.omCalendar.formatCodes[o + fi_next];
					h++
				} else {
					if (b.omCalendar.formatCodes[o]) {
						l = b.omCalendar.formatCodes[o]
					} else {
						continue
					}
				}
				e = k.match(new RegExp(l.r));
				if (!e) {
					return null
				}
				f.push(l.s.replace("{param}", e[0]));
				k = k.substring(e.index + e[0].length);
				var j = m.charAt(h + 1);
				if (!(j == "" && k == "") && (j !== k.charAt(0))
						&& (b.omCalendar.formatCodes[j] === undefined)) {
					return null
				}
			}
			var g = new Date();
			new Function(f.join(";")).call(g);
			return g
		}
	})
})(jQuery);
(function(b) {
	var a = "_value";
	if (!Array.prototype.indexOf) {
		Array.prototype.indexOf = function(e) {
			var c = this.length;
			for ( var d = 0; d < c; d++) {
				if (this[d] === e) {
					return d
				}
			}
			return -1
		}
	}
	b
			.widget(
					"om.omCombo",
					{
						options : {
							optionField : "text",
							valueField : "value",
							width : "auto",
							disabled : false,
							readOnly : false,
							editable : true,
							lazyLoad : false,
							listMaxHeight : 300,
							listAutoWidth : false,
							autoFilter : true,
							filterStrategy : "first",
							filterDelay : 500,
							multi : false,
							multiSeparator : ","
						},
						_init : function() {
							var c = this.options, f = this.element, e = c.dataSource;
							if (c.width != "auto") {
								var d = f.parent().width(c.width);
								f.width(d.innerWidth() - f.next().outerWidth()
										- f.outerWidth() + f.width())
							}
							if (c.multi) {
								c.editable = this.options.editable = false
							}
							c.disabled ? f.attr("disabled", true) : f
									.removeAttr("disabled");
							(c.readOnly || !c.editable) ? f.attr("readonly",
									"readOnly") : f.removeAttr("readonly");
							if (!c.lazyLoad) {
								this._toggleLoading("add");
								if (e && typeof e == "string") {
									this._ajaxLoad(e)
								} else {
									if (e && typeof e == "object") {
										this._loadData(e);
										this._toggleLoading("remove")
									} else {
										this.dataHasLoaded = true;
										this._toggleLoading("remove")
									}
								}
							} else {
								this.dataHasLoaded = false
							}
							var g = c.disabled || c.readOnly;
							if (g) {
								this.expandTrigger
										.addClass("om-state-disabled")
							} else {
								this._bindEvent()
							}
						},
						_create : function() {
							var c = this.options;
							if (!c.inputField) {
								c.inputField = c.optionField
							}
							if (typeof c.value !== "undefined") {
								c.lazyLoad = false
							}
							var e = this.element;
							this._refeshEmptyText(c.emptyText);
							e.attr("autocomplete", "off");
							var d = b(
									'<span class="om-combo om-widget om-state-default"></span>')
									.insertAfter(e).wrapInner(e);
							this.expandTrigger = b(
									'<span class="om-combo-trigger"></span>')
									.appendTo(d);
							this.dropList = b(
									b(
											'<div class="om-widget"><div class="om-widget-content om-droplist"></div></div>')
											.css("position", "absolute")
											.appendTo(document.body).children()[0])
									.hide()
						},
						setData : function(e) {
							var c = this;
							var d = c.element;
							c.options.value = "";
							d.val("");
							c._toggleLoading("add");
							if (typeof e === "string") {
								c._ajaxLoad(e)
							} else {
								c._loadData(e);
								c._toggleLoading("remove")
							}
						},
						getData : function() {
							var c = this.options.dataSource;
							return (typeof c == "object") ? c : null
						},
						value : function(c) {
							if (typeof c === "undefined") {
								var d = b(this.element).attr(a);
								return d ? d : ""
							} else {
								this._setValue(c);
								return this
							}
						},
						disable : function() {
							var c = this.element;
							c.attr("disabled", true).unbind();
							this.options.disabled = true;
							this.expandTrigger.addClass("om-state-disabled")
									.unbind()
						},
						enable : function() {
							var c = this.element;
							c.removeAttr("disabled").unbind();
							this.options.disabled = false;
							this.expandTrigger.removeClass("om-state-disabled")
									.unbind();
							this._bindEvent()
						},
						_bindEvent : function() {
							var e = this;
							var g = this.options;
							var d = this.element;
							var i = d.parent("span");
							var h = this.dropList;
							var j = this.expandTrigger;
							var c = g.emptyText;
							var f = false;
							i.mouseenter(function() {
								if (!g.disabled) {
									i.addClass("om-state-hover")
								}
							}).mouseleave(function() {
								i.removeClass("om-state-hover")
							});
							d
									.focus(
											function() {
												if (f) {
													return
												}
												f = true;
												b(".om-droplist").hide();
												i.addClass("om-state-focus");
												e._refeshEmptyText(c);
												if (!e.dataHasLoaded) {
													if (!j
															.hasClass("om-loading")) {
														e._toggleLoading("add");
														if (typeof (g.dataSource) == "object") {
															e
																	._loadData(g.dataSource);
															e
																	._toggleLoading("remove")
														} else {
															if (typeof (g.dataSource) == "string") {
																e
																		._ajaxLoad(g.dataSource)
															} else {
																e.dataHasLoaded = true;
																e
																		._toggleLoading("remove")
															}
														}
													}
												}
												if (!g.disabled && !g.readOnly) {
													e._showDropList()
												}
											})
									.blur(
											function(o) {
												f = false;
												i.removeClass("om-state-focus");
												d.removeClass("om-combo-focus");
												if (!g.disabled && !g.readOnly
														&& !g.multi) {
													if (e.hasManualInput) {
														e.hasManualInput = false;
														var p = d.val();
														if (p !== "") {
															var q = b
																	.data(d,
																			"allInputText");
															var k = b
																	.data(d,
																			"allValues");
															var l = q
																	.indexOf(p);
															if (l > -1) {
																e
																		._setValue(k[l])
															} else {
																var m = d
																		.attr(a);
																l = k
																		.indexOf(m);
																if (l > -1) {
																	d.val(q[l])
																} else {
																	d.val("")
																}
															}
														}
													}
													e._refeshEmptyText(c)
												}
											})
									.keyup(
											function(l) {
												var k = l.keyCode;
												switch (k) {
												case 40:
													e._selectNext();
													break;
												case 38:
													e._selectPrev();
													break;
												case 13:
													e
															._backfill(e.dropList
																	.find(".om-state-hover"));
													break;
												case 27:
													h.hide();
													break;
												case 9:
													break;
												default:
													e.hasManualInput = true;
													if (!g.disabled
															&& !g.readOnly
															&& g.editable
															&& g.autoFilter) {
														if (window._omcomboFilterTimer) {
															clearTimeout(window._omcomboFilterTimer)
														}
														window._omcomboFilterTimer = setTimeout(
																function() {
																	if (b(
																			document)
																			.attr(
																					"activeElement").id == d
																			.attr("id")) {
																		h
																				.show()
																	}
																	e
																			._doFilter(d)
																},
																g.filterDelay)
													}
												}
											});
							i.mousedown(function(k) {
								k.stopPropagation()
							});
							h.mousedown(function(k) {
								k.stopPropagation()
							});
							j
									.click(function() {
										!j.hasClass("om-loading") && d.focus()
									})
									.mousedown(
											function() {
												!j.hasClass("om-loading")
														&& i
																.addClass("om-state-active")
											})
									.mouseup(
											function() {
												!j.hasClass("om-loading")
														&& i
																.removeClass("om-state-active")
											});
							b(document).bind("mousedown.omCombo", function() {
								h.hide()
							})
						},
						_showDropList : function() {
							var o = this.element;
							var j = this._getAllOptionsBeforeFiltered()
									.removeClass(
											"om-helper-hidden om-state-hover");
							if (j.size() <= 0) {
								return
							}
							var q = this.options;
							var c = this.dropList.scrollTop(0).css("height",
									"auto");
							var p;
							var f = o.attr(a);
							if (f !== undefined && f !== "") {
								var d = b.data(o, "allValues");
								if (q.multi) {
									var k = f.split(q.multiSeparator);
									for ( var e = 0; e < k.length; e++) {
										var g = d.indexOf(k[e]);
										if (g > -1) {
											b(
													c
															.find(
																	".om-combo-list-row")
															.get(g)).addClass(
													"om-combo-selected")
										}
									}
									valueItem = k[0]
								} else {
									var g = d ? d.indexOf(f) : -1;
									if (g > -1) {
										p = b(
												c.find(".om-combo-list-row")
														.get(g)).addClass(
												"om-combo-selected")
									}
								}
							}
							var m = c.parent(), l = o.parent();
							if (!q.listAutoWidth) {
								m.width(l.outerWidth())
							} else {
								if (b.browser.msie
										&& (b.browser.version == "7.0")
										&& !b.support.style) {
									m.width(c.show().outerWidth())
								} else {
									m.width(c.outerWidth())
								}
							}
							if (q.listMaxHeight != "auto"
									&& c.show().height() > q.listMaxHeight) {
								c.height(q.listMaxHeight).css("overflow-y",
										"auto")
							}
							var h = l.offset();
							m.css( {
								left : h.left,
								top : h.top + l.outerHeight()
							});
							c.show();
							if (p) {
								c.scrollTop(b(p).offset().top - c.offset().top)
							}
						},
						_toggleLoading : function(c) {
							if (!this.options.disabled) {
								if (c == "add") {
									this.expandTrigger.removeClass(
											"om-icon-carat-1-s").addClass(
											"om-loading")
								} else {
									if (c == "remove") {
										this.expandTrigger.removeClass(
												"om-loading").addClass(
												"om-icon-carat-1-s")
									}
								}
							}
						},
						_ajaxLoad : function(e) {
							var c = this;
							var d = this.options;
							b
									.ajax( {
										url : e,
										method : "POST",
										dataType : "json",
										success : function(f, h) {
											c.dataHasLoaded = true;
											var g = d.onSuccess;
											if (g && g(f, h) === false) {
												d.dataSource = f;
												return
											}
											c._loadData(f);
											c._toggleLoading("remove")
										},
										error : function(f, h, g) {
											c.dataHasLoaded = true;
											if (d.onError) {
												c._toggleLoading("remove");
												d.onError(f, h, g)
											} else {
												c._toggleLoading("remove");
												throw new Error(
														'An error occurred while load records from URL "'
																+ e
																+ '",the error message is:'
																+ g.message)
											}
										}
									})
						},
						_loadData : function(g) {
							var o = this.options, j = this.element;
							o.dataSource = g;
							this.dataHasLoaded = true;
							var f = o.inputField;
							var h = [];
							if (typeof f === "string") {
								b(g).each(function() {
									h.push(this[f])
								})
							} else {
								b(g).each(function(p) {
									h.push(f(this, p))
								})
							}
							b.data(j, "allInputText", h);
							var m = o.valueField;
							var d = [];
							if (typeof m === "string") {
								b(g).each(function() {
									d.push(this[m])
								})
							} else {
								b(g).each(function(p) {
									d.push(m(this, p))
								})
							}
							b.data(j, "allValues", d);
							var c = this.dropList.empty();
							if (o.listProvider) {
								var k = o.listProvider(c, g);
								if (k) {
									k.each(function() {
										b(this).addClass("om-combo-list-row")
									})
								}
							} else {
								var i = o.optionField;
								var e = "";
								var l = this;
								if (typeof i === "string") {
									b(g).each(function(p) {
										e += l._wrapText(this[o.optionField])
									})
								} else {
									b(g).each(
											function(p) {
												e += l._wrapText(o.optionField(
														this, p))
											})
								}
								if (e) {
									b(e).appendTo(c);
									c.show().css("height", "auto");
									if (o.listMaxHeight != "auto"
											&& c.height() > o.listMaxHeight) {
										c.height(o.listMaxHeight).css(
												"overflow-y", "auto")
									}
									c.hide();
									if (j.parent().hasClass("om-state-hover")) {
										l._showDropList()
									}
								}
							}
							if (o.value) {
								this._setValue(o.value)
							}
							this._bindEventsToList()
						},
						_bindEventsToList : function() {
							var d = this._getAllOptionsBeforeFiltered();
							var c = this;
							d.hover(function() {
								d.removeClass("om-state-hover");
								b(this).addClass("om-state-hover")
							}, function() {
								b(this).removeClass("om-state-hover")
							}).mousedown(function() {
								c._backfill(this)
							})
						},
						_wrapText : function(c) {
							return '<div class="om-combo-list-row">' + c
									+ "</div>"
						},
						_setValue : function(k) {
							var j = this.element;
							var f = true;
							var c = j.attr(a);
							var m = this.options;
							if (k == c) {
								f = false
							}
							var d = b.data(j, "allValues");
							var g = [], l = [];
							if (m.multi) {
								l = k.split(m.multiSeparator)
							} else {
								l.push(k)
							}
							for ( var e = 0; e < l.length; e++) {
								var h = d.indexOf(l[e]);
								if (h > -1) {
									g.push(b.data(j, "allInputText")[h])
								} else {
									j.attr(a, "").val("");
									k = ""
								}
							}
							j.attr(a, k);
							if (m.multi) {
								j.val(g.join(this.options.multiSeparator))
							} else {
								j.val(g.join(""))
							}
							var m = this.options;
							m.value = k;
							if (m.onValueChange && f) {
								m.onValueChange(j, k, c)
							}
							this._refeshEmptyText(m.emptyText)
						},
						_findHighlightItem : function() {
							var c = this.dropList;
							var d = c.find(".om-state-hover");
							if (d.length > 0) {
								return d
							}
							var e = c.find(".om-combo-selected");
							return e.length > 0 ? e[0] : e
						},
						_selectPrev : function() {
							var c = this._findHighlightItem();
							var e = this._getAllOptionsAfterFiltered();
							var g = e.index(c);
							var d = b(e[g]);
							if (g === 0) {
								g = e.length
							} else {
								if (g == -1) {
									g = e.length
								}
							}
							var f = b(e[g - 1]);
							this._highLisghtAndScrollTo(d, f)
						},
						_selectNext : function() {
							var e = this.dropList;
							if (e.css("display") == "none") {
								this._showDropList();
								return
							}
							var f = this._getAllOptionsAfterFiltered();
							var g = f.index(this._findHighlightItem());
							var d = b(f[g]);
							if (g == f.length - 1) {
								g = -1
							}
							var c = b(f[g + 1]);
							this._highLisghtAndScrollTo(d, c)
						},
						_highLisghtAndScrollTo : function(d, e) {
							var c = this.dropList;
							d.removeClass("om-state-hover");
							e.addClass("om-state-hover");
							if (e.position().top <= 0) {
								c.scrollTop(c.scrollTop() + e.position().top)
							} else {
								if (e.position().top + e.outerHeight() > c
										.height()) {
									c.scrollTop(c.scrollTop()
											+ e.position().top
											+ e.outerHeight() - c.height())
								}
							}
						},
						_backfill : function(c) {
							var k = this.element;
							var d = this.dropList;
							var l = this.options;
							var e = l.multi;
							if (e) {
								b(c).toggleClass("om-combo-selected")
										.removeClass("om-state-hover")
							} else {
								this._getAllOptionsBeforeFiltered()
										.removeClass("om-combo-selected");
								b(c).addClass("om-combo-selected")
							}
							if (d.css("display") == "none") {
								return
							}
							var j = [];
							var h = d.find(".om-combo-selected");
							for ( var g = 0; g < h.length; g++) {
								var f = b(h[g]).index();
								if (f > -1) {
									j.push(b.data(k, "allValues")[f])
								}
							}
							this._setValue(j.join(e ? l.multiSeparator : ""));
							if (!e) {
								d.hide()
							}
						},
						_getAllOptionsBeforeFiltered : function() {
							return this.dropList.find(".om-combo-list-row")
						},
						_getAllOptionsAfterFiltered : function() {
							var c = this.dropList;
							return c.find(".om-combo-list-row").not(
									c.find(".om-helper-hidden"))
						},
						_doFilter : function() {
							var i = this.element;
							var l = this.options;
							var e = l.dataSource;
							var d = l.filterStrategy;
							var j = i.val();
							var g = this._getAllOptionsBeforeFiltered();
							var h = b.data(i, "allInputText");
							var k = this;
							var f = false;
							b(e).each(
									function(m) {
										if (k._filetrPass(d, j, e[m], h[m])) {
											b(g.get(m)).removeClass(
													"om-helper-hidden");
											f = true
										} else {
											b(g.get(m)).addClass(
													"om-helper-hidden")
										}
									});
							var c = this.dropList.css("height", "auto");
							if (l.listMaxHeight != "auto"
									&& c.height() > l.listMaxHeight) {
								c.height(l.listMaxHeight).css("overflow-y",
										"auto")
							}
							if (!f) {
								c.hide()
							}
						},
						_filetrPass : function(e, g, c, f) {
							if (g === "") {
								return true
							}
							if (typeof e === "function") {
								return e(g, c)
							} else {
								if (e === "first") {
									return f.indexOf(g) === 0
								} else {
									if (e === "anywhere") {
										return f.indexOf(g) > -1
									} else {
										if (e === "last") {
											var d = f.lastIndexOf(g);
											return d > -1
													&& d + g.length == f.length
										} else {
											return false
										}
									}
								}
							}
						},
						_refeshEmptyText : function(c) {
							var d = this.element;
							if (!c) {
								return
							}
							if (d.val() === "") {
								d.val(c).addClass("om-empty-text")
							} else {
								if (d.val() === c) {
									d.val("")
								}
								d.removeClass("om-empty-text")
							}
						}
					})
})(jQuery);
(function(e, f) {
	var c = "om-dialog om-widget om-widget-content om-corner-all ", b = {
		buttons : true,
		height : true,
		maxHeight : true,
		maxWidth : true,
		minHeight : true,
		minWidth : true,
		width : true
	}, d = {
		maxHeight : true,
		maxWidth : true,
		minHeight : true,
		minWidth : true
	}, a = e.attrFn || {
		val : true,
		css : true,
		html : true,
		text : true,
		data : true,
		width : true,
		height : true,
		offset : true,
		click : true
	};
	e
			.widget(
					"om.omDialog",
					{
						options : {
							autoOpen : true,
							buttons : {},
							closeOnEscape : true,
							closeText : "close",
							dialogClass : "",
							draggable : true,
							hide : null,
							height : "auto",
							maxHeight : false,
							maxWidth : false,
							minHeight : 150,
							minWidth : 150,
							modal : false,
							position : {
								my : "center",
								at : "center",
								collision : "fit",
								using : function(h) {
									var g = e(this).css(h).offset().top;
									if (g < 0) {
										e(this).css("top", h.top - g)
									}
								}
							},
							resizable : true,
							show : null,
							stack : true,
							title : "",
							width : 300,
							zIndex : 1000
						},
						_create : function() {
							this.originalTitle = this.element.attr("title");
							if (typeof this.originalTitle !== "string") {
								this.originalTitle = ""
							}
							this.options.title = this.options.title
									|| this.originalTitle;
							var p = this, q = p.options, m = q.title
									|| "&#160;", h = e.om.omDialog
									.getTitleId(p.element), o = (p.uiDialog = e("<div></div>"))
									.appendTo(document.body)
									.hide()
									.addClass(c + q.dialogClass)
									.css( {
										zIndex : q.zIndex
									})
									.attr("tabIndex", -1)
									.css("outline", 0)
									.keydown(
											function(r) {
												if (q.closeOnEscape
														&& r.keyCode
														&& r.keyCode === e.ui.keyCode.ESCAPE) {
													p.close(r);
													r.preventDefault()
												}
											}).attr( {
										role : "dialog",
										"aria-labelledby" : h
									}).mousedown(function(r) {
										p.moveToTop(false, r)
									}), j = p.element
									.show()
									.removeAttr("title")
									.addClass(
											"om-dialog-content om-widget-content")
									.appendTo(o), i = (p.uiDialogTitlebar = e("<div></div>"))
									.addClass(
											"om-dialog-titlebar om-widget-header om-corner-all om-helper-clearfix")
									.prependTo(o), l = e('<a href="#"></a>')
									.addClass(
											"om-dialog-titlebar-close om-corner-all")
									.attr("role", "button").hover(function() {
										l.addClass("om-state-hover")
									}, function() {
										l.removeClass("om-state-hover")
									}).focus(function() {
										l.addClass("om-state-focus")
									}).blur(function() {
										l.removeClass("om-state-focus")
									}).click(function(r) {
										p.close(r);
										return false
									}).appendTo(i), k = (p.uiDialogTitlebarCloseText = e("<span></span>"))
									.addClass("om-icon-closethick").text(
											q.closeText).appendTo(l), g = e(
									"<span></span>")
									.addClass("om-dialog-title").attr("id", h)
									.html(m).prependTo(i);
							i.find("*").add(i).disableSelection();
							if (q.draggable && e.om.omDraggable) {
								p._makeDraggable()
							}
							if (q.resizable && e.fn.resizable) {
								p._makeResizable()
							}
							p._createButtons(q.buttons);
							p._isOpen = false;
							if (e.fn.bgiframe) {
								o.bgiframe()
							}
						},
						_init : function() {
							if (this.options.autoOpen) {
								this.open()
							}
						},
						destroy : function() {
							var g = this;
							if (g.overlay) {
								g.overlay.destroy()
							}
							g.uiDialog.hide();
							g.element
									.unbind(".dialog")
									.removeData("dialog")
									.removeClass(
											"om-dialog-content om-widget-content")
									.hide().appendTo("body");
							g.uiDialog.remove();
							if (g.originalTitle) {
								g.element.attr("title", g.originalTitle)
							}
							return g
						},
						widget : function() {
							return this.uiDialog
						},
						close : function(m) {
							var i = this, l, k, j = this.options, g = j.onBeforeClose, h = j.onClose;
							if (g && false === g.call(i.element, m)) {
								return
							}
							if (i.overlay) {
								i.overlay.destroy()
							}
							i.uiDialog.unbind("keypress.om-dialog");
							i._isOpen = false;
							if (i.options.hide) {
								i.uiDialog.hide(i.options.hide, function() {
									h && h.call(i.element, m)
								})
							} else {
								i.uiDialog.hide();
								h && h.call(i.element, m)
							}
							e.om.omDialog.overlay.resize();
							if (i.options.modal) {
								l = 0;
								e(".om-dialog").each(function() {
									if (this !== i.uiDialog[0]) {
										k = e(this).css("z-index");
										if (!isNaN(k)) {
											l = Math.max(l, k)
										}
									}
								});
								e.om.omDialog.maxZ = l
							}
							return i
						},
						isOpen : function() {
							return this._isOpen
						},
						moveToTop : function(k, j) {
							var g = this, i = g.options, h;
							if ((i.modal && !k) || (!i.stack && !i.modal)) {
								return g._trigger("onFocus", j)
							}
							if (i.zIndex > e.om.omDialog.maxZ) {
								e.om.omDialog.maxZ = i.zIndex
							}
							if (g.overlay) {
								e.om.omDialog.maxZ += 1;
								g.overlay.$el
										.css(
												"z-index",
												e.om.omDialog.overlay.maxZ = e.om.omDialog.maxZ)
							}
							h = {
								scrollTop : g.element.scrollTop(),
								scrollLeft : g.element.scrollLeft()
							};
							e.om.omDialog.maxZ += 1;
							g.uiDialog.css("z-index", e.om.omDialog.maxZ);
							g.element.attr(h);
							g._trigger("onFocus", j);
							return g
						},
						open : function() {
							if (this._isOpen) {
								return
							}
							var i = this, j = i.options, h = i.uiDialog;
							i.overlay = j.modal ? new e.om.omDialog.overlay(i)
									: null;
							i._size();
							i._position(j.position);
							h.show(j.show);
							i.moveToTop(true);
							if (j.modal) {
								h.bind("keypress.om-dialog", function(m) {
									if (m.keyCode !== e.ui.keyCode.TAB) {
										return
									}
									var l = e(":tabbable", this), o = l
											.filter(":first"), k = l
											.filter(":last");
									if (m.target === k[0] && !m.shiftKey) {
										o.focus(1);
										return false
									} else {
										if (m.target === o[0] && m.shiftKey) {
											k.focus(1);
											return false
										}
									}
								})
							}
							e(
									i.element
											.find(":tabbable")
											.get()
											.concat(
													h
															.find(
																	".om-dialog-buttonpane :tabbable")
															.get().concat(
																	h.get())))
									.eq(0).focus();
							i._isOpen = true;
							var g = j.onOpen;
							if (g) {
								g.call(i.element)
							}
							return i
						},
						_createButtons : function(j) {
							var i = this, g = false, h = e("<div></div>")
									.addClass(
											"om-dialog-buttonpane om-widget-content om-helper-clearfix"), k = e(
									"<div></div>").addClass(
									"om-dialog-buttonset").appendTo(h);
							i.uiDialog.find(".om-dialog-buttonpane").remove();
							if (typeof j === "object" && j !== null) {
								e.each(j, function() {
									return !(g = true)
								})
							}
							if (g) {
								e
										.each(
												j,
												function(l, o) {
													o = e.isFunction(o) ? {
														click : o,
														text : l
													} : o;
													var m = e(
															'<button type="button"></button>')
															.click(
																	function() {
																		o.click
																				.apply(
																						i.element[0],
																						arguments)
																	})
															.appendTo(k);
													e.each(o, function(p, q) {
														if (p === "click") {
															return
														}
														if (p in a) {
															m[p](q)
														} else {
															m.attr(p, q)
														}
													});
													if (e.fn.omButton) {
														m.omButton()
													}
												});
								h.appendTo(i.uiDialog)
							}
						},
						_makeDraggable : function() {
							var g = this, j = g.options, k = e(document), i;
							function h(l) {
								return {
									position : l.position,
									offset : l.offset
								}
							}
							g.uiDialog
									.omDraggable( {
										cancel : ".om-dialog-content, .om-dialog-titlebar-close",
										handle : ".om-dialog-titlebar",
										containment : "document",
										cursor : "move",
										onStart : function(l, m) {
											i = j.height === "auto" ? "auto"
													: e(this).height();
											e(this)
													.height(e(this).height())
													.addClass(
															"om-dialog-dragging");
											g._trigger("onDragStart", l, h(m))
										},
										onDrag : function(l, m) {
											g._trigger("onDrag", l, h(m))
										},
										onStop : function(l, m) {
											j.position = [
													m.position.left
															- k.scrollLeft(),
													m.position.top
															- k.scrollTop() ];
											e(this).removeClass(
													"om-dialog-dragging")
													.height(i);
											g._trigger("onDragStop", l, h(m));
											e.om.omDialog.overlay.resize()
										}
									})
						},
						_makeResizable : function(l) {
							l = (l === f ? this.options.resizable : l);
							var h = this, k = h.options, g = h.uiDialog
									.css("position"), j = (typeof l === "string" ? l
									: "n,e,s,w,se,sw,ne,nw");
							function i(m) {
								return {
									originalPosition : m.originalPosition,
									originalSize : m.originalSize,
									position : m.position,
									size : m.size
								}
							}
							h.uiDialog.resizable( {
								cancel : ".om-dialog-content",
								containment : "document",
								alsoResize : h.element,
								maxWidth : k.maxWidth,
								maxHeight : k.maxHeight,
								minWidth : k.minWidth,
								minHeight : h._minHeight(),
								handles : j,
								start : function(m, o) {
									e(this).addClass("om-dialog-resizing");
									h._trigger("onResizeStart", m, i(o))
								},
								resize : function(m, o) {
									h._trigger("onResize", m, i(o))
								},
								stop : function(m, o) {
									e(this).removeClass("om-dialog-resizing");
									k.height = e(this).height();
									k.width = e(this).width();
									h._trigger("onResizeStop", m, i(o));
									e.om.omDialog.overlay.resize()
								}
							}).css("position", g).find(".om-resizable-se")
									.addClass(
											"om-icon om-icon-grip-diagonal-se")
						},
						_minHeight : function() {
							var g = this.options;
							if (g.height === "auto") {
								return g.minHeight
							} else {
								return Math.min(g.minHeight, g.height)
							}
						},
						_position : function(h) {
							var i = [], j = [ 0, 0 ], g;
							if (h) {
								if (typeof h === "string"
										|| (typeof h === "object" && "0" in h)) {
									i = h.split ? h.split(" ") : [ h[0], h[1] ];
									if (i.length === 1) {
										i[1] = i[0]
									}
									e.each( [ "left", "top" ], function(l, k) {
										if (+i[l] === i[l]) {
											j[l] = i[l];
											i[l] = k
										}
									});
									h = {
										my : i.join(" "),
										at : i.join(" "),
										offset : j.join(" ")
									}
								}
								h = e
										.extend(
												{},
												e.om.omDialog.prototype.options.position,
												h)
							} else {
								h = e.om.omDialog.prototype.options.position
							}
							g = this.uiDialog.is(":visible");
							if (!g) {
								this.uiDialog.show()
							}
							this.uiDialog.css( {
								top : 0,
								left : 0
							}).position(e.extend( {
								of : window
							}, h));
							if (!g) {
								this.uiDialog.hide()
							}
						},
						_setOptions : function(j) {
							var h = this, g = {}, i = false;
							e.each(j, function(k, l) {
								h._setOption(k, l);
								if (k in b) {
									i = true
								}
								if (k in d) {
									g[k] = l
								}
							});
							if (i) {
								this._size()
							}
							if (this.uiDialog.is(":data(resizable)")) {
								this.uiDialog.resizable("option", g)
							}
						},
						_setOption : function(j, k) {
							var h = this, g = h.uiDialog;
							switch (j) {
							case "buttons":
								h._createButtons(k);
								break;
							case "closeText":
								h.uiDialogTitlebarCloseText.text("" + k);
								break;
							case "dialogClass":
								g.removeClass(h.options.dialogClass).addClass(
										c + k);
								break;
							case "disabled":
								if (k) {
									g.addClass("om-dialog-disabled")
								} else {
									g.removeClass("om-dialog-disabled")
								}
								break;
							case "draggable":
								var i = g.is(":data(draggable)");
								if (i && !k) {
									g.omDraggable("destroy")
								}
								if (!i && k) {
									h._makeDraggable()
								}
								break;
							case "position":
								h._position(k);
								break;
							case "resizable":
								var l = g.is(":data(resizable)");
								if (l && !k) {
									g.resizable("destroy")
								}
								if (l && typeof k === "string") {
									g.resizable("option", "handles", k)
								}
								if (!l && k !== false) {
									h._makeResizable(k)
								}
								break;
							case "title":
								e(".om-dialog-title", h.uiDialogTitlebar).html(
										"" + (k || "&#160;"));
								break
							}
							e.Widget.prototype._setOption.apply(h, arguments)
						},
						_size : function() {
							var k = this.options, h, j, g = this.uiDialog
									.is(":visible");
							this.element.show().css( {
								width : "auto",
								minHeight : 0,
								height : 0
							});
							if (k.minWidth > k.width) {
								k.width = k.minWidth
							}
							h = this.uiDialog.css( {
								height : "auto",
								width : k.width
							}).height();
							j = Math.max(0, k.minHeight - h);
							if (k.height === "auto") {
								if (e.support.minHeight) {
									this.element.css( {
										minHeight : j,
										height : "auto"
									})
								} else {
									this.uiDialog.show();
									var i = this.element.css("height", "auto")
											.height();
									if (!g) {
										this.uiDialog.hide()
									}
									this.element.height(Math.max(i, j))
								}
							} else {
								this.element.height(Math.max(k.height - h, 0))
							}
							if (this.uiDialog.is(":data(resizable)")) {
								this.uiDialog.resizable("option", "minHeight",
										this._minHeight())
							}
						}
					});
	e.extend(e.om.omDialog, {
		version : "1.0",
		uuid : 0,
		maxZ : 0,
		getTitleId : function(g) {
			var h = g.attr("id");
			if (!h) {
				this.uuid += 1;
				h = this.uuid
			}
			return "ui-dialog-title-" + h
		},
		overlay : function(g) {
			this.$el = e.om.omDialog.overlay.create(g)
		}
	});
	e
			.extend(
					e.om.omDialog.overlay,
					{
						instances : [],
						oldInstances : [],
						maxZ : 0,
						events : e.map(
								"focus,mousedown,mouseup,keydown,keypress,click"
										.split(","), function(g) {
									return g + ".dialog-overlay"
								}).join(" "),
						create : function(h) {
							if (this.instances.length === 0) {
								setTimeout(
										function() {
											if (e.om.omDialog.overlay.instances.length) {
												e(document)
														.bind(
																e.om.omDialog.overlay.events,
																function(i) {
																	if (e(
																			i.target)
																			.zIndex() < e.om.omDialog.overlay.maxZ) {
																		return false
																	}
																})
											}
										}, 1);
								e(document)
										.bind(
												"keydown.dialog-overlay",
												function(i) {
													if (h.options.closeOnEscape
															&& i.keyCode
															&& i.keyCode === e.ui.keyCode.ESCAPE) {
														h.close(i);
														i.preventDefault()
													}
												});
								e(window).bind("resize.dialog-overlay",
										e.om.omDialog.overlay.resize)
							}
							var g = (this.oldInstances.pop() || e("<div></div>")
									.addClass("om-widget-overlay")).appendTo(
									document.body).css( {
								width : this.width(),
								height : this.height()
							});
							if (e.fn.bgiframe) {
								g.bgiframe()
							}
							this.instances.push(g);
							return g
						},
						destroy : function(g) {
							var h = e.inArray(g, this.instances);
							if (h != -1) {
								this.oldInstances.push(this.instances.splice(h,
										1)[0])
							}
							if (this.instances.length === 0) {
								e( [ document, window ]).unbind(
										".dialog-overlay")
							}
							g.remove();
							var i = 0;
							e.each(this.instances, function() {
								i = Math.max(i, this.css("z-index"))
							});
							this.maxZ = i
						},
						height : function() {
							var h, g;
							if (e.browser.msie && e.browser.version < 7) {
								h = Math.max(
										document.documentElement.scrollHeight,
										document.body.scrollHeight);
								g = Math.max(
										document.documentElement.offsetHeight,
										document.body.offsetHeight);
								if (h < g) {
									return e(window).height() + "px"
								} else {
									return h + "px"
								}
							} else {
								return e(document).height() + "px"
							}
						},
						width : function() {
							var g, h;
							if (e.browser.msie) {
								g = Math.max(
										document.documentElement.scrollWidth,
										document.body.scrollWidth);
								h = Math.max(
										document.documentElement.offsetWidth,
										document.body.offsetWidth);
								if (g < h) {
									return e(window).width() + "px"
								} else {
									return g + "px"
								}
							} else {
								return e(document).width() + "px"
							}
						},
						resize : function() {
							var g = e( []);
							e.each(e.om.omDialog.overlay.instances, function() {
								g = g.add(this)
							});
							g.css( {
								width : 0,
								height : 0
							}).css( {
								width : e.om.omDialog.overlay.width(),
								height : e.om.omDialog.overlay.height()
							})
						}
					});
	e.extend(e.om.omDialog.overlay.prototype, {
		destroy : function() {
			e.om.omDialog.overlay.destroy(this.$el)
		}
	})
}(jQuery));
(function(a, b) {
	a
			.widget(
					"om.omDraggable",
					a.ui.mouse,
					{
						widgetEventPrefix : "drag",
						options : {
							axis : false,
							containment : false,
							cursor : "auto",
							_scope : "default",
							handle : false,
							helper : "original",
							revert : false,
							scroll : true
						},
						_create : function() {
							if (this.options.helper == "original"
									&& !(/^(?:r|a|f)/).test(this.element
											.css("position"))) {
								this.element[0].style.position = "relative"
							}
							this.element.addClass("om-draggable");
							(this.options.disabled && this.element
									.addClass("om-draggable-disabled"));
							this._mouseInit()
						},
						destroy : function() {
							if (!this.element.data("omDraggable")) {
								return
							}
							this.element
									.removeData("omDraggable")
									.unbind(".draggable")
									.removeClass(
											"om-draggable om-draggable-dragging om-draggable-disabled");
							this._mouseDestroy();
							return this
						},
						_mouseCapture : function(c) {
							var d = this.options;
							if (this.helper || d.disabled
									|| a(c.target).is(".om-resizable-handle")) {
								return false
							}
							this.handle = this._getHandle(c);
							if (!this.handle) {
								return false
							}
							return true
						},
						_mouseStart : function(c) {
							var d = this.options;
							this.helper = this._createHelper(c);
							this._cacheHelperProportions();
							if (a.ui.ddmanager) {
								a.ui.ddmanager.current = this
							}
							this._cacheMargins();
							this.cssPosition = this.helper.css("position");
							this.scrollParent = this.helper.scrollParent();
							this.offset = this.positionAbs = this.element
									.offset();
							this.offset = {
								top : this.offset.top - this.margins.top,
								left : this.offset.left - this.margins.left
							};
							a.extend(this.offset, {
								click : {
									left : c.pageX - this.offset.left,
									top : c.pageY - this.offset.top
								},
								parent : this._getParentOffset(),
								relative : this._getRelativeOffset()
							});
							this.originalPosition = this.position = this
									._generatePosition(c);
							this.originalPageX = c.pageX;
							this.originalPageY = c.pageY;
							if (d.containment) {
								this._setContainment()
							}
							if (this._trigger("onStart", c) === false) {
								this._clear();
								return false
							}
							this._cacheHelperProportions();
							if (a.ui.ddmanager && !d.dropBehaviour) {
								a.ui.ddmanager.prepareOffsets(this, c)
							}
							this.helper.addClass("om-draggable-dragging");
							this._mouseDrag(c, true);
							if (a.ui.ddmanager) {
								a.ui.ddmanager.dragStart(this, c)
							}
							return true
						},
						_mouseDrag : function(c, e) {
							this.position = this._generatePosition(c);
							this.positionAbs = this
									._convertPositionTo("absolute");
							if (!e) {
								var d = this._uiHash();
								if (this._trigger("onDrag", c, d) === false) {
									this._mouseUp( {});
									return false
								}
								this.position = d.position
							}
							if (!this.options.axis || this.options.axis != "y") {
								this.helper[0].style.left = this.position.left
										+ "px"
							}
							if (!this.options.axis || this.options.axis != "x") {
								this.helper[0].style.top = this.position.top
										+ "px"
							}
							if (a.ui.ddmanager) {
								a.ui.ddmanager.drag(this, c)
							}
							return false
						},
						_mouseStop : function(d) {
							var e = false;
							if (a.ui.ddmanager && !this.options.dropBehaviour) {
								e = a.ui.ddmanager.drop(this, d)
							}
							if (this.dropped) {
								e = this.dropped;
								this.dropped = false
							}
							if ((!this.element[0] || !this.element[0].parentNode)
									&& this.options.helper == "original") {
								return false
							}
							if ((this.options.revert == "invalid" && !e)
									|| (this.options.revert == "valid" && e)
									|| this.options.revert === true
									|| (a.isFunction(this.options.revert) && this.options.revert
											.call(this.element, e))) {
								var c = this;
								a(this.helper)
										.animate(
												this.originalPosition,
												500,
												function() {
													if (c._trigger("onStop", d) !== false) {
														c._clear()
													}
												})
							} else {
								if (this._trigger("onStop", d) !== false) {
									this._clear()
								}
							}
							return false
						},
						_mouseUp : function(c) {
							if (a.ui.ddmanager) {
								a.ui.ddmanager.dragStop(this, c)
							}
							return a.ui.mouse.prototype._mouseUp.call(this, c)
						},
						cancel : function() {
							if (this.helper.is(".om-draggable-dragging")) {
								this._mouseUp( {})
							} else {
								this._clear()
							}
							return this
						},
						_getHandle : function(c) {
							var d = !this.options.handle
									|| !a(this.options.handle, this.element).length ? true
									: false;
							a(this.options.handle, this.element).find("*")
									.andSelf().each(function() {
										if (this == c.target) {
											d = true
										}
									});
							return d
						},
						_createHelper : function(d) {
							var e = this.options;
							var c = a.isFunction(e.helper) ? a(e.helper.apply(
									this.element[0], [ d ]))
									: (e.helper == "clone" ? this.element
											.clone().removeAttr("id")
											: this.element);
							if (!c.parents("body").length) {
								c.appendTo(this.element[0].parentNode)
							}
							if (c[0] != this.element[0]
									&& !(/(fixed|absolute)/).test(c
											.css("position"))) {
								c.css("position", "absolute")
							}
							return c
						},
						_getParentOffset : function() {
							this.offsetParent = this.helper.offsetParent();
							var c = this.offsetParent.offset();
							if (this.cssPosition == "absolute"
									&& this.scrollParent[0] != document
									&& a.ui.contains(this.scrollParent[0],
											this.offsetParent[0])) {
								c.left += this.scrollParent.scrollLeft();
								c.top += this.scrollParent.scrollTop()
							}
							if ((this.offsetParent[0] == document.body)
									|| (this.offsetParent[0].tagName
											&& this.offsetParent[0].tagName
													.toLowerCase() == "html" && a.browser.msie)) {
								c = {
									top : 0,
									left : 0
								}
							}
							return {
								top : c.top
										+ (parseInt(this.offsetParent
												.css("borderTopWidth"), 10) || 0),
								left : c.left
										+ (parseInt(this.offsetParent
												.css("borderLeftWidth"), 10) || 0)
							}
						},
						_getRelativeOffset : function() {
							if (this.cssPosition == "relative") {
								var c = this.element.position();
								return {
									top : c.top
											- (parseInt(this.helper.css("top"),
													10) || 0)
											+ this.scrollParent.scrollTop(),
									left : c.left
											- (parseInt(
													this.helper.css("left"), 10) || 0)
											+ this.scrollParent.scrollLeft()
								}
							} else {
								return {
									top : 0,
									left : 0
								}
							}
						},
						_cacheMargins : function() {
							this.margins = {
								left : (parseInt(
										this.element.css("marginLeft"), 10) || 0),
								top : (parseInt(this.element.css("marginTop"),
										10) || 0),
								right : (parseInt(this.element
										.css("marginRight"), 10) || 0),
								bottom : (parseInt(this.element
										.css("marginBottom"), 10) || 0)
							}
						},
						_cacheHelperProportions : function() {
							this.helperProportions = {
								width : this.helper.outerWidth(),
								height : this.helper.outerHeight()
							}
						},
						_setContainment : function() {
							var g = this.options;
							if (g.containment == "parent") {
								g.containment = this.helper[0].parentNode
							}
							if (g.containment == "document"
									|| g.containment == "window") {
								this.containment = [
										g.containment == "document" ? 0 : a(
												window).scrollLeft()
												- this.offset.relative.left
												- this.offset.parent.left,
										g.containment == "document" ? 0 : a(
												window).scrollTop()
												- this.offset.relative.top
												- this.offset.parent.top,
										(g.containment == "document" ? 0 : a(
												window).scrollLeft())
												+ a(
														g.containment == "document" ? document
																: window)
														.width()
												- this.helperProportions.width
												- this.margins.left,
										(g.containment == "document" ? 0 : a(
												window).scrollTop())
												+ (a(
														g.containment == "document" ? document
																: window)
														.height() || document.body.parentNode.scrollHeight)
												- this.helperProportions.height
												- this.margins.top ]
							}
							if (!(/^(document|window|parent)$/)
									.test(g.containment)
									&& g.containment.constructor != Array) {
								var h = a(g.containment);
								var e = h[0];
								if (!e) {
									return
								}
								var f = h.offset();
								var d = (a(e).css("overflow") != "hidden");
								this.containment = [
										(parseInt(a(e).css("borderLeftWidth"),
												10) || 0)
												+ (parseInt(a(e).css(
														"paddingLeft"), 10) || 0),
										(parseInt(a(e).css("borderTopWidth"),
												10) || 0)
												+ (parseInt(a(e).css(
														"paddingTop"), 10) || 0),
										(d ? Math.max(e.scrollWidth,
												e.offsetWidth) : e.offsetWidth)
												- (parseInt(a(e).css(
														"borderLeftWidth"), 10) || 0)
												- (parseInt(a(e).css(
														"paddingRight"), 10) || 0)
												- this.helperProportions.width
												- this.margins.left
												- this.margins.right,
										(d ? Math.max(e.scrollHeight,
												e.offsetHeight)
												: e.offsetHeight)
												- (parseInt(a(e).css(
														"borderTopWidth"), 10) || 0)
												- (parseInt(a(e).css(
														"paddingBottom"), 10) || 0)
												- this.helperProportions.height
												- this.margins.top
												- this.margins.bottom ];
								this.relative_container = h
							} else {
								if (g.containment.constructor == Array) {
									this.containment = g.containment
								}
							}
						},
						_convertPositionTo : function(g, i) {
							if (!i) {
								i = this.position
							}
							var e = g == "absolute" ? 1 : -1;
							var f = this.options, c = this.cssPosition == "absolute"
									&& !(this.scrollParent[0] != document && a.ui
											.contains(this.scrollParent[0],
													this.offsetParent[0])) ? this.offsetParent
									: this.scrollParent, h = (/(html|body)/i)
									.test(c[0].tagName);
							return {
								top : (i.top + this.offset.relative.top * e
										+ this.offset.parent.top * e - (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollTop()
												: (h ? 0 : c.scrollTop()))
												* e)),
								left : (i.left + this.offset.relative.left * e
										+ this.offset.parent.left * e - (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollLeft()
												: h ? 0 : c.scrollLeft())
												* e))
							}
						},
						_generatePosition : function(f) {
							var h = this.options, c = this.cssPosition == "absolute"
									&& !(this.scrollParent[0] != document && a.ui
											.contains(this.scrollParent[0],
													this.offsetParent[0])) ? this.offsetParent
									: this.scrollParent, j = (/(html|body)/i)
									.test(c[0].tagName);
							var e = f.pageX;
							var d = f.pageY;
							if (this.originalPosition) {
								var i;
								if (this.containment) {
									if (this.relative_container) {
										var g = this.relative_container
												.offset();
										i = [ this.containment[0] + g.left,
												this.containment[1] + g.top,
												this.containment[2] + g.left,
												this.containment[3] + g.top ]
									} else {
										i = this.containment
									}
									if (f.pageX - this.offset.click.left < i[0]) {
										e = i[0] + this.offset.click.left
									}
									if (f.pageY - this.offset.click.top < i[1]) {
										d = i[1] + this.offset.click.top
									}
									if (f.pageX - this.offset.click.left > i[2]) {
										e = i[2] + this.offset.click.left
									}
									if (f.pageY - this.offset.click.top > i[3]) {
										d = i[3] + this.offset.click.top
									}
								}
							}
							return {
								top : (d - this.offset.click.top
										- this.offset.relative.top
										- this.offset.parent.top + (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollTop()
												: (j ? 0 : c.scrollTop())))),
								left : (e - this.offset.click.left
										- this.offset.relative.left
										- this.offset.parent.left + (a.browser.safari
										&& a.browser.version < 526
										&& this.cssPosition == "fixed" ? 0
										: (this.cssPosition == "fixed" ? -this.scrollParent
												.scrollLeft()
												: j ? 0 : c.scrollLeft())))
							}
						},
						_clear : function() {
							this.helper.removeClass("om-draggable-dragging");
							if (this.helper[0] != this.element[0]
									&& !this.cancelHelperRemoval) {
								this.helper.remove()
							}
							this.helper = null;
							this.cancelHelperRemoval = false
						},
						_trigger : function(c, d, e) {
							e = e || this._uiHash();
							a.ui.plugin.call(this, c, [ d, e ]);
							if (c == "onDrag") {
								this.positionAbs = this
										._convertPositionTo("absolute")
							}
							return a.Widget.prototype._trigger.call(this, c, d,
									e)
						},
						plugins : {},
						_uiHash : function(c) {
							return {
								helper : this.helper,
								position : this.position,
								originalPosition : this.originalPosition,
								offset : this.positionAbs
							}
						}
					});
	a.ui.plugin.add("omDraggable", "cursor", {
		onStart : function(d, e) {
			var c = a("body"), f = a(this).data("omDraggable").options;
			if (c.css("cursor")) {
				f._cursor = c.css("cursor")
			}
			c.css("cursor", f.cursor)
		},
		onStop : function(d, e) {
			var c = a(this).data("omDraggable");
			if (c) {
				var f = c.options;
				if (f._cursor) {
					a("body").css("cursor", f._cursor)
				}
			}
		}
	});
	a.ui.plugin
			.add(
					"omDraggable",
					"scroll",
					{
						onStart : function(d, e) {
							var c = a(this).data("omDraggable");
							if (c.scrollParent[0] != document
									&& c.scrollParent[0].tagName != "HTML") {
								c.overflowOffset = c.scrollParent.offset()
							}
						},
						onDrag : function(g, h) {
							var e = a(this).data("omDraggable"), j = e.options, c = false, d = 20, f = 20;
							if (e.scrollParent[0] != document
									&& e.scrollParent[0].tagName != "HTML") {
								if (!j.axis || j.axis != "x") {
									if ((e.overflowOffset.top + e.scrollParent[0].offsetHeight)
											- g.pageY < d) {
										e.scrollParent[0].scrollTop = c = e.scrollParent[0].scrollTop
												+ f
									} else {
										if (g.pageY - e.overflowOffset.top < d) {
											e.scrollParent[0].scrollTop = c = e.scrollParent[0].scrollTop
													- f
										}
									}
								}
								if (!j.axis || j.axis != "y") {
									if ((e.overflowOffset.left + e.scrollParent[0].offsetWidth)
											- g.pageX < d) {
										e.scrollParent[0].scrollLeft = c = e.scrollParent[0].scrollLeft
												+ f
									} else {
										if (g.pageX - e.overflowOffset.left < d) {
											e.scrollParent[0].scrollLeft = c = e.scrollParent[0].scrollLeft
													- f
										}
									}
								}
							} else {
								if (!j.axis || j.axis != "x") {
									if (g.pageY - a(document).scrollTop() < d) {
										c = a(document).scrollTop(
												a(document).scrollTop() - f)
									} else {
										if (a(window).height()
												- (g.pageY - a(document)
														.scrollTop()) < d) {
											c = a(document)
													.scrollTop(
															a(document)
																	.scrollTop()
																	+ f)
										}
									}
								}
								if (!j.axis || j.axis != "y") {
									if (g.pageX - a(document).scrollLeft() < d) {
										c = a(document).scrollLeft(
												a(document).scrollLeft() - f)
									} else {
										if (a(window).width()
												- (g.pageX - a(document)
														.scrollLeft()) < d) {
											c = a(document).scrollLeft(
													a(document).scrollLeft()
															+ f)
										}
									}
								}
							}
							if (c !== false && a.ui.ddmanager
									&& !j.dropBehaviour) {
								a.ui.ddmanager.prepareOffsets(e, g)
							}
						}
					})
})(jQuery);
(function(a, b) {
	a
			.widget(
					"om.omDroppable",
					{
						widgetEventPrefix : "drop",
						options : {
							accept : "*",
							activeClass : false,
							greedy : false,
							hoverClass : false,
							_scope : "default"
						},
						_create : function() {
							var d = this.options, c = d.accept;
							this.isover = 0;
							this.isout = 1;
							this.accept = a.isFunction(c) ? c : function(e) {
								return e.is(c)
							};
							this.proportions = {
								width : this.element[0].offsetWidth,
								height : this.element[0].offsetHeight
							};
							a.ui.ddmanager.droppables[d._scope] = a.ui.ddmanager.droppables[d._scope]
									|| [];
							a.ui.ddmanager.droppables[d._scope].push(this);
							this.element.addClass("om-droppable")
						},
						destroy : function() {
							var c = a.ui.ddmanager.droppables[this.options._scope];
							for ( var d = 0; d < c.length; d++) {
								if (c[d] == this) {
									c.splice(d, 1)
								}
							}
							this.element.removeClass(
									"om-droppable om-droppable-disabled")
									.removeData("omDroppable").unbind(
											".droppable");
							return this
						},
						_setOption : function(c, d) {
							if (c == "accept") {
								this.accept = a.isFunction(d) ? d
										: function(e) {
											return e.is(d)
										}
							}
							a.Widget.prototype._setOption
									.apply(this, arguments)
						},
						_activate : function(d) {
							var c = a.ui.ddmanager.current;
							if (this.options.activeClass) {
								this.element.addClass(this.options.activeClass)
							}
							(c && this._trigger("onDragStart", d, c.currentItem
									|| c.element))
						},
						_deactivate : function(d) {
							var c = a.ui.ddmanager.current;
							if (this.options.activeClass) {
								this.element
										.removeClass(this.options.activeClass)
							}
						},
						_over : function(d) {
							var c = a.ui.ddmanager.current;
							if (!c
									|| (c.currentItem || c.element)[0] == this.element[0]) {
								return
							}
							if (this.accept.call(this.element[0],
									(c.currentItem || c.element))) {
								if (this.options.hoverClass) {
									this.element
											.addClass(this.options.hoverClass)
								}
								this._trigger("onDragOver", d, c.currentItem
										|| c.element)
							}
						},
						_out : function(d) {
							var c = a.ui.ddmanager.current;
							if (!c
									|| (c.currentItem || c.element)[0] == this.element[0]) {
								return
							}
							if (this.accept.call(this.element[0],
									(c.currentItem || c.element))) {
								if (this.options.hoverClass) {
									this.element
											.removeClass(this.options.hoverClass)
								}
								this._trigger("onDragOut", d, c.currentItem
										|| c.element)
							}
						},
						_drop : function(d, e) {
							var c = e || a.ui.ddmanager.current;
							if (!c
									|| (c.currentItem || c.element)[0] == this.element[0]) {
								return false
							}
							var f = false;
							this.element
									.find(":data(omDroppable)")
									.not(".om-draggable-dragging")
									.each(
											function() {
												var g = a.data(this,
														"omDroppable");
												if (g.options.greedy
														&& !g.options.disabled
														&& g.options._scope == c.options._scope
														&& g.accept
																.call(
																		g.element[0],
																		(c.currentItem || c.element))
														&& a.ui
																.intersect(
																		c,
																		a
																				.extend(
																						g,
																						{
																							offset : g.element
																									.offset()
																						}))) {
													f = true;
													return false
												}
											});
							if (f) {
								return false
							}
							if (this.accept.call(this.element[0],
									(c.currentItem || c.element))) {
								if (this.options.activeClass) {
									this.element
											.removeClass(this.options.activeClass)
								}
								if (this.options.hoverClass) {
									this.element
											.removeClass(this.options.hoverClass)
								}
								this._trigger("onDrop", d, c.currentItem
										|| c.element);
								return this.element
							}
							return false
						}
					});
	a.ui.intersect = function(m, g) {
		if (!g.offset) {
			return false
		}
		var e = (m.positionAbs || m.position.absolute).left, d = e
				+ m.helperProportions.width, j = (m.positionAbs || m.position.absolute).top, i = j
				+ m.helperProportions.height;
		var f = g.offset.left, c = f + g.proportions.width, k = g.offset.top, h = k
				+ g.proportions.height;
		return (f < e + (m.helperProportions.width / 2)
				&& d - (m.helperProportions.width / 2) < c
				&& k < j + (m.helperProportions.height / 2) && i
				- (m.helperProportions.height / 2) < h)
	};
	a.ui.ddmanager = {
		current : null,
		droppables : {
			"default" : []
		},
		prepareOffsets : function(f, h) {
			var c = a.ui.ddmanager.droppables[f.options._scope] || [];
			var g = h ? h.type : null;
			var k = (f.currentItem || f.element).find(":data(omDroppable)")
					.andSelf();
			droppablesLoop: for ( var e = 0; e < c.length; e++) {
				if (c[e].options.disabled
						|| (f && !c[e].accept.call(c[e].element[0],
								(f.currentItem || f.element)))) {
					continue
				}
				for ( var d = 0; d < k.length; d++) {
					if (k[d] == c[e].element[0]) {
						c[e].proportions.height = 0;
						continue droppablesLoop
					}
				}
				c[e].visible = c[e].element.css("display") != "none";
				if (!c[e].visible) {
					continue
				}
				if (g == "mousedown") {
					c[e]._activate.call(c[e], h)
				}
				c[e].offset = c[e].element.offset();
				c[e].proportions = {
					width : c[e].element[0].offsetWidth,
					height : c[e].element[0].offsetHeight
				}
			}
		},
		drop : function(c, d) {
			var e = false;
			a.each(a.ui.ddmanager.droppables[c.options._scope] || [],
					function() {
						if (!this.options) {
							return
						}
						if (!this.options.disabled && this.visible
								&& a.ui.intersect(c, this)) {
							e = e || this._drop.call(this, d)
						}
						if (!this.options.disabled
								&& this.visible
								&& this.accept.call(this.element[0],
										(c.currentItem || c.element))) {
							this.isout = 1;
							this.isover = 0;
							this._deactivate.call(this, d)
						}
					});
			return e
		},
		dragStart : function(c, d) {
			c.element.parentsUntil("body").bind("scroll.droppable", function() {
				if (!c.options.refreshPositions) {
					a.ui.ddmanager.prepareOffsets(c, d)
				}
			})
		},
		drag : function(c, d) {
			if (c.options.refreshPositions) {
				a.ui.ddmanager.prepareOffsets(c, d)
			}
			a.each(a.ui.ddmanager.droppables[c.options._scope] || [],
					function() {
						if (this.options.disabled || this.greedyChild
								|| !this.visible) {
							return
						}
						var f = a.ui.intersect(c, this);
						var h = !f && this.isover == 1 ? "isout" : (f
								&& this.isover == 0 ? "isover" : null);
						if (!h) {
							return
						}
						var g;
						if (this.options.greedy) {
							var e = this.element
									.parents(":data(omDroppable):eq(0)");
							if (e.length) {
								g = a.data(e[0], "omDroppable");
								g.greedyChild = (h == "isover" ? 1 : 0)
							}
						}
						if (g && h == "isover") {
							g.isover = 0;
							g.isout = 1;
							g._out.call(g, d)
						}
						this[h] = 1;
						this[h == "isout" ? "isover" : "isout"] = 0;
						this[h == "isover" ? "_over" : "_out"].call(this, d);
						if (g && h == "isout") {
							g.isout = 0;
							g.isover = 1;
							g._over.call(g, d)
						}
					})
		},
		dragStop : function(c, d) {
			c.element.parentsUntil("body").unbind("scroll.droppable");
			if (!c.options.refreshPositions) {
				a.ui.ddmanager.prepareOffsets(c, d)
			}
		}
	}
})(jQuery);
var swfobject = function() {
	var aq = "undefined", aD = "object", ab = "Shockwave Flash", X = "ShockwaveFlash.ShockwaveFlash", aE = "application/x-shockwave-flash", ac = "SWFObjectExprInst", ax = "onreadystatechange", af = window, aL = document, aB = navigator, aa = false, Z = [ aN ], aG = [], ag = [], al = [], aJ, ad, ap, at, ak = false, aU = false, aH, an, aI = true, ah = function() {
		var a = typeof aL.getElementById != aq
				&& typeof aL.getElementsByTagName != aq
				&& typeof aL.createElement != aq, e = aB.userAgent
				.toLowerCase(), c = aB.platform.toLowerCase(), h = c ? /win/
				.test(c) : /win/.test(e), j = c ? /mac/.test(c) : /mac/.test(e), g = /webkit/
				.test(e) ? parseFloat(e.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,
				"$1")) : false, d = !+"\v1", f = [ 0, 0, 0 ], k = null;
		if (typeof aB.plugins != aq && typeof aB.plugins[ab] == aD) {
			k = aB.plugins[ab].description;
			if (k
					&& !(typeof aB.mimeTypes != aq && aB.mimeTypes[aE] && !aB.mimeTypes[aE].enabledPlugin)) {
				aa = true;
				d = false;
				k = k.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
				f[0] = parseInt(k.replace(/^(.*)\..*$/, "$1"), 10);
				f[1] = parseInt(k.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
				f[2] = /[a-zA-Z]/.test(k) ? parseInt(k.replace(
						/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
			}
		} else {
			if (typeof af.ActiveXObject != aq) {
				try {
					var i = new ActiveXObject(X);
					if (i) {
						k = i.GetVariable("$version");
						if (k) {
							d = true;
							k = k.split(" ")[1].split(",");
							f = [ parseInt(k[0], 10), parseInt(k[1], 10),
									parseInt(k[2], 10) ]
						}
					}
				} catch (b) {
				}
			}
		}
		return {
			w3 : a,
			pv : f,
			wk : g,
			ie : d,
			win : h,
			mac : j
		}
	}(), aK = function() {
		if (!ah.w3) {
			return
		}
		if ((typeof aL.readyState != aq && aL.readyState == "complete")
				|| (typeof aL.readyState == aq && (aL
						.getElementsByTagName("body")[0] || aL.body))) {
			aP()
		}
		if (!ak) {
			if (typeof aL.addEventListener != aq) {
				aL.addEventListener("DOMContentLoaded", aP, false)
			}
			if (ah.ie && ah.win) {
				aL.attachEvent(ax, function() {
					if (aL.readyState == "complete") {
						aL.detachEvent(ax, arguments.callee);
						aP()
					}
				});
				if (af == top) {
					(function() {
						if (ak) {
							return
						}
						try {
							aL.documentElement.doScroll("left")
						} catch (a) {
							setTimeout(arguments.callee, 0);
							return
						}
						aP()
					})()
				}
			}
			if (ah.wk) {
				(function() {
					if (ak) {
						return
					}
					if (!/loaded|complete/.test(aL.readyState)) {
						setTimeout(arguments.callee, 0);
						return
					}
					aP()
				})()
			}
			aC(aP)
		}
	}();
	function aP() {
		if (ak) {
			return
		}
		try {
			var b = aL.getElementsByTagName("body")[0].appendChild(ar("span"));
			b.parentNode.removeChild(b)
		} catch (a) {
			return
		}
		ak = true;
		var d = Z.length;
		for ( var c = 0; c < d; c++) {
			Z[c]()
		}
	}
	function aj(a) {
		if (ak) {
			a()
		} else {
			Z[Z.length] = a
		}
	}
	function aC(a) {
		if (typeof af.addEventListener != aq) {
			af.addEventListener("load", a, false)
		} else {
			if (typeof aL.addEventListener != aq) {
				aL.addEventListener("load", a, false)
			} else {
				if (typeof af.attachEvent != aq) {
					aM(af, "onload", a)
				} else {
					if (typeof af.onload == "function") {
						var b = af.onload;
						af.onload = function() {
							b();
							a()
						}
					} else {
						af.onload = a
					}
				}
			}
		}
	}
	function aN() {
		if (aa) {
			Y()
		} else {
			am()
		}
	}
	function Y() {
		var d = aL.getElementsByTagName("body")[0];
		var b = ar(aD);
		b.setAttribute("type", aE);
		var a = d.appendChild(b);
		if (a) {
			var c = 0;
			(function() {
				if (typeof a.GetVariable != aq) {
					var e = a.GetVariable("$version");
					if (e) {
						e = e.split(" ")[1].split(",");
						ah.pv = [ parseInt(e[0], 10), parseInt(e[1], 10),
								parseInt(e[2], 10) ]
					}
				} else {
					if (c < 10) {
						c++;
						setTimeout(arguments.callee, 10);
						return
					}
				}
				d.removeChild(b);
				a = null;
				am()
			})()
		} else {
			am()
		}
	}
	function am() {
		var g = aG.length;
		if (g > 0) {
			for ( var h = 0; h < g; h++) {
				var c = aG[h].id;
				var l = aG[h].callbackFn;
				var a = {
					success : false,
					id : c
				};
				if (ah.pv[0] > 0) {
					var i = aS(c);
					if (i) {
						if (ao(aG[h].swfVersion) && !(ah.wk && ah.wk < 312)) {
							ay(c, true);
							if (l) {
								a.success = true;
								a.ref = av(c);
								l(a)
							}
						} else {
							if (aG[h].expressInstall && au()) {
								var e = {};
								e.data = aG[h].expressInstall;
								e.width = i.getAttribute("width") || "0";
								e.height = i.getAttribute("height") || "0";
								if (i.getAttribute("class")) {
									e.styleclass = i.getAttribute("class")
								}
								if (i.getAttribute("align")) {
									e.align = i.getAttribute("align")
								}
								var f = {};
								var d = i.getElementsByTagName("param");
								var k = d.length;
								for ( var j = 0; j < k; j++) {
									if (d[j].getAttribute("name").toLowerCase() != "movie") {
										f[d[j].getAttribute("name")] = d[j]
												.getAttribute("value")
									}
								}
								ae(e, f, c, l)
							} else {
								aF(i);
								if (l) {
									l(a)
								}
							}
						}
					}
				} else {
					ay(c, true);
					if (l) {
						var b = av(c);
						if (b && typeof b.SetVariable != aq) {
							a.success = true;
							a.ref = b
						}
						l(a)
					}
				}
			}
		}
	}
	function av(b) {
		var d = null;
		var c = aS(b);
		if (c && c.nodeName == "OBJECT") {
			if (typeof c.SetVariable != aq) {
				d = c
			} else {
				var a = c.getElementsByTagName(aD)[0];
				if (a) {
					d = a
				}
			}
		}
		return d
	}
	function au() {
		return !aU && ao("6.0.65") && (ah.win || ah.mac)
				&& !(ah.wk && ah.wk < 312)
	}
	function ae(f, d, h, e) {
		aU = true;
		ap = e || null;
		at = {
			success : false,
			id : h
		};
		var a = aS(h);
		if (a) {
			if (a.nodeName == "OBJECT") {
				aJ = aO(a);
				ad = null
			} else {
				aJ = a;
				ad = h
			}
			f.id = ac;
			if (typeof f.width == aq
					|| (!/%$/.test(f.width) && parseInt(f.width, 10) < 310)) {
				f.width = "310"
			}
			if (typeof f.height == aq
					|| (!/%$/.test(f.height) && parseInt(f.height, 10) < 137)) {
				f.height = "137"
			}
			aL.title = aL.title.slice(0, 47) + " - Flash Player Installation";
			var b = ah.ie && ah.win ? "ActiveX" : "PlugIn", c = "MMredirectURL="
					+ af.location.toString().replace(/&/g, "%26")
					+ "&MMplayerType=" + b + "&MMdoctitle=" + aL.title;
			if (typeof d.flashvars != aq) {
				d.flashvars += "&" + c
			} else {
				d.flashvars = c
			}
			if (ah.ie && ah.win && a.readyState != 4) {
				var g = ar("div");
				h += "SWFObjectNew";
				g.setAttribute("id", h);
				a.parentNode.insertBefore(g, a);
				a.style.display = "none";
				(function() {
					if (a.readyState == 4) {
						a.parentNode.removeChild(a)
					} else {
						setTimeout(arguments.callee, 10)
					}
				})()
			}
			aA(f, d, h)
		}
	}
	function aF(a) {
		if (ah.ie && ah.win && a.readyState != 4) {
			var b = ar("div");
			a.parentNode.insertBefore(b, a);
			b.parentNode.replaceChild(aO(a), b);
			a.style.display = "none";
			(function() {
				if (a.readyState == 4) {
					a.parentNode.removeChild(a)
				} else {
					setTimeout(arguments.callee, 10)
				}
			})()
		} else {
			a.parentNode.replaceChild(aO(a), a)
		}
	}
	function aO(b) {
		var d = ar("div");
		if (ah.win && ah.ie) {
			d.innerHTML = b.innerHTML
		} else {
			var e = b.getElementsByTagName(aD)[0];
			if (e) {
				var a = e.childNodes;
				if (a) {
					var f = a.length;
					for ( var c = 0; c < f; c++) {
						if (!(a[c].nodeType == 1 && a[c].nodeName == "PARAM")
								&& !(a[c].nodeType == 8)) {
							d.appendChild(a[c].cloneNode(true))
						}
					}
				}
			}
		}
		return d
	}
	function aA(e, g, c) {
		var d, a = aS(c);
		if (ah.wk && ah.wk < 312) {
			return d
		}
		if (a) {
			if (typeof e.id == aq) {
				e.id = c
			}
			if (ah.ie && ah.win) {
				var f = "";
				for ( var i in e) {
					if (e[i] != Object.prototype[i]) {
						if (i.toLowerCase() == "data") {
							g.movie = e[i]
						} else {
							if (i.toLowerCase() == "styleclass") {
								f += ' class="' + e[i] + '"'
							} else {
								if (i.toLowerCase() != "classid") {
									f += " " + i + '="' + e[i] + '"'
								}
							}
						}
					}
				}
				var h = "";
				for ( var j in g) {
					if (g[j] != Object.prototype[j]) {
						h += '<param name="' + j + '" value="' + g[j] + '" />'
					}
				}
				a.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'
						+ f + ">" + h + "</object>";
				ag[ag.length] = e.id;
				d = aS(e.id)
			} else {
				var b = ar(aD);
				b.setAttribute("type", aE);
				for ( var k in e) {
					if (e[k] != Object.prototype[k]) {
						if (k.toLowerCase() == "styleclass") {
							b.setAttribute("class", e[k])
						} else {
							if (k.toLowerCase() != "classid") {
								b.setAttribute(k, e[k])
							}
						}
					}
				}
				for ( var l in g) {
					if (g[l] != Object.prototype[l]
							&& l.toLowerCase() != "movie") {
						aQ(b, l, g[l])
					}
				}
				a.parentNode.replaceChild(b, a);
				d = b
			}
		}
		return d
	}
	function aQ(b, d, c) {
		var a = ar("param");
		a.setAttribute("name", d);
		a.setAttribute("value", c);
		b.appendChild(a)
	}
	function aw(a) {
		var b = aS(a);
		if (b && b.nodeName == "OBJECT") {
			if (ah.ie && ah.win) {
				b.style.display = "none";
				(function() {
					if (b.readyState == 4) {
						aT(a)
					} else {
						setTimeout(arguments.callee, 10)
					}
				})()
			} else {
				b.parentNode.removeChild(b)
			}
		}
	}
	function aT(a) {
		var b = aS(a);
		if (b) {
			for ( var c in b) {
				if (typeof b[c] == "function") {
					b[c] = null
				}
			}
			b.parentNode.removeChild(b)
		}
	}
	function aS(a) {
		var c = null;
		try {
			c = aL.getElementById(a)
		} catch (b) {
		}
		return c
	}
	function ar(a) {
		return aL.createElement(a)
	}
	function aM(a, c, b) {
		a.attachEvent(c, b);
		al[al.length] = [ a, c, b ]
	}
	function ao(a) {
		var b = ah.pv, c = a.split(".");
		c[0] = parseInt(c[0], 10);
		c[1] = parseInt(c[1], 10) || 0;
		c[2] = parseInt(c[2], 10) || 0;
		return (b[0] > c[0] || (b[0] == c[0] && b[1] > c[1]) || (b[0] == c[0]
				&& b[1] == c[1] && b[2] >= c[2])) ? true : false
	}
	function az(b, f, a, c) {
		if (ah.ie && ah.mac) {
			return
		}
		var e = aL.getElementsByTagName("head")[0];
		if (!e) {
			return
		}
		var g = (a && typeof a == "string") ? a : "screen";
		if (c) {
			aH = null;
			an = null
		}
		if (!aH || an != g) {
			var d = ar("style");
			d.setAttribute("type", "text/css");
			d.setAttribute("media", g);
			aH = e.appendChild(d);
			if (ah.ie && ah.win && typeof aL.styleSheets != aq
					&& aL.styleSheets.length > 0) {
				aH = aL.styleSheets[aL.styleSheets.length - 1]
			}
			an = g
		}
		if (ah.ie && ah.win) {
			if (aH && typeof aH.addRule == aD) {
				aH.addRule(b, f)
			}
		} else {
			if (aH && typeof aL.createTextNode != aq) {
				aH.appendChild(aL.createTextNode(b + " {" + f + "}"))
			}
		}
	}
	function ay(a, c) {
		if (!aI) {
			return
		}
		var b = c ? "visible" : "hidden";
		if (ak && aS(a)) {
			aS(a).style.visibility = b
		} else {
			az("#" + a, "visibility:" + b)
		}
	}
	function ai(b) {
		var a = /[\\\"<>\.;]/;
		var c = a.exec(b) != null;
		return c && typeof encodeURIComponent != aq ? encodeURIComponent(b) : b
	}
	var aR = function() {
		if (ah.ie && ah.win) {
			window.attachEvent("onunload", function() {
				var a = al.length;
				for ( var b = 0; b < a; b++) {
					al[b][0].detachEvent(al[b][1], al[b][2])
				}
				var d = ag.length;
				for ( var c = 0; c < d; c++) {
					aw(ag[c])
				}
				for ( var e in ah) {
					ah[e] = null
				}
				ah = null;
				for ( var f in swfobject) {
					swfobject[f] = null
				}
				swfobject = null
			})
		}
	}();
	return {
		registerObject : function(a, e, c, b) {
			if (ah.w3 && a && e) {
				var d = {};
				d.id = a;
				d.swfVersion = e;
				d.expressInstall = c;
				d.callbackFn = b;
				aG[aG.length] = d;
				ay(a, false)
			} else {
				if (b) {
					b( {
						success : false,
						id : a
					})
				}
			}
		},
		getObjectById : function(a) {
			if (ah.w3) {
				return av(a)
			}
		},
		embedSWF : function(k, e, h, f, c, a, b, i, g, j) {
			var d = {
				success : false,
				id : e
			};
			if (ah.w3 && !(ah.wk && ah.wk < 312) && k && e && h && f && c) {
				ay(e, false);
				aj(function() {
					h += "";
					f += "";
					var r = {};
					if (g && typeof g === aD) {
						for ( var p in g) {
							r[p] = g[p]
						}
					}
					r.data = k;
					r.width = h;
					r.height = f;
					var o = {};
					if (i && typeof i === aD) {
						for ( var q in i) {
							o[q] = i[q]
						}
					}
					if (b && typeof b === aD) {
						for ( var l in b) {
							if (typeof o.flashvars != aq) {
								o.flashvars += "&" + l + "=" + b[l]
							} else {
								o.flashvars = l + "=" + b[l]
							}
						}
					}
					if (ao(c)) {
						var m = aA(r, o, e);
						if (r.id == e) {
							ay(e, true)
						}
						d.success = true;
						d.ref = m
					} else {
						if (a && au()) {
							r.data = a;
							ae(r, o, e, j);
							return
						} else {
							ay(e, true)
						}
					}
					if (j) {
						j(d)
					}
				})
			} else {
				if (j) {
					j(d)
				}
			}
		},
		switchOffAutoHideShow : function() {
			aI = false
		},
		ua : ah,
		getFlashPlayerVersion : function() {
			return {
				major : ah.pv[0],
				minor : ah.pv[1],
				release : ah.pv[2]
			}
		},
		hasFlashPlayerVersion : ao,
		createSWF : function(a, b, c) {
			if (ah.w3) {
				return aA(a, b, c)
			} else {
				return undefined
			}
		},
		showExpressInstall : function(b, a, d, c) {
			if (ah.w3 && au()) {
				ae(b, a, d, c)
			}
		},
		removeSWF : function(a) {
			if (ah.w3) {
				aw(a)
			}
		},
		createCSS : function(b, a, c, d) {
			if (ah.w3) {
				az(b, a, c, d)
			}
		},
		addDomLoadEvent : aj,
		addLoadEvent : aC,
		getQueryParamValue : function(b) {
			var a = aL.location.search || aL.location.hash;
			if (a) {
				if (/\?/.test(a)) {
					a = a.split("?")[1]
				}
				if (b == null) {
					return ai(a)
				}
				var c = a.split("&");
				for ( var d = 0; d < c.length; d++) {
					if (c[d].substring(0, c[d].indexOf("=")) == b) {
						return ai(c[d].substring((c[d].indexOf("=") + 1)))
					}
				}
			}
			return ""
		},
		expressInstallCallback : function() {
			if (aU) {
				var a = aS(ac);
				if (a && aJ) {
					a.parentNode.replaceChild(aJ, a);
					if (ad) {
						ay(ad, true);
						if (ah.ie && ah.win) {
							aJ.style.display = "block"
						}
					}
					if (ap) {
						ap(at)
					}
				}
				aU = false
			}
		}
	}
}();
if (!$.omFileUpload) {
	$.omFileUpload = {}
}
$.omFileUpload.lang = {
	queueSizeLimitMsg : "文件上传队列已满，数量不能超过",
	selectFileText : "选择文件"
};
(function(a) {
	a.fn.omFileUpload = function(e) {
		function g(l, i) {
			var h = l + "Queue";
			var k = a("#" + h + " .om-fileupload-queueitem").length;
			if (i == null || isNaN(i) || i < 0 || i >= k) {
				return false
			}
			var j = a("#" + h + " .om-fileupload-queueitem:eq(" + i + ")");
			return j.attr("id").replace(l, "")
		}
		var c = {
			upload : function(h) {
				return this.each(function() {
					var l = a(this).attr("id"), i = null, j = a(this)
							.attr("id")
							+ "Queue", k = a(this).attr("id") + "Uploader";
					if (typeof (h) != "undefined") {
						if ((i = g(l, h)) === false) {
							return
						}
					}
					document.getElementById(k).startFileUpload(i, false)
				})
			},
			cancel : function(h) {
				return this.each(function() {
					var l = a(this).attr("id"), i = null, j = a(this)
							.attr("id")
							+ "Queue", k = a(this).attr("id") + "Uploader";
					if (typeof (h) != "undefined") {
						if (isNaN(h)) {
							i = h
						} else {
							if ((i = g(a(this).attr("id"), h)) === false) {
								return
							}
						}
						document.getElementById(k).cancelFileUpload(i, true,
								true, false)
					} else {
						document.getElementById(k).clearFileUploadQueue(false)
					}
				})
			}
		};
		if (c[e]) {
			return c[e].apply(this, Array.prototype.slice.call(arguments, 1))
		}
		var b = [ "buttonImg", "buttonText", "fileDesc", "fileExt", "height",
				"action", "actionData", "sizeLimit", "width" ];
		if (a.inArray(e, b) != -1) {
			var d = arguments;
			return this.each(function() {
				var m = document
						.getElementById(a(this).attr("id") + "Uploader");
				if (m != null && d.length > 1) {
					if ("actionData" == d[0]) {
						var l = "";
						for ( var j in d[1]) {
							l += "&" + j + "=" + d[1][j]
						}
						var h = document.cookie.split(";");
						for ( var k = 0; k < h.length; k++) {
							l += "&" + h[k]
						}
						d[1] = encodeURI(l.substr(1))
					}
					return m.updateSettings(d[0], d[1])
				}
			})
		}
		var f = a.extend( {
			id : a(this).attr("id"),
			swf : "/operamasks-ui/ui/om-fileupload.swf",
			action : "",
			actionData : {},
			height : 30,
			width : 120,
			buttonText : a.omFileUpload.lang.selectFileText,
			buttonImg : null,
			multi : false,
			autoUpload : false,
			fileDataName : "Filedata",
			method : "POST",
			queueSizeLimit : 999,
			removeCompleted : true,
			fileExt : "*.*",
			fileDesc : null,
			sizeLimit : null,
			onSelect : function() {
			},
			onQueueFull : function() {
			},
			onCancel : function() {
			},
			onError : function() {
			},
			onProgress : function() {
			},
			onComplete : function() {
			},
			onAllComplete : function() {
			}
		}, e);
		f.wmode = "opaque";
		f.expressInstall = null;
		f.displayData = "percentage";
		f.folder = "";
		f.simUploadLimit = 1;
		f.scriptAccess = "sameDomain";
		f.queueID = false;
		f.onInit = function() {
		};
		f.onSelectOnce = function() {
		};
		f.onClearQueue = function() {
		};
		return this
				.each(function() {
					a(this).data("settings", f);
					var m = location.pathname;
					m = m.split("/");
					m.pop();
					m = m.join("/") + "/";
					var o = {};
					o.omFileUploadID = f.id;
					o.pagepath = m;
					if (f.buttonImg) {
						o.buttonImg = escape(f.buttonImg)
					}
					if (f.buttonText) {
						o.buttonText = encodeURI(f.buttonText)
					}
					if (f.rollover) {
						o.rollover = true
					}
					o.action = f.action;
					o.folder = escape(f.folder);
					var p = "";
					var h = document.cookie.split(";");
					for ( var l = 0; l < h.length; l++) {
						p += "&" + h[l]
					}
					if (f.actionData) {
						for ( var k in f.actionData) {
							p += "&" + k + "=" + f.actionData[k]
						}
					}
					o.actionData = encodeURI(p.substr(1));
					o.width = f.width;
					o.height = f.height;
					o.wmode = f.wmode;
					o.method = f.method;
					o.queueSizeLimit = f.queueSizeLimit;
					o.simUploadLimit = f.simUploadLimit;
					if (f.hideButton) {
						o.hideButton = true
					}
					if (f.fileDesc) {
						o.fileDesc = f.fileDesc
					}
					if (f.fileExt) {
						o.fileExt = f.fileExt
					}
					if (f.multi) {
						o.multi = true
					}
					if (f.autoUpload) {
						o.autoUpload = true
					}
					if (f.sizeLimit) {
						o.sizeLimit = f.sizeLimit
					}
					if (f.checkScript) {
						o.checkScript = f.checkScript
					}
					if (f.fileDataName) {
						o.fileDataName = f.fileDataName
					}
					if (f.queueID) {
						o.queueID = f.queueID
					}
					if (f.onInit() !== false) {
						a(this).css("display", "none");
						a(this)
								.after(
										'<div id="' + a(this).attr("id") + 'Uploader"></div>');
						swfobject.embedSWF(f.swf, f.id + "Uploader", f.width,
								f.height, "9.0.24", f.expressInstall, o, {
									quality : "high",
									wmode : f.wmode,
									allowScriptAccess : f.scriptAccess
								}, {}, function(i) {
									if (typeof (f.onSWFReady) == "function"
											&& i.success) {
										f.onSWFReady()
									}
								});
						if (f.queueID == false) {
							a("#" + a(this).attr("id") + "Uploader")
									.after(
											'<div id="' + a(this).attr("id") + 'Queue" class="om-fileupload-queue"></div>')
						} else {
							a("#" + f.queueID).addClass("om-fileupload-queue")
						}
					}
					if (typeof (f.onOpen) == "function") {
						a(this).bind("omFileUploadOpen", f.onOpen)
					}
					a(this)
							.bind(
									"omFileUploadSelect",
									{
										action : f.onSelect,
										queueID : f.queueID
									},
									function(r, i, q) {
										if (r.data.action(r, i, q) !== false) {
											var s = Math
													.round(q.size / 1024 * 100) * 0.01;
											var t = "KB";
											if (s > 1000) {
												s = Math.round(s * 0.001 * 100) * 0.01;
												t = "MB"
											}
											var u = s.toString().split(".");
											if (u.length > 1) {
												s = u[0] + "."
														+ u[1].substr(0, 2)
											} else {
												s = u[0]
											}
											if (q.name.length > 20) {
												fileName = q.name.substr(0, 20)
														+ "..."
											} else {
												fileName = q.name
											}
											queue = "#" + a(this).attr("id")
													+ "Queue";
											if (r.data.queueID) {
												queue = "#" + r.data.queueID
											}
											a(queue)
													.append(
															'<div id="'
																	+ a(this)
																			.attr(
																					"id")
																	+ i
																	+ '" class="om-fileupload-queueitem">							<div class="cancel" onclick="$(\'#'
																	+ a(this)
																			.attr(
																					"id")
																	+ "').omFileUpload('cancel','"
																	+ i
																	+ '\')">							</div>							<span class="fileName">'
																	+ fileName
																	+ " ("
																	+ s
																	+ t
																	+ ')</span><span class="percentage"></span>							<div class="om-fileupload-progress">								<div id="'
																	+ a(this)
																			.attr(
																					"id")
																	+ i
																	+ 'ProgressBar" class="om-fileupload-progressbar"><!--Progress Bar--></div>							</div>						</div>')
										}
									});
					a(this).bind("omFileUploadSelectOnce", {
						action : f.onSelectOnce
					}, function(i, q) {
						i.data.action(i, q);
						if (f.autoUpload) {
							a(this).omFileUpload("upload")
						}
					});
					a(this).bind(
							"omFileUploadQueueFull",
							{
								action : f.onQueueFull
							},
							function(i, q) {
								if (i.data.action(i, q) !== false) {
									alert(a.omFileUpload.lang.queueSizeLimitMsg
											+ q + ".")
								}
							});
					a(this).bind(
							"omFileUploadCancel",
							{
								action : f.onCancel
							},
							function(u, q, t, v, i, s) {
								if (u.data.action(u, q, t, v, s) !== false) {
									if (i) {
										var r = (s == true) ? 0 : 250;
										a("#" + a(this).attr("id") + q)
												.fadeOut(r, function() {
													a(this).remove()
												})
									}
								}
							});
					a(this)
							.bind(
									"omFileUploadClearQueue",
									{
										action : f.onClearQueue
									},
									function(r, q) {
										var i = (f.queueID) ? f.queueID : a(
												this).attr("id")
												+ "Queue";
										if (q) {
											a("#" + i).find(
													".om-fileupload-queueitem")
													.remove()
										}
										if (r.data.action(r, q) !== false) {
											a("#" + i)
													.find(
															".om-fileupload-queueitem")
													.each(
															function() {
																var s = a(
																		".om-fileupload-queueitem")
																		.index(
																				this);
																a(this)
																		.delay(
																				s * 100)
																		.fadeOut(
																				250,
																				function() {
																					a(
																							this)
																							.remove()
																				})
															})
										}
									});
					var j = [];
					a(this).bind(
							"omFileUploadError",
							{
								action : f.onError
							},
							function(t, i, s, r) {
								if (t.data.action(t, i, s, r) !== false) {
									var q = new Array(i, s, r);
									j.push(q);
									a("#" + a(this).attr("id") + i).find(
											".percentage").text(
											" - " + r.type + " Error");
									a("#" + a(this).attr("id") + i).find(
											".om-fileupload-progress").hide();
									a("#" + a(this).attr("id") + i).addClass(
											"om-fileupload-error")
								}
							});
					if (typeof (f.onUpload) == "function") {
						a(this).bind("omFileUploadUpload", f.onUpload)
					}
					a(this)
							.bind(
									"omFileUploadProgress",
									{
										action : f.onProgress,
										toDisplay : f.displayData
									},
									function(r, i, q, s) {
										if (r.data.action(r, i, q, s) !== false) {
											a(
													"#" + a(this).attr("id")
															+ i + "ProgressBar")
													.animate(
															{
																width : s.percentage
																		+ "%"
															},
															250,
															function() {
																if (s.percentage == 100) {
																	a(this)
																			.closest(
																					".om-fileupload-progress")
																			.fadeOut(
																					250,
																					function() {
																						a(
																								this)
																								.remove()
																					})
																}
															});
											if (r.data.toDisplay == "percentage") {
												displayData = " - "
														+ s.percentage + "%"
											}
											if (r.data.toDisplay == "speed") {
												displayData = " - " + s.speed
														+ "KB/s"
											}
											if (r.data.toDisplay == null) {
												displayData = " "
											}
											a("#" + a(this).attr("id") + i)
													.find(".percentage").text(
															displayData)
										}
									});
					a(this)
							.bind(
									"omFileUploadComplete",
									{
										action : f.onComplete
									},
									function(s, i, r, q, t) {
										if (s.data.action(s, i, r, unescape(q),
												t) !== false) {
											a("#" + a(this).attr("id") + i)
													.find(".percentage").text(
															" - Completed");
											if (f.removeCompleted) {
												a(
														"#"
																+ a(s.target)
																		.attr(
																				"id")
																+ i).fadeOut(
														250, function() {
															a(this).remove()
														})
											}
											a("#" + a(s.target).attr("id") + i)
													.addClass("completed")
										}
									});
					if (typeof (f.onAllComplete) == "function") {
						a(this).bind("omFileUploadAllComplete", {
							action : f.onAllComplete
						}, function(i, q) {
							if (i.data.action(i, q) !== false) {
								j = []
							}
						})
					}
				})
	}
})(jQuery);
(function(a) {
	a.omGrid = {
		lang : {
			loadingMsg : "正在加载数据，请稍候...",
			emptyMsg : "没有数据",
			errorMsg : "取数出错",
			pageText : "第{index}页，共{totalPage}页",
			pageStat : "共{total}条数据，显示{from}-{to}条"
		}
	};
	a
			.widget(
					"om.omGrid",
					{
						options : {
							height : 462,
							width : "100%",
							colModel : false,
							autoFit : false,
							showIndex : true,
							dataSource : false,
							method : "GET",
							loadingMsg : a.omGrid.lang.loadingMsg,
							emptyMsg : a.omGrid.lang.emptyMsg,
							errorMsg : a.omGrid.lang.errorMsg,
							preProcess : false,
							limit : 15,
							pageText : a.omGrid.lang.pageText,
							pageStat : a.omGrid.lang.pageStat,
							rowClasses : [ "oddRow", "evenRow" ],
							singleSelect : true,
							onRowSelect : function(c, b) {
							},
							onRowDeselect : function(c, b) {
							},
							onRowClick : function(c, b) {
							},
							onRowDblClick : function(c, b) {
							},
							onPageChange : function(c, b) {
							},
							onSuccess : function(d, b, c) {
							},
							onError : function(b, d, c) {
							},
							onRefresh : function(c, b) {
							}
						},
						_create : function() {
							var c = this.options, d = this.element.show().attr(
									{
										cellPadding : 0,
										cellSpacing : 0,
										border : 0
									}).empty().append("<tbody></tbody>");
							d
									.wrap(
											'<div class="om-grid om-widget om-widget-content"><div class="bDiv"></div></div>')
									.closest(".om-grid").width(c.width).height(
											c.height);
							var b = c.colModel;
							if (!a.isArray(b)) {
								return
							}
							this.tbody = this.element.children().eq(0);
							this._buildTableHead();
							this._buildPagingToolBar();
							this._buildLoadMask();
							this._bindSelectAndClickEnvent();
							this._bindScrollEnvent();
							this._makeColsResizable()
						},
						_init : function() {
							if (!a.isArray(this.options.colModel)) {
								return
							}
							var e = this.element, g = this.options, d = e
									.closest(".om-grid"), f = d.children(
									".hDiv").outerHeight(), b = d.children(
									".pDiv").outerHeight() || 0, c = d
									.children(".bDiv");
							c.height(d.height() - f - b);
							this.pageData = {
								nowPage : 1,
								totalPages : 1
							};
							this._populate()
						},
						_setOption : function(d, e) {
							var c = this.options, b = c[d];
							c[d] = e;
							switch (d) {
							case "colModel":
								break;
							case "dataSource":
							case "limit":
								break;
							case "autoFit":
								break;
							case "height":
								break;
							case "width":
								break;
							case "pageText":
								break;
							case "fillEmptyRows":
								break;
							case "wrap":
								break;
							case "singleSelect":
								break;
							case "rowClasses":
								break;
							case "paged":
								break;
							default:
								c[d] = e
							}
						},
						_buildTableHead : function() {
							var p = this.options, e = this.element, b = e
									.closest(".om-grid"), q = p.colModel, x = 0, r = 0, h = 0, l = -1;
							thead = a("<thead></thead");
							tr = a("<tr></tr>").appendTo(thead);
							if (p.showIndex) {
								var d = a("<th></th")
										.attr( {
											axis : "indexCol",
											align : "center"
										})
										.addClass("indexCol")
										.append(
												a('<div class="indexheader" style="text-align:center;width:25px;"></div'));
								tr.append(d);
								r = 25
							}
							if (!p.singleSelect) {
								var d = a("<th></th")
										.attr( {
											axis : "checkboxCol",
											align : "center"
										})
										.addClass("checkboxCol")
										.append(
												a('<div class="checkboxheader" style="text-align:center;width:17px;"><span class="checkbox"/></div'));
								tr.append(d);
								h = 17
							}
							for ( var u = 0, v = q.length; u < v; u++) {
								var m = q[u], o = m.width || 60, s = m.align
										|| "center";
								if (o == "autoExpand") {
									o = 0;
									l = u
								}
								var t = a("<div></div").html(m.header).css( {
									"text-align" : s,
									width : o
								});
								m.wrap && t.addClass("wrap");
								var g = a("<th></th").attr("axis", "col" + u)
										.addClass("col" + u).append(t);
								if (m.name) {
									g.attr("abbr", m.name)
								}
								if (m.align) {
									g.attr("align", m.align)
								}
								x += o;
								tr.append(g)
							}
							e.prepend(thead);
							var k = a(
									'<div class="hDiv om-state-default"></div>')
									.append(
											'<div class="hDivBox"><table cellPadding="0" cellSpacing="0"></table></div>');
							e.parent().before(k);
							a("table", k).append(thead);
							if (l != -1) {
								var w = b.width() - 20, j = w - thead.width();
								toBeExpandedTh = tr
										.find('th[axis="col' + l + '"] div');
								if (j <= 0) {
									toBeExpandedTh.css("width", 60)
								} else {
									toBeExpandedTh.css("width", j)
								}
							} else {
								if (p.autoFit) {
									var w = b.width() - 20, j = w
											- thead.width(), c = 1 + j / x, y = tr
											.find('th[axis^="col"] div');
									for ( var u = 0, v = q.length; u < v; u++) {
										var f = y.eq(u);
										f.css("width", parseInt(f.width() * c))
									}
								}
							}
							this.thead = thead;
							thead = null
						},
						_buildPagingToolBar : function() {
							var f = this.options;
							if (f.limit <= 0) {
								return
							}
							var c = this, d = this.element, b = a('<div class="pDiv om-state-default"><div class="pDiv2"><div class="pGroup"><div class="pFirst pButton om-icon"><span class="om-icon-seek-start"></span></div><div class="pPrev pButton om-icon"><span class="om-icon-seek-prev"></span></div></div><div class="btnseparator"></div><div class="pGroup"><span class="pControl"></span></div><div class="btnseparator"></div><div class="pGroup"><div class="pNext pButton om-icon"><span class="om-icon-seek-next"></span></div><div class="pLast pButton om-icon"><span class="om-icon-seek-end"></span></div></div><div class="btnseparator"></div><div class="pGroup"><div class="pReload pButton om-icon"><span class="om-icon-refresh"></span></div></div><div class="btnseparator"></div><div class="pGroup"><span class="pPageStat"></span></div></div></div>');
							var e = f.pageText.replace(/{totalPage}/,
									"<span>1</span>").replace(/{index}/,
									'<input type="text" size="4" value="1" />');
							a(".pControl", b).html(e);
							d.parent().after(b);
							a(".pReload", b).click(function() {
								c._populate()
							});
							a(".pFirst", b).click(function() {
								c._changePage("first")
							});
							a(".pPrev", b).click(function() {
								c._changePage("prev")
							});
							a(".pNext", b).click(function() {
								c._changePage("next")
							});
							a(".pLast", b).click(function() {
								c._changePage("last")
							});
							a(".pControl input", b).keydown(function(g) {
								if (g.keyCode == 13) {
									c._changePage("input")
								}
							});
							a(".pButton", b).hover(function() {
								a(this).addClass("om-state-hover")
							}, function() {
								a(this).removeClass("om-state-hover")
							});
							this.pager = b
						},
						_buildLoadMask : function() {
							var b = this, f = this.options, e = this.element, c = e
									.closest(".om-grid"), d = a(
									'<div class="gBlock"><div align="center" class="gBlock-valignMiddle" ><div class="loadingImg" style="display:block"/></div></div>')
									.css( {
										width : c.width(),
										height : c.height()
									}).mousedown(function(g) {
										return false
									}).hide();
							c.append(d);
							this.loadMask = d
						},
						_changePage : function(c) {
							if (this.loading) {
								return true
							}
							var e = this.element, h = this.options, b = e
									.closest(".om-grid"), d = this.pageData, g = d.nowPage, i = d.totalPages, f = g;
							switch (c) {
							case "first":
								f = 1;
								break;
							case "prev":
								if (g > 1) {
									f = g - 1
								}
								break;
							case "next":
								if (g < i) {
									f = g + 1
								}
								break;
							case "last":
								f = i;
								break;
							case "input":
								var j = parseInt(a(".pControl input",
										e.closest(".om-grid")).val());
								if (isNaN(j)) {
									j = g
								}
								if (j < 1) {
									j = 1
								} else {
									if (j > i) {
										j = i
									}
								}
								a(".pControl input", this.pDiv).val(j);
								f = j;
								break;
							default:
								if (/\d/.test(c)) {
									var j = parseInt(c);
									if (isNaN(j)) {
										j = 1
									}
									if (j < 1) {
										j = 1
									} else {
										if (j > i) {
											j = i
										}
									}
									a(".pControl input", e.closest(".om-grid"))
											.val(j);
									f = j
								}
							}
							if (f == g) {
								return false
							}
							if (h.onPageChange(c, f) === false) {
								return
							}
							d.nowPage = f;
							a("th.checkboxCol span.checkbox", b).removeClass(
									"selected");
							this._populate()
						},
						_populate : function() {
							var k = this, f = this.element, b = f
									.closest(".om-grid"), j = this.options, e = a(
									".pPageStat", b);
							if (!j.dataSource) {
								a(".pPageStat", b).html(j.emptygMsg);
								return false
							}
							if (this.loading) {
								return true
							}
							var d = this.pageData, h = d.nowPage || 1, c = a(
									".gBlock", b);
							this.loading = true;
							e.html(j.loadingMsg);
							c.show();
							if (a.browser.opera) {
								a(b).css("visibility", "hidden")
							}
							var i = (j.limit <= 0) ? 100000000 : j.limit;
							var g = [ {
								name : "start",
								value : i * (h - 1)
							}, {
								name : "limit",
								value : i
							}, {
								name : "_time_stamp_",
								value : new Date().getTime()
							} ];
							a.ajax( {
								type : j.method,
								url : j.dataSource,
								data : g,
								dataType : "json",
								success : function(m, p, l) {
									var o = j.onSuccess;
									if (typeof (o) == "function") {
										o(m, p, l)
									}
									k._addData(m);
									j.onRefresh(h, m.rows);
									c.hide();
									k.loading = false
								},
								error : function(m, q, p) {
									e.html(j.errorMsg).css("color", "red");
									try {
										var l = j.onError;
										if (typeof (l) == "function") {
											l(m, q, p)
										}
									} catch (o) {
									} finally {
										c.hide();
										k.loading = false;
										return false
									}
								}
							})
						},
						_addData : function(g) {
							var h = this.options, f = this.element, e = f
									.closest(".om-grid"), b = a(".pPageStat", e), d = h.preProcess, c = this.pageData;
							d && (g = d(g));
							c.data = g;
							c.totalPages = Math.ceil(g.total / h.limit);
							this._buildPager();
							this._renderDatas()
						},
						_buildPager : function() {
							var i = this.options;
							if (i.limit <= 0) {
								return
							}
							var e = this.element, g = this.pager, b = a(
									".pControl", g), d = this.pageData, f = d.nowPage, j = d.totalPages, h = d.data, l = i.limit
									* (f - 1) + 1, k = l - 1 + h.rows.length, c = "";
							if (h.total === 0) {
								c = i.emptyMsg
							} else {
								c = i.pageStat.replace(/{from}/, l).replace(
										/{to}/, k).replace(/{total}/, h.total)
							}
							a("input", b).val(f);
							a("span", b).html(j);
							a(".pPageStat", g).html(c)
						},
						_renderDatas : function(l, m) {
							var o = this, f = this.element, i = this.options, c = f
									.closest(".om-grid"), j = a(
									".hDiv thead tr:first th", c), p = this.pageData.data.rows, k = i.colModel, g = i.rowClasses, h = a(
									"tbody", f).empty(), b = (typeof g === "function"), e = this.pageData, d = (e.nowPage - 1)
									* i.limit;
							a
									.each(
											p,
											function(q, t) {
												var s = b ? g(q, t) : g[q
														% g.length];
												var r = a("<tr></tr>")
														.addClass(s);
												var u = o._buildRowCellValues(
														k, t, q);
												a(j)
														.each(
																function() {
																	var y = a(
																			this)
																			.attr(
																					"axis"), x = false, w;
																	if (y == "indexCol") {
																		w = q
																				+ d
																				+ 1
																	} else {
																		if (y == "checkboxCol") {
																			w = '<span class="checkbox"/>'
																		} else {
																			var v = y
																					.substring(3);
																			w = u[v];
																			if (k[v].wrap) {
																				x = true
																			}
																		}
																	}
																	var z = a(
																			"<td></td>")
																			.attr(
																					{
																						align : this.align,
																						abbr : this.abbr
																					})
																			.addClass(
																					y)
																			.append(
																					a(
																							"<div></div>")
																							.html(
																									w)
																							.addClass(
																									x ? "wrap"
																											: "")
																							.attr(
																									{
																										align : this.align
																									})
																							.width(
																									a(
																											"div",
																											a(this))
																											.width()));
																	r.append(z)
																});
												h.append(r)
											})
						},
						_buildRowCellValues : function(j, d, h) {
							var f = j.length, k = [];
							for ( var e = 0; e < f; e++) {
								var g = j[e], l = d[g.name], b = g.renderer;
								if (typeof b === "function") {
									l = b(l, h)
								}
								k[e] = l
							}
							return k
						},
						_bindScrollEnvent : function() {
							var b = this.thead.closest(".hDiv");
							this.tbody.closest(".bDiv").scroll(function() {
								b.scrollLeft(a(this).scrollLeft())
							})
						},
						_bindSelectAndClickEnvent : function() {
							var b = this;
							if (!this.options.singleSelect) {
								a("th.checkboxCol span.checkbox", this.thead)
										.click(
												function() {
													var e = a(this), d = a(
															"tr", this.tbody)
															.size();
													if (e.hasClass("selected")) {
														e
																.removeClass("selected");
														for ( var c = 0; c < d; c++) {
															b._rowDeSelect(c)
														}
													} else {
														e.addClass("selected");
														for ( var c = 0; c < d; c++) {
															b._rowSelect(c)
														}
													}
												});
								this.tbody.delegate("tr", "click", function() {
									var d = a(this), c = d.index();
									clearTimeout(b.timer);
									b.timer = setTimeout(function() {
										if (d.hasClass("om-state-highlight")) {
											b._rowDeSelect(c)
										} else {
											b._rowSelect(c)
										}
										b._refreshHeaderCheckBox();
										b.options.onRowClick(c, b
												._getRowData(c))
									}, 300)
								});
								this.tbody
										.delegate(
												"tr",
												"dblclick",
												function() {
													clearTimeout(b.timer);
													var d = a(this), c = d
															.index();
													if (d
															.hasClass("om-state-highlight")) {
													} else {
														b._rowSelect(c)
													}
													b._refreshHeaderCheckBox();
													b.options.onRowDblClick(c,
															b._getRowData(c))
												})
							} else {
								this.tbody.delegate("tr", "click", function() {
									var d = a(this), c = d.index();
									clearTimeout(b.timer);
									b.timer = setTimeout(function() {
										if (d.hasClass("om-state-highlight")) {
										} else {
											var e = a("tr.om-state-highlight",
													b.tbody).index();
											(e != -1) && b._rowDeSelect(e);
											b._rowSelect(c)
										}
										b.options.onRowClick(c, b
												._getRowData(c))
									}, 300)
								});
								this.tbody
										.delegate(
												"tr",
												"dblclick",
												function() {
													clearTimeout(b.timer);
													var e = a(this), c = e
															.index();
													if (e
															.hasClass("om-state-highlight")) {
													} else {
														var d = a(
																"tr.om-state-highlight",
																b.tbody)
																.index();
														(d != -1)
																&& b
																		._rowDeSelect(d);
														b._rowSelect(c)
													}
													b.options.onRowDblClick(c,
															b._getRowData(c))
												})
							}
						},
						_getRowData : function(b) {
							return this.pageData.data.rows[b]
						},
						_rowSelect : function(d) {
							var e = this.element, g = this.options, c = a(
									"tbody", e), f = a("tr:eq(" + d + ")", c), b = a(
									"td.checkboxCol span.checkbox", f);
							f.addClass("om-state-highlight");
							b.addClass("selected");
							g.onRowSelect(d, this._getRowData(d))
						},
						_rowDeSelect : function(e) {
							var c = this, f = this.element, h = this.options, d = a(
									"tbody", f), g = a("tr:eq(" + e + ")", d), b = a(
									"td.checkboxCol span.checkbox", g);
							g.removeClass("om-state-highlight");
							b.removeClass("selected");
							h.onRowDeselect(e, this._getRowData(e))
						},
						_refreshHeaderCheckBox : function() {
							var b = a("td.checkboxCol span.selected",
									this.tbody).size(), c = a(
									"th.checkboxCol span.checkbox", this.thead);
							if (b < this.pageData.data.rows.length) {
								c.removeClass("selected")
							} else {
								c.addClass("selected")
							}
						},
						_makeColsResizable : function() {
							var c = this, e = c.tbody.closest(".bDiv"), d = c.element
									.closest(".om-grid"), b = c.pager;
							a('th[axis^="col"] div', c.thead)
									.resizable(
											{
												handles : "e",
												containment : "document",
												minWidth : 60,
												resize : function(i, j) {
													var k = a(this), g = k
															.parent().attr(
																	"abbr"), h = a(
															'td[abbr="' + g + '"] > div',
															c.tbody), f = c.thead
															.closest(".hDiv");
													k.width(j.size.width)
															.height("");
													h.width(j.size.width)
															.height("");
													e.height(d.height()
															- f.outerHeight()
															- b.outerHeight())
												}
											})
						},
						setData : function(b) {
							this.options.dataSource = b;
							this.pageData = {
								nowPage : 1,
								totalPages : 1
							};
							this._populate()
						},
						getData : function() {
							return this.pageData.data
						},
						refresh : function() {
							if (this.loading) {
								return true
							}
							this.loading = true;
							var b = this.options;
							a(".pPageStat", this.pager).html(b.loadingMsg);
							this.loadMask.show();
							this._buildPager();
							this._renderDatas();
							b.onRefresh(this.pageData.nowPage || 1,
									this.pageData.data.rows);
							this.loadMask.hide();
							this.loading = false
						},
						reload : function(b) {
							if (this.loading) {
								return true
							}
							if (typeof b !== "undefined") {
								b = parseInt(b) || 1;
								if (b < 0) {
									b = 1
								}
								if (b > this.pageData.totalPages) {
									b = this.pageData.totalPages
								}
								this.pageData.nowPage = b
							}
							this._populate()
						},
						setSelections : function(c) {
							var b = this;
							if (!a.isArray(c)) {
								c = [ c ]
							}
							var d = this.getSelections();
							a(d).each(function() {
								b._rowDeSelect(this)
							});
							a(c).each(function() {
								b._rowSelect(this)
							})
						},
						getSelections : function(d) {
							var e = this, c = a("tr.om-state-highlight",
									this.tbody), b = [];
							if (d) {
								var f = e.pageData.data.rows;
								c.each(function() {
									b[b.length] = f[a(this).index()]
								})
							} else {
								c.each(function() {
									b[b.length] = a(this).index()
								})
							}
							return b
						}
					})
})(jQuery);
(function(a) {
	a
			.widget(
					"om.omMenu",
					{
						options : {
							contextMenu : false,
							maxWidth : 200,
							minWidth : 100,
							dataSource : "local"
						},
						show : function(g) {
							var c = this, d = c.options, i, h, e = c.element;
							if (d.contextMenu) {
								i = g.pageY;
								h = g.pageX;
								g.preventDefault();
								g.stopPropagation();
								g.cancelBubble = true
							} else {
								var b = parseInt(a(g).css("borderBottomWidth")
										.replace("px", ""));
								var f = a(g).offset();
								i = f.top + a(g).height()
										+ (b != "NaN" ? b : 0) + 1;
								h = f.left + 1
							}
							a(e).css( {
								top : i,
								left : h
							}).show();
							a(e).children("ul.om-menu").show()
						},
						hide : function() {
							this._hide()
						},
						disableItem : function(e) {
							var c = this, d = c.element;
							var b = d.find("#" + e);
							b.addClass("om-state-disabled");
							b.unbind("mouseenter.menuItem").unbind(
									"mouseleave.menuItem").unbind(
									"mousedown.menuItem")
						},
						enableItem : function(e) {
							var c = this, d = c.element;
							var b = d.find("#" + e);
							b.removeClass("om-state-disabled");
							c._bindLiEvent(b)
						},
						_create : function() {
							var c = this.element, b = this.options;
							a(c)
									.css( {
										position : "absolute",
										minWidth : b.minWidth,
										maxWidth : b.maxWidth - 10
									})
									.addClass(
											"om-menu-container om-menu-content om-corner-all");
							if (a.browser.msie && a.browser.version == "6.0") {
								a(c).css("width", b.minWidth + 30)
							}
						},
						_init : function() {
							var c = this, d = c.options, f = c.element, e = d.dataSource;
							if (e) {
								if (e != "local") {
									if (typeof e == "string") {
										c._ajaxLoad(f, e)
									} else {
										if (typeof e == "object") {
											f.append(c._appendNodes.apply(c,
													[ e ]));
											c._bindEvent()
										}
									}
								} else {
									var b = c.element.children("ul").addClass(
											"om-menu");
									c._parseDomMenu(b);
									c._bindEvent()
								}
							}
						},
						_ajaxLoad : function(d, c) {
							var b = this;
							a.ajax( {
								url : c,
								method : "POST",
								dataType : "json",
								success : function(e) {
									d.append(b._appendNodes.apply(b, [ e ]));
									b._bindEvent()
								}
							})
						},
						_appendNodes : function(h, d) {
							var b = this, c = [];
							var f = (d == undefined) ? "om-menu"
									: "om-menu-content";
							var i = (d == undefined) ? "block" : "none";
							var e = (d == undefined) ? "om-menu-icon"
									: "om-menu-icon om-menu-icon-child";
							c.push('<ul class="' + f
									+ ' om-corner-all" style="display:' + i
									+ ';">');
							var g = [];
							a(h)
									.each(
											function(k, l) {
												if (l.children != null) {
													if (l.disabled === true
															|| l.disabled == "true") {
														g
																.push('<li id="' + l.id + '" aria-haspopup="true"  class="om-state-disabled">')
													} else {
														g
																.push('<li id="' + l.id + '"  aria-haspopup="true">')
													}
													g
															.push('<a href="javascript:void(0)" class="om-corner-all om-menu-indicator">');
													l.icon ? g
															.push('<img class="'
																	+ e
																	+ '" src="'
																	+ l.icon
																	+ '">')
															: null;
													l.icon ? g.push("<span>"
															+ l.label
															+ "</span>")
															: g
																	.push('<span style="margin-left:2em;">'
																			+ l.label
																			+ "</span>");
													g
															.push('<span class="ui-icon-span" role="popup"></span>');
													g.push("</a>");
													g.push(b._appendNodes(
															l.children, k++));
													g.push("</li>")
												} else {
													if (l.disabled === true
															|| l.disabled == "true") {
														g
																.push('<li id="' + l.id + '"  class="om-state-disabled">')
													} else {
														g
																.push('<li id="' + l.id + '" >')
													}
													g
															.push('<a href="javascript:void(0)" class="om-corner-all om-menu-indicator">');
													l.icon ? g
															.push('<img class="'
																	+ e
																	+ '" src="'
																	+ l.icon
																	+ '">')
															: null;
													l.icon ? g.push("<span>"
															+ l.label
															+ "</span>")
															: g
																	.push('<span style="margin-left:2em;">'
																			+ l.label
																			+ "</span>");
													g.push("</a>");
													g.push("</li>")
												}
												if (l.seperator == "true"
														|| l.seperator == true) {
													g
															.push('<li class="om-menu-sep-li"  ><span class="om-menu-item-sep">&nbsp;</span></li>')
												}
												var j = a(b.element).attr("id")
														+ "_" + l.id;
												a(b.element).data(j, l)
											});
							c.push(g.join(""));
							c.push("</ul>");
							return c.join("")
						},
						_parseDomMenu : function(f) {
							if (f.parent().attr("aria-haspopup") == "true") {
								f.addClass("om-menu-content om-corner-all")
										.css("display", "none")
							}
							var d = f.children();
							for ( var e = 0; e < d.length; e++) {
								var b = a(d[e]), c = b.children("ul");
								if (c.length > 0) {
									b.attr("aria-haspopup", "true");
									b.find("span[role='popup']").addClass(
											"ui-icon-span");
									this._parseDomMenu(c)
								}
								b.find("a").addClass(
										"om-corner-all om-menu-indicator");
								b.find("img").addClass("om-menu-icon")
							}
						},
						_showChildren : function(b) {
							if (b && b.length > 0) {
								var c = b.children("ul").eq(0);
								c.css( {
									minWidth : this.options.minWidth,
									maxWidth : this.options.maxWidth,
									top : b.position().top
								});
								if (a.browser.msie
										&& a.browser.version == "6.0") {
									(b.parent().parent()
											.hasClass("om-menu-container")) ? c
											.css("left", 0) : c.css("left", b
											.width());
									c.css("width", this.options.minWidth)
								} else {
									c.css("left", b.width())
								}
								c.css("display", "block");
								c.show()
							}
						},
						_hideChildren : function(b) {
							b.children("ul").eq(0).hide()
						},
						_bindLiEvent : function(b) {
							var c = this, e = c.element, d = c.options;
							a(b).bind("mouseenter.menuItem", function() {
								var f = a(this);
								f.addClass("om-menu-item-hover");
								if (f.attr("aria-haspopup")) {
									setTimeout(function() {
										c._showChildren(f)
									}, 200)
								}
							}).bind("mouseleave.menuItem", function() {
								var f = a(this);
								f.removeClass("om-menu-item-hover");
								setTimeout(function() {
									f.children("ul").hide()
								}, 200)
							}).bind(
									"mousedown.menuItem",
									function(g) {
										var f = a(e)
												.data(
														a(e).attr("id") + "_"
																+ this.id);
										if (d.onSelect) {
											d.onSelect(f);
											g.preventDefault();
											g.stopPropagation();
											g.cancelBubble = true
										}
									})
						},
						_bindEvent : function() {
							var b = this, g = b.element, e = b.options;
							var h = g.find("ul");
							var d = g.find("li");
							for ( var f = 0; f < d.length; f++) {
								if (!a(d[f]).hasClass("om-state-disabled")) {
									b._bindLiEvent(d[f])
								}
							}
							for ( var c = 0; c < h.length; c++) {
								a(h[c])
										.bind(
												"mouseleave.menuContainer",
												function() {
													var i = a(this);
													if (i.parent().attr(
															"aria-haspopup") == "true") {
														i.hide()
													}
												})
							}
							a(document).bind("mousedown.omMenu", function() {
								b._hide()
							}).keyup(function(j) {
								var i = j.keyCode;
								switch (i) {
								case 40:
									b._selectNext();
									break;
								case 38:
									b._selectPrev();
									break;
								case 37:
									b._hideRight();
									break;
								case 39:
									b._showRight();
									break;
								case 13:
									if (g.css("display") == "block") {
										b._backfill(g)
									}
									break;
								case 27:
									b._hide();
									break;
								default:
									null
								}
							})
						},
						_hide : function() {
							var b = this, c = b.element;
							c.find("ul").css("display", "none");
							c.find("li.om-menu-item-hover").each(
									function(d, e) {
										a(e).removeClass("om-menu-item-hover")
									});
							c.hide()
						},
						_findNext : function(c) {
							var d = this;
							var b = c.next("li");
							if (b.hasClass("om-menu-sep-li")) {
								return b.next("li")
							} else {
								return b
							}
						},
						_findPrev : function(c) {
							var d = this;
							var b = c.prev("li");
							if (b.hasClass("om-menu-sep-li")) {
								return b.prev("li")
							} else {
								return b
							}
						},
						_selectNext : function() {
							var c = this, d = c.element, f;
							var b = d.find("li.om-menu-item-hover");
							var e = b.eq(b.length - 1);
							if (b.length == 0) {
								f = d.find("li").eq(0);
								f.addClass("om-menu-item-hover")
							} else {
								f = c._findNext(e);
								if (f.length <= 0) {
									return
								}
								f.addClass("om-menu-item-hover");
								e.removeClass("om-menu-item-hover")
							}
							this._hideChildren(e);
							this._showChildren(f)
						},
						_selectPrev : function() {
							var c = this, d = c.element, f;
							var b = d.find("li.om-menu-item-hover");
							var e = b.eq(b.length - 1);
							f = d.find("ul.om-menu > li");
							if (b.length == 0) {
								f.eq(f.length - 1).addClass(
										"om-menu-item-hover")
							} else {
								f = c._findPrev(e);
								if (f.length <= 0) {
									return
								}
								f.addClass("om-menu-item-hover");
								e.removeClass("om-menu-item-hover")
							}
							this._hideChildren(e);
							this._showChildren(f)
						},
						_hideRight : function() {
							var b = this, d = b.element;
							var c = d.find("li.om-menu-item-hover"), e = c
									.eq(c.length - 1);
							e.removeClass("om-menu-item-hover");
							b._hideChildren(e)
						},
						_showRight : function() {
							var c = this, d = c.element, f;
							var e = d.find("li.om-menu-item-hover"), b = e
									.eq(e.length - 1);
							if (b.attr("aria-haspopup") == "true") {
								f = b.children("ul").find("li").eq(0);
								f.addClass("om-menu-item-hover")
							}
							c._showChildren(f)
						},
						_backfill : function(b) {
							var c = b.find("li.om-menu-item-hover");
							c.eq(c.length - 1).mousedown()
						}
					})
})(jQuery);
(function(d, f) {
	var b = '<div class="om-messageBox om-widget om-widget-content om-corner-all" tabindex="-1"><div class="om-messageBox-titlebar om-widget-header om-helper-clearfix"><span class="om-messageBox-title"></span><a href="#" class="om-messageBox-titlebar-close"><span class="om-icon om-icon-closethick"></span></a></div><div class="om-messageBox-content om-widget-content"><table><tr vailgn="top"><td class="om-messageBox-imageTd"><div class="om-messageBox-image"/>&nbsp;</td><td class="om-message-content-html"></td></tr></table></div><div class="om-messageBox-buttonpane om-widget-content om-helper-clearfix"><div class="om-messageBox-buttonset"></div></div></div>';
	var c = function() {
		if (d.browser.msie && d.browser.version < 7) {
			var i = Math.max(document.documentElement.scrollHeight,
					document.body.scrollHeight), h = Math.max(
					document.documentElement.offsetHeight,
					document.body.offsetHeight);
			return (i < h) ? d(window).height() : i
		} else {
			return d(document).height()
		}
	};
	var a = function() {
		if (d.browser.msie) {
			var h = Math.max(document.documentElement.scrollWidth,
					document.body.scrollWidth), i = Math.max(
					document.documentElement.offsetWidth,
					document.body.offsetWidth);
			return (h < i) ? d(window).width() : h
		} else {
			return d(document).width()
		}
	};
	var e = function(k, h, i, j) {
		if (k.hasClass("om-messageBox-waiting")) {
			return
		}
		i ? i(j) : jQuery.noop();
		k.remove();
		h.remove()
	};
	var g = function(j) {
		var p = j.onClose;
		var k = d(b).appendTo(document.body).css("z-index", 9999).position( {
			of : window,
			collision : "fit"
		}).omDraggable( {
			containment : "document",
			cursor : "move",
			handle : ".om-messageBox-titlebar"
		}).hide().keydown(function(r) {
			if (r.keyCode && r.keyCode === d.ui.keyCode.ESCAPE) {
				e(k, q, null, false);
				r.preventDefault()
			}
		});
		var q = d('<div class="om-widget-overlay"/>').appendTo(document.body)
				.show().css( {
					height : c(),
					width : a()
				});
		var i = k.find("span.om-messageBox-title").html(j.title).next().hover(
				function() {
					d(this).addClass("om-state-hover")
				}, function() {
					d(this).removeClass("om-state-hover")
				}).focus(function() {
			d(this).addClass("om-state-focus")
		}).blur(function() {
			d(this).removeClass("om-state-focus")
		}).click(function(r) {
			e(k, q, null, false);
			return false
		}).bind("mousedown mouseup", function() {
			d(this).toggleClass("om-state-mousedown")
		});
		k.find("div.om-messageBox-image").addClass(
				"om-messageBox-image-" + j.type);
		var o = j.content;
		if (j.type == "prompt") {
			o = o || "";
			o += '<br/><input id="om-messageBox-prompt-input" type="text"/>'
		}
		k.find("td.om-message-content-html").html(o);
		var m = k.find("div.om-messageBox-buttonset");
		switch (j.type) {
		case "confirm":
			m.html("<button>确定</button><button>取消</button>").children().first()
					.click(function() {
						e(k, q, p, true)
					}).next().click(function() {
						e(k, q, p, false)
					});
			break;
		case "prompt":
			m.html("<button>确定</button><button>取消</button>").children().first()
					.click(
							function() {
								var r = p ? p(d("#om-messageBox-prompt-input")
										.val()) : jQuery.noop();
								if (r !== false) {
									k.remove();
									q.remove()
								}
							}).next().click(function() {
						e(k, q, p, false)
					});
			break;
		case "waiting":
			k.addClass("om-messageBox-waiting");
			q.addClass("om-messageBox-waiting");
			i.hide();
			m.parent().hide();
			break;
		default:
			m.html("<button>确定</button>").children().first().click(function() {
				e(k, q, p, true)
			})
		}
		var l = d("button", m);
		if (d.fn.omButton) {
			l.omButton()
		}
		k.show();
		var h = l.first()[0];
		h ? h.focus() : k.focus()
	};
	d.omMessageBox = {
		alert : function(h) {
			h = h || {};
			h.title = h.title || "提示";
			h.type = h.type || "alert";
			g(h)
		},
		confirm : function(h) {
			h = h || {};
			h.title = h.title || "确认";
			h.type = "confirm";
			g(h)
		},
		prompt : function(h) {
			h = h || {};
			h.title = h.title || "请输入";
			h.type = "prompt";
			g(h)
		},
		waiting : function(h) {
			if (h === "close") {
				d(".om-messageBox-waiting").remove();
				return
			}
			h = h || {};
			h.title = h.title || "请等待";
			h.type = "waiting";
			g(h)
		}
	}
}(jQuery));
(function(a, b) {
	a.omMessageTip = {
		show : function(d) {
			d = a.extend( {
				title : "提醒",
				content : "&#160;",
				type : "alert"
			}, d);
			var e = '<div class="om-messageTip om-widget om-corner-all" tabindex="-1"><div class="om-widget-header om-helper-clearfix"><span class="om-messageTip-title">'
					+ d.title
					+ '</span><a href="#" class="om-messageTip-titlebar-close"><span class="om-icon-closethick"></span></a></div><div class="om-messageTip-content om-widget-content"><div class="om-messageTip-image om-messageTip-image-'
					+ d.type
					+ '"></div><div class="om-messageTip-content-body">'
					+ d.content + "</div></div></div>";
			var f = a(e).appendTo(document.body).css("z-index", 10000).hide();
			var c = {
				d : f,
				l : d.onClose
			};
			f.find("a.om-messageTip-titlebar-close").bind(
					"mouseenter mouseleave", function() {
						a(this).toggleClass("om-state-hover")
					}).bind("focus blur", function() {
				a(this).toggleClass("om-state-focus")
			}).bind("mousedown mouseup", function() {
				a(this).toggleClass("om-state-mousedown")
			}).click(function(g) {
				a.omMessageTip._close(c);
				return false
			});
			f.slideDown("slow");
			if (d.timeout) {
				setTimeout(function() {
					a.omMessageTip._close(c)
				}, d.timeout)
			}
			return f
		},
		_close : function(c) {
			c.d.slideUp("slow");
			if (c.l) {
				c.l()
			}
			setTimeout(function() {
				c.d.remove()
			}, 1000)
		}
	}
}(jQuery));
(function(a) {
	var b = function(e, h, f) {
		12.2;
		var d = e.indexOf(".");
		if (isNaN(e) && e != ".") {
			for (; isNaN(e);) {
				e = e.substring(0, e.length - 1)
			}
		}
		if (!f.allowNegative && e.indexOf("-") != -1) {
			var g = e.split("-");
			e = g.join("")
		}
		if (!f.allowDecimals && d != -1 || e[e.length - 1] === ".") {
			return e.substring(0, d)
		}
		if (d != -1) {
			e = e.substring(0, d + f.decimalPrecision + 1)
		}
		return e
	};
	a
			.widget(
					"om.omNumberField",
					{
						options : {
							allowDecimals : true,
							allowNegative : true,
							decimalPrecision : 2,
							disabled : false,
							onBlur : function(c) {
							},
							readOnly : false
						},
						_create : function() {
							var c = this.options;
							this.element
									.addClass(
											"om-numberfield om-widget om-state-default om-state-nobg")
									.css("ime-mode", "disabled");
							if (typeof c.disabled !== "boolean") {
								this.options.disabled = this.element
										.attr("disabled")
							}
							if (c.readOnly) {
								this.element.attr("readonly", "readonly")
							}
							if (this.element.is(":disabled")) {
								this.options.disabled = true
							}
							this.element
									.keypress(
											function(g) {
												if (g.which == null
														&& (g.charCode != null || g.keyCode != null)) {
													g.which = g.charCode != null ? g.charCode
															: g.keyCode
												}
												var d = g.which;
												if (d === 8
														|| (d == 46 && g.button == -1)
														|| d === 0) {
													return
												}
												var f = String.fromCharCode(d);
												a.data(this, "character", f);
												var h = a.data(this, "allowed");
												if (h.indexOf(f) === -1
														|| (a(this).val()
																.indexOf("-") !== -1 && f == "-")
														|| (a(this).val()
																.indexOf(".") !== -1 && f == ".")) {
													g.preventDefault()
												}
											})
									.focus(function() {
										a(this).addClass("om-state-focus")
									})
									.blur(function() {
										a(this).removeClass("om-state-focus");
										var d = a.data(this, "character");
										this.value = b(this.value, d, c);
										c.onBlur.apply(this, [ this.value ])
									})
									.keydown(function(d) {
										if (229 === d.which) {
											d.preventDefault()
										}
									})
									.keyup(
											function(g) {
												var f = this.value, d = f.length;
												if (f
														&& a
																.data(this,
																		"allowed")
																.indexOf(
																		f
																				.charAt(d - 1)) === -1
														|| f.indexOf(".") != f
																.lastIndexOf(".")
														|| f.indexOf("-") != f
																.lastIndexOf("-")) {
													this.value = f.substring(0,
															d - 1)
												}
											}).bind("cut paste", function(d) {
										return false
									});
							this._setOption("disabled", c.disabled)
						},
						_setOption : function(c, d) {
							this._buildAllowChars();
							if (c === "disabled") {
								if (d) {
									this.element.attr(c, true);
									this.element
											.addClass("om-numberfield-disabled")
								} else {
									this.element.attr(c, false);
									this.element
											.removeClass("om-numberfield-disabled")
								}
							}
						},
						_buildAllowChars : function() {
							var c = "0123456789";
							if (this.options.allowDecimals) {
								c = c + "."
							}
							if (this.options.allowNegative) {
								c = c + "-"
							}
							if (this.options.readOnly) {
								c = ""
							}
							a.data(this.element[0], "allowed", c)
						}
					})
})(jQuery);
(function(a) {
	a.fn.omSlider = function(p) {
		var g = {
			slideTo : function(q) {
				return this.each(function() {
					c = a(this).data("omSlider:opts");
					f(a(this), q)
				})
			},
			next : function() {
				return this.each(function() {
					c = a(this).data("omSlider:opts");
					e(a(this))
				})
			},
			prev : function() {
				return this.each(function() {
					c = a(this).data("omSlider:opts");
					b(a(this))
				})
			}
		};
		if (g[p]) {
			return g[p].apply(this, Array.prototype.slice.call(arguments, 1))
		}
		var i = {
			autoPlay : true,
			interval : 5000,
			directionNav : false,
			pauseOnHover : true,
			controlNav : true,
			activeNavCls : "nav-selected",
			effect : "fade",
			animSpeed : 500,
			startSlide : 0,
			delay : 200,
			onBeforeSlide : function(q) {
			},
			onAfterSlide : function(q) {
			}
		};
		var c = a.extend( {}, i, p);
		function m(q) {
			return q.data("omSlider:vars")
		}
		function h(q, s, y) {
			var t = m(q), w = q.find("ul.om-slider-content"), v = w.children(), u = 0, r = 0;
			var x = y ? y : c.effect;
			if (c.effect == "random") {
				w.removeClass("om-slider-effect-" + x).addClass(
						"om-slider-effect-" + x)
			}
			if (x == "slide-v") {
				v.each(function(z) {
					if (z == s) {
						return false
					}
					u -= a(this).height()
				})
			} else {
				if (x == "slide-h") {
					v.each(function(z) {
						if (z == s) {
							return false
						}
						r -= a(this).width()
					})
				} else {
					return false
				}
			}
			t.running = true;
			w.stop().animate( {
				top : u,
				left : r
			}, c.animSpeed, function() {
				t.running = false;
				c.onAfterSlide.call(self, s)
			})
		}
		function j(s, r) {
			var t = m(s), q = s.find("ul.om-slider-content").children();
			q.each(function(v) {
				var u = a(this);
				if (v == r) {
					t.running = true;
					u.fadeIn(c.animSpeed, function() {
						t.running = false;
						c.onAfterSlide.call(self, r)
					})
				} else {
					if (v == t.currentSlide) {
						u.fadeOut(c.animSpeed)
					}
				}
			})
		}
		function k(s, r) {
			var t = m(s), q = s.find("ul.om-slider-content").children();
			q.each(function(v) {
				var u = a(this);
				if (v == r) {
					u.show();
					c.onAfterSlide.call(self, r)
				} else {
					if (v == t.currentSlide) {
						u.hide()
					}
				}
			})
		}
		function d(t, r) {
			var u = m(t);
			var s = t;
			if (u.customNav) {
				s = a("body")
			}
			var q = s.find(u.controlNav).children();
			q.each(function(v) {
				a(this).toggleClass(c.activeNavCls, v == r)
			})
		}
		function f(s, q) {
			var t = m(s), u = s.find("ul.om-slider-content");
			if (isNaN(q) || q < 0 || q >= t.totalSlides) {
				return
			}
			if (c.onBeforeSlide.call(self, q) == false) {
				return false
			}
			if (c.effect == "random") {
				var v = [ "fade", "slide-h", "slide-v" ];
				var r = v[Math.floor(Math.random() * 3)];
				u.removeClass().addClass("om-slider-content");
				u.removeAttr("style");
				u.find("li").removeAttr("style");
				if (r == "slide-h" || r == "slide-v") {
					h(s, q, r)
				} else {
					j(s, q)
				}
			} else {
				if (c.effect == "slide-h" || c.effect == "slide-v") {
					h(s, q)
				} else {
					if (c.effect == "fade" || c.effect === true) {
						j(s, q)
					} else {
						k(s, q)
					}
				}
			}
			if (t.controlNav) {
				d(s, q)
			}
			t.currentSlide = q;
			return s
		}
		function e(r) {
			var s = m(r), q = 0;
			if (s.currentSlide + 2 <= s.totalSlides) {
				q = s.currentSlide + 1
			}
			return f(r, q)
		}
		function b(r) {
			var s = m(r), q = s.totalSlides - 1;
			if (s.currentSlide != 0) {
				q = s.currentSlide - 1
			}
			return f(r, q)
		}
		function l(r) {
			var s = m(r), q = a('<div class="om-slider-directionNav">')
					.appendTo(r);
			a('<a class="om-slider-prevNav"></a>').appendTo(q).click(
					function() {
						if (s.running) {
							return false
						}
						b(r)
					});
			a('<a class="om-slider-nextNav"></a>').appendTo(q).click(
					function() {
						if (s.running) {
							return false
						}
						e(r)
					});
			r.hover(function() {
				q.show()
			}, function() {
				q.hide()
			})
		}
		function o(t) {
			var u = m(t);
			if (c.controlNav === true || c.controlNav === "classical") {
				var q = a('<ul class="om-slider-nav-classical"></ul>');
				u.controlNav = ".om-slider-nav-classical";
				for (n = 0; n < u.totalSlides; n++) {
					var r = a("<li>" + (n + 1) + "</li>");
					r.data("sid", n);
					var s = 0;
					r.click(function() {
						f(t, a(this).data("sid"))
					});
					r.hover(function() {
						if (u.running) {
							return false
						}
						var v = a(this);
						if (v.hasClass(c.activeNavCls)) {
							return false
						}
						s = setTimeout(function() {
							f(t, v.data("sid"))
						}, c.delay)
					}, function() {
						clearTimeout(s)
					});
					q.append(r)
				}
				t.append(q)
			} else {
				if (c.controlNav === "dot") {
					var q = a('<div class="om-slider-nav-dot"></div>');
					u.controlNav = ".om-slider-nav-dot";
					for (n = 0; n < u.totalSlides; n++) {
						var r = a('<a href="javascript:void(0)">' + (n + 1)
								+ "</a>");
						r.data("sid", n);
						var s = 0;
						r.click(function() {
							f(t, a(this).data("sid"))
						});
						r.hover(function() {
							if (u.running) {
								return false
							}
							var v = a(this);
							if (v.hasClass(c.activeNavCls)) {
								return false
							}
							s = setTimeout(function() {
								f(t, v.data("sid"))
							}, c.delay)
						}, function() {
							clearTimeout(s)
						});
						q.append(r)
					}
					q.appendTo(t).css( {
						marginLeft : -1 * q.width() / 2
					})
				} else {
					if (a(c.controlNav).length > 0) {
						u.controlNav = c.controlNav;
						u.customNav = true;
						var q = a(c.controlNav);
						q.children().each(function(x) {
							var v = a(this);
							v.data("sid", x);
							var w = 0;
							v.click(function() {
								f(t, a(this).data("sid"))
							});
							v.hover(function() {
								if (u.running) {
									return false
								}
								var y = a(this);
								if (y.hasClass(c.activeNavCls)) {
									return false
								}
								w = setTimeout(function() {
									f(t, y.data("sid"))
								}, c.delay)
							}, function() {
								clearTimeout(w)
							})
						})
					}
				}
			}
		}
		return this
				.each(function() {
					var v = 0;
					var u = a(this);
					var t = {
						currentSlide : 0,
						totalSlides : 0,
						running : false,
						paused : false,
						stop : false,
						controlNav : ".om-slider-nav-classical"
					};
					var s = u.data("omSlider");
					if (s) {
						return s
					}
					u.data("omSlider", u).data("omSlider:vars", t).data(
							"omSlider:opts", c).addClass("om-slider");
					if (c.startSlide > 0) {
						t.currentSlide = c.startSlide
					}
					var r = u.children();
					r.wrapAll('<ul class="om-slider-content"></ul>').wrap(
							'<li class="om-slider-item"></li>');
					if (c.effect == "slide-v" || c.effect == "slide-h") {
						u.find(".om-slider-content").addClass(
								"om-slider-effect-" + c.effect)
					}
					t.totalSlides = r.length;
					o(u);
					function q(y, x) {
						if (isNaN(x) || x < 0 || x >= t.totalSlides) {
							return
						}
						var B = y.find("ul.om-slider-content"), w = B
								.children(), A = 0, z = 0;
						if (c.effect == "slide-h") {
							w.each(function(C) {
								if (C == x) {
									return false
								}
								z -= a(this).width()
							});
							setTimeout(function() {
								B.css( {
									left : z,
									top : A
								})
							}, 0)
						} else {
							if (c.effect == "slide-v") {
								w.each(function(C) {
									if (C == x) {
										return false
									}
									A -= a(this).height()
								});
								setTimeout(function() {
									B.css( {
										left : z,
										top : A
									})
								}, 0)
							} else {
								B.children().eq(x).show()
							}
						}
						if (t.controlNav) {
							d(y, x)
						}
						if (c.autoPlay) {
							v = setInterval(function() {
								e(y)
							}, c.interval)
						}
						if (c.pauseOnHover) {
							y.hover(function() {
								t.paused = true;
								clearInterval(v)
							}, function() {
								t.paused = false;
								if (c.autoPlay) {
									v = setInterval(function() {
										e(y)
									}, c.interval)
								}
							})
						}
						if (c.directionNav) {
							l(y)
						}
					}
					if (c.startSlide > 0
							&& (c.effect == "slide-h" || c.effect == "slide-v")) {
						a(window).load(function() {
							q(u, c.startSlide)
						})
					} else {
						q(u, c.startSlide)
					}
				})
	}
})(jQuery);
(function(c) {
	var a = "om-suggestion-list-row";
	var b = "om-state-hover";
	c
			.widget(
					"om.omSuggestion",
					{
						options : {
							disabled : false,
							readOnly : false,
							minChars : 1,
							delay : 500,
							cacheSize : 10,
							method : "GET",
							listMaxHeight : 300,
							queryName : "key",
							crossDomain : false,
							onBeforeSuggest : function(d) {
							},
							onSuggesting : function(d) {
							},
							onSuccess : function(d, e) {
							},
							onError : function(e, f, d) {
							},
							onSelect : function(e, f, d) {
							}
						},
						_create : function() {
							this.element
									.addClass("om-suggestion om-widget om-state-default om-state-nobg");
							this.dropList = c(
									'<div class="om-widget"><div class="om-widget-content om-droplist"></div></div>')
									.css("position", "absolute").appendTo(
											document.body).children().first()
									.hide()
						},
						_init : function() {
							var d = this, e = this.options, g = this.element
									.attr("autocomplete", "off"), f = this.dropList;
							if (e.minChars < 0) {
								e.minChars = 0
							}
							if (e.cacheSize < 0) {
								e.cacheSize = 0
							}
							if (e.delay < 0) {
								e.delay = 0
							}
							e.disabled ? this.disable() : this.enable();
							e.readOnly ? g.attr("readonly", "readonly") : g
									.removeAttr("readonly");
							g.focus(function() {
								c(this).addClass("om-state-focus")
							}).blur(function() {
								c(this).removeClass("om-state-focus")
							}).keydown(function(h) {
								if (h.keyCode == 9) {
									f.hide()
								}
							}).keyup(function(j) {
								var i = j.keyCode;
								switch (i) {
								case 40:
									if (f.css("display") !== "none") {
										d._selectNext()
									} else {
										if (f.find("." + a).size() > 0) {
											f.show()
										}
									}
									break;
								case 38:
									if (f.css("display") !== "none") {
										d._selectPrev()
									} else {
										if (f.find("." + a).size() > 0) {
											f.show()
										}
									}
									break;
								case 13:
									if (f.css("display") === "none") {
										return
									}
									f.hide();
									d._triggerOnSelect();
									return false;
								case 27:
									f.hide();
									break;
								case 9:
									break;
								default:
									if (e.disabled || e.readOnly) {
										return false
									}
									if (e.delay > 0) {
										var h = c.data(g, "delayTimer");
										if (h) {
											clearTimeout(h)
										}
										h = setTimeout(function() {
											d._suggest()
										}, e.delay);
										c.data(g, "delayTimer", h)
									} else {
										d._suggest()
									}
								}
							}).mousedown(function(h) {
								h.stopPropagation()
							});
							f.mousedown(function(h) {
								h.stopPropagation()
							});
							c(document).bind("mousedown.omSuggestion",
									function() {
										f.hide()
									})
						},
						clearCache : function() {
							c.removeData(this.element, "cache")
						},
						showMessage : function(f) {
							var g = this.element;
							var e = this.dropList.empty().css("height", "auto");
							c("<div>" + f + "<div>").appendTo(e);
							e.parent().css("left", g.offset().left).css("top",
									g.offset().top + g.outerHeight());
							var h = this.options.listWidth;
							if (!h) {
								e.parent().width(g.outerWidth())
							} else {
								if (h !== "auto") {
									e.parent().width(h)
								}
							}
							e.show();
							var d = this.options.listMaxHeight;
							if (d !== "auto") {
								if (e.height() > d) {
									e.height(d).css("overflow", "auto")
								}
							}
							return this
						},
						disable : function() {
							this.options.disabled = true;
							return this.element.attr("disabled", "disabled")
									.addClass("om-state-disabled")
						},
						enable : function() {
							this.options.disabled = false;
							return this.element.removeAttr("disabled")
									.removeClass("om-state-disabled")
						},
						setData : function(e) {
							var d = this.options;
							if (e) {
								d.dataSource = e
							}
							if (d.cacheSize > 0) {
								this.clearCache()
							}
						},
						getData : function() {
							var d = c.data(this.element, "records");
							return d || null
						},
						getDropList : function() {
							return this.dropList
						},
						_clear : function() {
							this.element.val("");
							return this.dropList.find("." + a).removeClass(b)
						},
						_selectNext : function() {
							var e = this.dropList, d = e.find("." + b).index(), f = this
									._clear();
							d += 1;
							if (d >= f.size()) {
								d = 0
							}
							this._scrollToAndSelect(f, d, e)
						},
						_selectPrev : function() {
							var e = this.dropList, d = e.find("." + b).index(), f = this
									._clear();
							d -= 1;
							if (d < 0) {
								d = f.size() - 1
							}
							this._scrollToAndSelect(f, d, e)
						},
						_scrollToAndSelect : function(g, d, f) {
							var h = c(g.get(d)).addClass(b);
							var e = h.position().top;
							if (e <= 0) {
								f.scrollTop(f.scrollTop() + e)
							} else {
								var i = e + h.outerHeight() - f.height();
								if (i > 0) {
									f.scrollTop(f.scrollTop() + i)
								}
							}
							this._select(d)
						},
						_select : function(e) {
							var g = this.element;
							var d = c.data(g, "records");
							var f, h;
							if (d.valueField) {
								f = d.data[e];
								h = f[d.valueField]
							} else {
								f = d[e];
								h = f
							}
							g.val(h);
							c.data(g, "lastStr", h)
						},
						_suggest : function() {
							var g = this.element;
							var i = g.val();
							var h = c.data(g, "lastStr");
							if (h && h === i) {
								return
							}
							c.data(g, "lastStr", i);
							var l = this.options;
							var d = c.data(g, "cache");
							if (i.length > 0 && i.length >= l.minChars) {
								if (d) {
									var e = d[i];
									if (e) {
										c.data(g, "records", e);
										this._buildDropList(e, i);
										return
									}
								}
								if (l.onBeforeSuggest) {
									if (l.onBeforeSuggest(i) === false) {
										this.dropList.empty().hide();
										return
									}
								}
								var k = this;
								var j = {
									url : l.dataSource,
									type : l.method,
									dataType : l.crossDomain ? "jsonp" : "json",
									data : {},
									success : function(r, t) {
										var s = l.onSuccess;
										if (s && s(r, t) === false) {
											return
										}
										var p = l.preProcess;
										if (p) {
											r = p(i, r)
										}
										if (typeof r === "undefined") {
											r = []
										}
										if (l.cacheSize > 0) {
											var o = c.data(g, "cache") || {
												___keys : []
											};
											var q = o.___keys;
											if (q.length == l.cacheSize) {
												var m = q[0];
												o.___keys = q.slice(1);
												o[m] = undefined
											}
											o[i] = r;
											o.___keys.push(i);
											c.data(g, "cache", o)
										}
										c.data(g, "records", r);
										k._buildDropList(r, i)
									},
									error : function(o, q, p) {
										var m = l.onError;
										if (m) {
											m(o, q, p)
										}
									}
								};
								j.data[l.queryName] = i;
								c.ajax(j);
								var f = l.onSuggesting;
								if (f) {
									f(i)
								}
							} else {
								this.dropList.empty().hide()
							}
						},
						_buildDropList : function(e, k) {
							var j = this.element;
							var d = this.dropList.empty().css("height", "auto");
							var g = e.valueField ? false : true;
							var l = this.options.clientFormatter;
							var m = this;
							if (g) {
								if (l) {
									c(e).each(function(o) {
										m._addRow(l(this, o), d)
									})
								} else {
									c(e).each(function(o) {
										m._addRow(this, d)
									})
								}
							} else {
								if (l) {
									c(e.data).each(function(o) {
										m._addRow(l(this, o), d)
									})
								}
							}
							var i = d.find("." + a);
							if (i.size() > 0) {
								d.parent().css("left",
										parseInt(j.offset().left)).css("top",
										j.offset().top + j.outerHeight());
								var h = this.options.listWidth;
								if (!h) {
									d.parent().width(j.outerWidth())
								} else {
									if (h !== "auto") {
										d.parent().width(h)
									}
								}
								i.mouseover(function() {
									i.removeClass(b);
									c(this).addClass(b)
								}).mousedown(function() {
									var o = d.find("." + b).index();
									m._select(o);
									d.hide();
									m._triggerOnSelect()
								});
								d.show();
								var f = this.options.listMaxHeight;
								if (f !== "auto") {
									if (d.height() > f) {
										d.height(f).css("overflow", "auto")
									}
								}
								d.scrollTop(0)
							}
						},
						_addRow : function(e, d) {
							c('<div class="' + a + '">' + e + "</div>")
									.appendTo(d)
						},
						_triggerOnSelect : function() {
							var f = this.options.onSelect;
							if (f) {
								var e = this.dropList.find("." + b).index();
								if (e < 0) {
									return
								}
								var d = c.data(this.element, "records"), g, h;
								if (d.valueField) {
									g = d.data[e];
									h = g[d.valueField]
								} else {
									g = d[e];
									h = g
								}
								f(g, h, e)
							}
						}
					})
})(jQuery);
(function() {
	var e = "om-tabs-"
			+ (((1 + Math.random()) * 65536) | 0).toString(16).substring(1)
			+ "-", r = 0;
	function o(D, C) {
		if (C.content) {
			$(D).text(C.content)
		}
		$(D).omPanel(C);
		return D
	}
	function k(C) {
		var D = $(C)
				.find(">ul")
				.wrap(
						'<div class="om-tabs-headers om-helper-reset om-helper-clearfix om-widget-header om-corner-all"></div>')
				.parent().parent();
		D
				.addClass("om-tabs om-widget om-widget-content om-corner-all")
				.append(
						'<div class="om-tabs-panels om-widget-content om-corner-bottom"></div>');
		return D
	}
	function q(D) {
		var E = $.data(D, "omtabs").options;
		var C = [];
		$(D)
				.find(">div.om-tabs-headers a")
				.each(
						function() {
							var G = this.getAttribute("href", 2);
							var K = G.split("#")[0], M;
							if (K
									&& (K === location.toString().split("#")[0] || (M = $("base")[0])
											&& K === M.href)) {
								G = this.hash;
								this.href = G
							}
							var I = $(this);
							var H = I.attr("tabId") || I.attr("id") || e + r++;
							I.attr("tabId", H);
							var F = {
								tabId : H,
								title : I.text(),
								noHeader : true,
								onLoad : function() {
									E.onLoadComplete.call(D, H)
								},
								closed : true,
								lazyLoad : true,
								border : false
							};
							var L = $(">" + G, $(D))[0];
							if (!L && G.indexOf("#") != 0) {
								F.url = G
							}
							var J = new o(L || $("<div></div>")[0], F);
							C.push(J)
						});
		return C
	}
	function B(D) {
		var F = $.data(D, "omtabs"), E = F.options, H = F.omtabs, C = F.items;
		if (typeof E.active == "number") {
			if (E.active < 0) {
				E.active = 0
			}
			if (E.active > C.length - 1) {
				E.active = C.length - 1
			}
		}
		if (E.width == "fit") {
			H.css("width", "100%")
		} else {
			if (E.width != "auto") {
				H.css("width", E.width);
				var G = isNaN(E.width) && E.width.indexOf("%") != -1;
				H.children(":first").css("width", G ? "100%" : E.width)
			}
		}
		if (E.height == "fit") {
			H.css("height", "100%")
		} else {
			if (E.height != "auto") {
				H.css("height", E.height)
			}
		}
		y(D);
		c(D)
	}
	function y(C) {
		var F = $.data(C, "omtabs"), E = F.options, I = F.omtabs;
		var H = I.find(">div.om-tabs-headers");
		var D = H.find("ul li");
		D.addClass("om-state-default om-corner-top");
		D.each(function(K) {
			var J = $(this).find("a:first");
			if ($.browser.msie && parseInt($.browser.version) == 7) {
				J.attr("hideFocus", "true")
			}
			if (!J.hasClass("om-tabs-inner")) {
				J.addClass("om-tabs-inner")
			}
			if (K === E.active || E.active === J.attr("tabId")) {
				$(this).addClass("om-tabs-activated om-state-active");
				E.activeTabId = J.attr("tabId");
				E.active = K
			}
			J.css( {
				width : E.tabWidth,
				height : E.tabHeight
			});
			if (E.closable === true
					|| ($.isArray(E.closable) && -1 !== $
							.inArray(K, E.closable))) {
				$('<a class="om-icon om-icon-close"></a>').insertAfter(J)
			}
		});
		var G = D.find("a").height();
		D.parent().css( {
			height : ++G,
			"line-height" : G + "px"
		});
		H.height(G + 2);
		j(C) && A(C)
	}
	function c(L) {
		var G = $.data(L, "omtabs"), M = G.options, E = G.omtabs, I = G.items;
		var H = E.find(">div.om-tabs-panels");
		H.children().detach();
		var K = E.attr("style");
		if (K && K.indexOf("height") != -1) {
			var D = E.innerHeight(), J = E.find(">div.om-tabs-headers")
					.outerHeight();
			H.css("height", D - J)
		}
		if (!M.border) {
			E.css("border-width", "0")
		}
		var F = I.length;
		while (F--) {
			var C = $(I[F]).omPanel("panel");
			C.prependTo(H)
		}
	}
	function u(D) {
		var G = $.data(D, "omtabs"), E = G.options, C = G.items, I = G.omtabs;
		var F = C.length;
		$(D).children().each(
				function() {
					if (!$(this).hasClass("om-tabs-headers")
							&& !$(this).hasClass("om-tabs-panels")) {
						$(this).remove()
					}
				});
		if (!E.lazyLoad) {
			$(C).omPanel("reload")
		}
		while (F--) {
			var H = $(C[F]);
			if (F == E.active) {
				H.omPanel("open")
			} else {
				H.omPanel("close")
			}
		}
		I.css("height", I.height());
		I.css("height", E.height)
	}
	function a(C) {
		var G = $.data(C, "omtabs"), E = G.options, J = G.omtabs;
		J.find(">div.om-tabs-headers a.om-icon-close").bind("click.omtabs",
				function(L) {
					var K = $(L.target).prev().attr("tabId");
					d(C, K);
					return false
				});
		var I = J.find(">div.om-tabs-headers a.om-tabs-inner");
		if (E.switchMode.indexOf("mouseover") != -1) {
			I.bind("mouseover.omtabs", function() {
				var K = $(this).attr("tabId"), L = $.data(C, "activateTimer");
				(typeof L !== "undefined") && clearTimeout(L);
				L = setTimeout(function() {
					i(C, K);
					return false
				}, 500);
				$.data(C, "activateTimer", L)
			})
		} else {
			if (E.switchMode.indexOf("click") != -1) {
				I.bind("click.omtabs", function() {
					i(C, $(this).attr("tabId"))
				})
			}
		}
		I.bind("click.omtabs", function() {
			return false
		});
		if (E.autoPlay != false) {
			E.autoInterId = setInterval(function() {
				$(C).omTabs("activate", "next")
			}, E.interval)
		}
		if (E.switchMode.indexOf("mouseover") == -1) {
			var D = J.find(">div.om-tabs-headers li");
			var F = function(L, K) {
				if (K.is(":not(.om-state-disabled)")) {
					K.addClass("om-state-" + L)
				}
			};
			var H = function(L, K) {
				K.removeClass("om-state-" + L)
			};
			D.bind("mouseover.omtabs", function() {
				F("hover", $(this))
			});
			D.bind("mouseout.omtabs", function() {
				H("hover", $(this))
			})
		}
		J.find(">div.om-tabs-headers >span").bind("click.omtabs", function(O) {
			if ($(this).hasClass("om-tabs-scroll-disabled")) {
				return false
			}
			var M = $(this).offset();
			var L = $(this).parent().find("ul");
			var K = L.children(":last");
			var P = K.outerWidth(true);
			var N = $(this).parent();
			if ($(this).hasClass("om-tabs-scroll-left")) {
				l(C, P, w(C))
			}
			if ($(this).hasClass("om-tabs-scroll-right")) {
				l(C, -P, w(C))
			}
			return false
		})
	}
	function g(C) {
		var E = $.data(C, "omtabs"), D = E.options, G = E.omtabs;
		var F = G.find(">div.om-tabs-headers");
		F.children().unbind(".omtabs");
		F.find(">ul >li >a").unbind(".omtabs");
		if (D.autoInterId) {
			clearInterval(D.autoInterId)
		}
	}
	function i(R, D) {
		var J = $.data(R, "omtabs"), S = J.options, F = J.omtabs, O = J.items;
		var N = F.find(">div.om-tabs-headers ul");
		if (S.activeTabId == D || S.active == D) {
			return false
		}
		D = D || 0;
		var K, G = D;
		if (D == "next") {
			D = (S.active + 1) % O.length
		} else {
			if (D == "prev") {
				D = (S.active - 1) % O.length
			}
		}
		if (typeof D == "number") {
			G = t(R, D)
		} else {
			if (typeof D == "string") {
				D = t(R, D)
			}
		}
		if (S.onBeforeActivate.call(R, D) == false) {
			return false
		}
		K = N.find("li a[tabId=" + G + "]");
		K.parent().siblings().removeClass("om-tabs-activated om-state-active");
		K.parent().addClass("om-tabs-activated om-state-active");
		S.activeTabId = G;
		S.active = D;
		var I = O.length;
		for (I = O.length; I--; I >= 0) {
			var M = $(O[I]);
			if (M.omPanel("options").tabId == G) {
				M.omPanel("open")
			}
		}
		for (I = O.length; I--; I >= 0) {
			var M = $(O[I]);
			if (M.omPanel("options").tabId != G) {
				M.omPanel("close")
			}
		}
		if (j(R)) {
			N.stop(true, true);
			$(R).clearQueue();
			var Q = N.prev();
			var L = N.next();
			var C = K.parent().offset().left;
			var H = C + K.parent().outerWidth(true);
			var P = Q.offset().left + Q.outerWidth(true) + 4 - C;
			var E = L.offset().left - H;
			if (P >= 0) {
				l(R, P, w(R))
			} else {
				if (E <= 0) {
					l(R, E, w(R))
				} else {
					w(R)()
				}
			}
		}
		S.onActivate.call(R, D)
	}
	function t(D, F) {
		var E = $.data(D, "omtabs").omtabs, C;
		if (typeof F == "number") {
			C = E.find(
					">div.om-tabs-headers li:nth-child(" + ++F
							+ ") a.om-tabs-inner").attr("tabId")
		} else {
			if (typeof F == "string") {
				E.find(">div.om-tabs-headers li a.om-tabs-inner").each(
						function(G) {
							if ($(this).attr("tabId") == F) {
								C = G;
								return false
							}
						})
			}
		}
		return C
	}
	function f(C) {
		var D = $.data(C, "omtabs").options;
		return D.activeTabId
	}
	function v(M, D) {
		var H = $.data(M, "omtabs"), N = H.options, F = H.omtabs, L = H.items;
		var K = F.find(">div.om-tabs-headers ul");
		var C = D.tabId ? D.tabId : e + r++;
		D.index = D.index || "last";
		if (D.index == "last" || D.index > L.length - 1) {
			D.index = L.length
		}
		D.title = D.title || "New Title " + C;
		D.url = $.trim(D.url);
		D.content = $.trim(D.content);
		if (D.url) {
			D.content = undefined
		} else {
			D.url = undefined;
			D.content = D.content || "New Content " + C
		}
		if (N.onBeforeAdd.call(M, D) == false) {
			return false
		}
		var E = $('<li class="om-state-default om-corner-top"> </li>');
		var G = $('<a class="om-tabs-inner"></a>').html(D.title).attr( {
			href : "#" + C,
			tabId : C
		}).css( {
			width : N.tabWidth,
			height : N.tabHeight
		}).appendTo(E);
		if ($.browser.msie && parseInt($.browser.version) == 7) {
			G.attr("hideFocus", "true")
		}
		if ((D.closable === true) || (D.closable == undefined && N.closable)) {
			G.after('<a class="om-icon om-icon-close"></a>')
		}
		var J = {
			tabId : C,
			noHeader : true,
			closed : true,
			lazyLoad : N.lazyLoad,
			onLoad : function() {
				N.onLoadComplete.call(M, C)
			},
			border : false
		};
		$.extend(J, D);
		var I = new o($("<div></div>")[0], J);
		if (D.index == L.length) {
			L[D.index] = I;
			E.appendTo(K)
		} else {
			L.splice(D.index, 0, I);
			K.children().eq(D.index).before(E)
		}
		j(M) && A(M);
		c(M);
		g(M);
		a(M);
		N.onAdd.call(M, J);
		i(M, D.index)
	}
	function d(J, G) {
		var F = $.data(J, "omtabs"), K = F.options, E = F.omtabs, I = F.items;
		var C = E.find(">div.om-tabs-headers");
		var H = E.find(">div.om-tabs-panels");
		var D = E.height();
		G = (G === undefined ? K.active : G);
		if (typeof G == "string") {
			G = t(J, G)
		}
		if (K.onBeforeClose.call(J, G) == false) {
			return false
		}
		C.find("li").eq(G).remove();
		H.children().eq(G).remove();
		I.splice(G, 1);
		if (H.children().length == 0) {
			H.css( {
				height : D - C.outerHeight()
			})
		}
		K.onClose.call(J, G);
		if (I.length == 0) {
			K.active = -1;
			K.activeTabId = null;
			return
		} else {
			if (G == K.active) {
				K.active = -1;
				!I[G] && (G = 0);
				i(J, G)
			} else {
				G < K.active && K.active--;
				j(J) && A(J)
			}
		}
	}
	function s(E) {
		var H = $.data(E, "omtabs"), G = H.options, J = H.omtabs, D = H.items;
		var I = J.find(">div.om-tabs-headers");
		var F = J.find(">div.om-tabs-panels");
		var C = J.height();
		if (G.onBeforeCloseAll.call(E) == false) {
			return false
		}
		I.find("li").remove();
		F.children().remove();
		D.splice(0, D.length);
		F.css( {
			height : C - I.outerHeight()
		});
		G.active = -1;
		G.activeTabId = null;
		G.onCloseAll.call(E)
	}
	function j(K) {
		var F = $.data(K, "omtabs"), L = F.options, E = F.omtabs;
		if (!L.scrollable) {
			return false
		}
		var I = E.find(">div.om-tabs-headers ul");
		var H = 0, J = false;
		if (I.hasClass("om-tabs-scrollable")) {
			J = true;
			I.removeClass("om-tabs-scrollable")
		}
		H += parseInt(I.css("paddingLeft")) + parseInt(I.css("paddingRight"));
		if (J == true) {
			J = false;
			I.addClass("om-tabs-scrollable")
		}
		I.children().each(function() {
			H += $(this).outerWidth(true)
		});
		if (H > I.parent().innerWidth()) {
			if (!I.hasClass("om-tabs-scrollable")) {
				var D = $("<span></span>").insertBefore(I).addClass(
						"om-tabs-scroll-left");
				var G = $("<span></span>").insertAfter(I).addClass(
						"om-tabs-scroll-right");
				var C = (I.height() - D.height()) / 2;
				D.add(G).css( {
					marginTop : C,
					marginBottom : C
				});
				I.addClass("om-tabs-scrollable")
			}
			return true
		} else {
			I.siblings().remove();
			I.removeClass("om-tabs-scrollable");
			return false
		}
	}
	function w(C) {
		return function() {
			A(C)
		}
	}
	function A(M) {
		var G = $.data(M, "omtabs").omtabs;
		var F = G.find(">div.om-tabs-headers");
		var J = F.children("ul");
		var L = J.prev();
		var I = J.next();
		var K = J.children(":last");
		var C = F.offset().left, H = I.offset().left, D = J.offset().left, E = K
				.offset().left
				+ K.outerWidth(true);
		if (D < C) {
			L.removeClass("om-tabs-scroll-disabled")
		} else {
			L.addClass("om-tabs-scroll-disabled")
		}
		if (E > H) {
			I.removeClass("om-tabs-scroll-disabled")
		} else {
			I.addClass("om-tabs-scroll-disabled")
		}
	}
	function l(D, J, G) {
		var I = $.data(D, "omtabs").omtabs;
		var F = I.find(">div.om-tabs-headers ul");
		var C = F.children(":last");
		if (J == 0) {
			return
		}
		var E = J > 0 ? F.prev().offset() : F.next().offset();
		var H = function(L) {
			if (J > 0 && F.prev().hasClass(".om-tabs-scroll-disabled") || J < 0
					&& F.next().hasClass(".om-tabs-scroll-disabled")) {
				F.stop(true, true);
				$(D).clearQueue();
				return
			}
			var K = false;
			J = (J > 0) ? "+=" + Math.min(E.left - F.offset().left, J) : "-="
					+ Math.min(C.offset().left + C.outerWidth(true) - E.left,
							Math.abs(J));
			$.data(D, "omtabs").isScrolling = true;
			F.animate( {
				left : J + "px"
			}, "normal", "swing", function() {
				!!G && G();
				$.data(D, "omtabs").isScrolling = false;
				L()
			})
		};
		$(D).queue(H);
		if ($(D).queue().length == 1 && !$.data(D, "omtabs").isScrolling) {
			$(D).dequeue()
		}
	}
	function m(C) {
		return $.data(C, "omtabs").items.length
	}
	function h(C) {
		j(C) && A(C)
	}
	function z(D, E) {
		var C = $.data(D, "omtabs").items;
		var F, G;
		E.url = $.trim(E.url);
		E.content = $.trim(E.content);
		if (E.url) {
			F = E.url;
			G = true
		} else {
			F = E.content;
			G = false
		}
		$(C[E.index]).omPanel("setDataSource", F, G)
	}
	function b(D, E) {
		var C = $.data(D, "omtabs").items;
		$(C[E]).omPanel("reload")
	}
	var x = {
		disable : function() {
		},
		enable : function() {
		},
		add : function(C) {
			this.each(function() {
				v(this, C)
			})
		},
		close : function(C) {
			this.each(function() {
				d(this, C)
			})
		},
		closeAll : function() {
			this.each(function() {
				s(this)
			})
		},
		activate : function(C) {
			this.each(function() {
				i(this, C)
			})
		},
		getAlter : function(C) {
			return t(this[0], C)
		},
		getActivated : function() {
			return f(this[0])
		},
		getLength : function() {
			return m(this[0])
		},
		setDataSource : function(C) {
			if (C.index === undefined || (!C.url && !C.content)) {
				return
			}
			this.each(function() {
				z(this, C)
			})
		},
		reload : function(C) {
			this.each(function() {
				b(this, C)
			})
		},
		doLayout : function() {
			this.each(function() {
				h(this)
			})
		}
	};
	var p = {
		width : "auto",
		height : "auto",
		border : true,
		tabWidth : 80,
		tabHeight : 25,
		disabled : false,
		scrollable : true,
		closable : false,
		position : "top",
		switchMode : "click",
		autoPlay : false,
		interval : 1000,
		active : 0,
		lazyLoad : false,
		onBeforeActivate : function(C) {
		},
		onActivate : function(C) {
		},
		onBeforeClose : function(C) {
		},
		onClose : function(C) {
		},
		onBeforeCloseAll : function() {
		},
		onCloseAll : function() {
		},
		onAdd : function(C) {
		},
		onBeforeAdd : function(C) {
		},
		onLoadComplete : function(C) {
		}
	};
	$.fn.omTabs = function(C) {
		if (C && typeof (C) == "string") {
			if (x[C]) {
				return x[C].apply(this, Array.prototype.slice
						.call(arguments, 1))
			}
			return null
		}
		return this.each(function() {
			var E = $.data(this, "omtabs");
			var D;
			if (E) {
				$.extend(E.options, C)
			} else {
				D = $.extend( {}, p, C);
				E = $.data(this, "omtabs", {
					options : D
				});
				$.data(this, "omtabs").omtabs = k(this);
				$.data(this, "omtabs").items = q(this)
			}
			B(this);
			u(this);
			a(this)
		})
	}
})(jQuery);
(function(a) {
	a.treeview = {};
	var b = (a.treeview.classes = {
		open : "open",
		closed : "closed",
		expandable : "expandable",
		expandableHitarea : "expandable-hitarea",
		lastExpandableHitarea : "lastExpandable-hitarea",
		collapsable : "collapsable",
		collapsableHitarea : "collapsable-hitarea",
		lastCollapsableHitarea : "lastCollapsable-hitarea",
		lastCollapsable : "lastCollapsable",
		lastExpandable : "lastExpandable",
		last : "last",
		hitarea : "hitarea"
	});
	a
			.widget(
					"om.omTree",
					{
						_swapClass : function(f, e, d) {
							var c = f.filter("." + e);
							f.filter("." + d).removeClass(d).addClass(e);
							c.removeClass(e).addClass(d)
						},
						_getParentNode : function(d) {
							if (d) {
								var c = a(d).parent().parent();
								if (c && c.hasClass("om-tree-node")) {
									return c
								}
							}
							return null
						},
						_setParentCheckbox : function(e) {
							var h = this._getParentNode(e);
							if (h) {
								var g = h.find(">ul >li >div.tree-checkbox");
								var c = g.length;
								var i = g.filter(".checkbox_full").length;
								var d = g.filter(".checkbox_part").length;
								var f = h.find(">div.tree-checkbox");
								f.removeClass("checkbox_full checkbox_part");
								if (i == c) {
									f.addClass("checkbox_full")
								} else {
									if (i > 0 || d > 0) {
										f.addClass("checkbox_part")
									}
								}
								this._setParentCheckbox(h)
							}
						},
						_setChildCheckbox : function(d, c) {
							var e = d.find(">ul").find(".tree-checkbox");
							e.removeClass("checkbox_part checkbox_full");
							if (c) {
								e.addClass("checkbox_full")
							}
						},
						_applyEvents : function(f) {
							var j = this, k = j.options, h = k.onClick, d = k.onDblClick, i = k.onRightClick, e = k.onDrag, g = k.onSelect, c = k.onDrop;
							f.find("span a").bind(
									"click",
									function(m) {
										var l = j.element.data("nodes")[a(this)
												.parent().parent().attr("id")];
										h && h.call(j, l, m);
										j.select(l);
										return false
									}).bind(
									"dblclick",
									function(o) {
										var l = a(this).parent().parent();
										var m = j.element.data("nodes")[l
												.attr("id")];
										if (l.has("ul").length > 0
												&& a(o.target, this)) {
											j.toggler(l)
										}
										d && d.call(j, m, o)
									}).bind(
									"contextmenu",
									function(m) {
										var l = j.element.data("nodes")[a(this)
												.parent().parent().attr("id")];
										i && i.call(j, l, m)
									}).bind("mouseover mouseout", function(l) {
								if (l.type == "mouseover") {
									a(this).addClass("hover")
								} else {
									if (l.type == "mouseout") {
										a(this).removeClass("hover")
									}
								}
								return false
							});
							j._bindHitEvent(f);
							f.find("div.tree-checkbox").click(function(o) {
								var m = a(this).parent();
								var l = j.findByNId(m.attr("id"));
								j._toggleCheck(m, j.isCheck(l))
							});
							if (j.options.draggable) {
								f.omDraggable( {
									revert : "invalid",
									onDrag : function(l) {
										e && e(node, l)
									}
								});
								f
										.find(">span")
										.omDroppable(
												{
													accept : "li.om-tree-node",
													hoverClass : "treenode-droppable",
													onDrop : function(o, l) {
														var r, s, t = l;
														var m = a(o.target)
																.parent();
														var q = m.find(">ul");
														t.css("left", "");
														t.css("top", "");
														var u = j.findByNId(t
																.attr("id"));
														if (m.has("ul").length > 0) {
															r = j
																	.findByNId(m
																			.attr("id"))
														} else {
															s = j
																	.findByNId(m
																			.attr("id"))
														}
														j.remove(u);
														j.insert(u, r, s, true);
														var p = j.findByNId(t
																.parent().find(
																		"li")
																.attr("id"));
														c && c(p, o)
													}
												})
							}
							f.bind("mousedown", function(l) {
								l.stopPropagation()
							})
						},
						_bindHitEvent : function(d) {
							var c = this;
							d.find("div.hitarea").click(function() {
								var e = a(this).parent();
								c.toggler(e)
							})
						},
						options : {
							initExpandLevel : 0,
							lineHover : false,
							showIcon : true,
							showLine : true,
							showCheckbox : false,
							cascadeCheck : true,
							draggable : false,
							filter : null,
							nodeCount : 0
						},
						_create : function() {
							var c = this, d = c.options;
							if (d.toggle) {
								var f = d.toggle;
								d.toggle = function() {
									return f.apply(a(this).parent()[0],
											arguments)
								}
							}
							var e = c.element;
							e.data("nodes", []);
							e.data("selected", "");
							e.addClass("treeview")
						},
						updateNode : function(f) {
							var d = this, e = d.options;
							var c = f.find("li");
							d._applyEvents(c);
							if (e.control) {
								d._treeController(d, e.control)
							}
						},
						toggler : function(f) {
							var j = this, k = j.options;
							var c = f.attr("id");
							var d = j.findByNId(c);
							var e = f.hasClass(b.expandable);
							if (e) {
								var i = k.onBeforeExpand;
								if (i && false === i(d)) {
									return j
								}
							} else {
								var g = k.onBeforeCollapse;
								if (g && false === g(d)) {
									return j
								}
							}
							var h = f.find(f.find(">.hitarea"));
							j._swapClass(h, b.collapsableHitarea,
									b.expandableHitarea);
							j._swapClass(h, b.lastCollapsableHitarea,
									b.lastExpandableHitarea);
							j._swapClass(f, b.collapsable, b.expandable);
							j
									._swapClass(f, b.lastCollapsable,
											b.lastExpandable);
							f.find(">ul").each(function() {
								if (e) {
									a(this).show();
									var m = k.onExpand;
									m && m.call(this, d)
								} else {
									a(this).hide();
									var l = k.onCollapse;
									l && l.call(this, d)
								}
							})
						},
						_init : function() {
							var c = this, d = c.options, f = c.element, e = d.dataSource;
							f.data("init_dataSource", e);
							if (e) {
								if (typeof e == "string") {
									c._ajaxLoad(f, e)
								} else {
									if (typeof e == "object") {
										c._appendNodes.apply(c, [ f, e ]);
										c.updateNode(f)
									}
								}
							}
						},
						_ajaxLoad : function(h, e) {
							var c = this, d = this.options, g = d.onBeforeLoad, i = d.onSuccess, f = d.onError;
							g && g(c.findByNId(h.parent().attr("id")));
							a.ajax( {
								url : e,
								method : "POST",
								dataType : "json",
								success : function(j) {
									c._appendNodes.apply(c, [ h, j ]);
									c.setData(j);
									c.updateNode(h);
									i && i.call(c, j)
								},
								error : function(j, l, k) {
									f && f.call(c, j, l, k)
								}
							})
						},
						check : function(c) {
							this._toggleCheck(a("#" + c.nid), false)
						},
						uncheck : function(c) {
							this._toggleCheck(a("#" + c.nid), true)
						},
						_toggleCheck : function(h, f) {
							var g = h.find(">div.tree-checkbox"), c = this, d = c.options, e = d.onCheck;
							if (f) {
								g.removeClass("checkbox_part checkbox_full")
							} else {
								g.removeClass("checkbox_part").addClass(
										"checkbox_full")
							}
							if (c.options.cascadeCheck) {
								c._setChildCheckbox(h, !f);
								c._setParentCheckbox(h)
							}
							e && e(h)
						},
						checkAll : function(c) {
							if (c) {
								this.element.find(".tree-checkbox")
										.removeClass("checkbox_part").addClass(
												"checkbox_full")
							} else {
								this.element.find(".tree-checkbox")
										.removeClass(
												"checkbox_part checkbox_full")
							}
						},
						isCheck : function(c) {
							return a("#" + c.nid).find(">div.tree-checkbox")
									.hasClass("checkbox_full")
						},
						getChecked : function(f) {
							var d = this, c = [];
							var e = f ? ".checkbox_full"
									: ":not(.checkbox_full)";
							this.element.find(".tree-checkbox").filter(e).each(
									function(h, g) {
										c.push(d.element.data("nodes")[a(this)
												.parent().attr("id")])
									});
							return c
						},
						select : function(d) {
							var j = this, k = this.options, i = k.onBeforeSelect, e = k.onSelect;
							if (i && false === i(d)) {
								return j
							}
							var c = a("#" + d.nid);
							var h = a(" >span >a", c);
							h.addClass("selected");
							var f = j.element.data("selected");
							var g = c.attr("id");
							if (f != "" && !(f == g)) {
								a("#" + f + " >span >a")
										.removeClass("selected")
							}
							j.element.data("selected", g);
							e && e.call(j, d)
						},
						unselect : function(g) {
							var e = this;
							var f = a("#" + g.nid);
							var c = a(" >span >a", f);
							c.removeClass("selected");
							var h = e.element.data("selected");
							var d = f.attr("id");
							if (h == d) {
								e.element.data("selected", "")
							}
						},
						getSelected : function() {
							var c = this.element.data("selected");
							return c ? this.element.data("nodes")[c] : null
						},
						findNodes : function(h, k, g, e) {
							var d = [], c;
							var j = g ? g.children : this.getData();
							e = (e != false) ? true : e;
							if (j && (c = j.length) > 0) {
								for ( var f = 0; f < c; f++) {
									d = this._searchNode.apply(j[f], [ h, k,
											this._searchNode, d, false, e ])
								}
							}
							return d.length > 0 ? d : null
						},
						findNode : function(h, k, g, d) {
							var f, c, j = g ? g.children : this.getData();
							d = (d != false) ? true : d;
							if (j && (c = j.length) > 0) {
								for ( var e = 0; e < c; e++) {
									f = this._searchNode.apply(j[e], [ h, k,
											this._searchNode, [], true, d ]);
									if (f != null) {
										return f
									}
								}
							}
							return null
						},
						findByNId : function(c) {
							return this.element.data("nodes")[c]
						},
						findNodesBy : function(h, g, d) {
							var f, j = g ? g.children : this.getData();
							d = (d != false) ? true : d;
							var c = [];
							if (j && (len = j.length) > 0) {
								for ( var e = 0; e < len; e++) {
									if (h.call(j[e], j[e]) === true) {
										c.push(j[e])
									}
									if (d && j[e].children) {
										f = this.findNodesBy(h, j[e], d);
										if (f) {
											c = c.concat(f)
										}
									}
								}
							}
							return c.length > 0 ? c : null
						},
						findNodeBy : function(h, g, d) {
							var f, j = g ? g.children : this.getData();
							d = (d != false) ? true : d;
							if (j && (c = j.length) > 0) {
								for ( var e = 0, c = j.length; e < c; e++) {
									if (h.call(j[e], j[e]) === true) {
										return j[e]
									}
									if (d) {
										f = this.findNodeBy(h, j[e], d);
										if (f != null) {
											return f
										}
									}
								}
							}
							return null
						},
						_searchNode : function(h, k, f, c, j, d) {
							if (j) {
								if (this[h] == k) {
									return this
								}
								if (this.children && this.children.length && d) {
									for ( var g in this.children) {
										var e = f.apply(this.children[g], [ h,
												k, f, [], true ]);
										if (e) {
											return e
										}
									}
								}
							} else {
								if (this[h] == k) {
									c.push(this)
								}
								if (this.children && this.children.length && d) {
									a.each(this.children, f, [ h, k, f, c,
											false, d ])
								}
								return c
							}
						},
						getParent : function(d) {
							var c = this.element.data("nodes")["pid" + d.nid];
							return c ? this.findByNId(c) : null
						},
						getChildren : function(c) {
							return c.children
						},
						getData : function() {
							return this.options.dataSource
						},
						setData : function(c) {
							this.options.dataSource = c;
							this.element.data("init_dataSource", c)
						},
						expand : function(c) {
							if (c.nid) {
								this._collapseHandler(b.expandable, a("#"
										+ c.nid))
							}
						},
						collapse : function(c) {
							if (c.nid) {
								this._collapseHandler(b.collapsable, a("#"
										+ c.nid))
							}
						},
						expandAll : function() {
							this._collapseHandler(b.expandable, this.element)
						},
						collapseAll : function() {
							this._collapseHandler(b.collapsable, this.element)
						},
						_collapseHandler : function(c, d) {
							this.toggler(a("div." + b.hitarea, d)
									.filter(
											function() {
												return c ? a(this).parent(
														"." + c).length : true
											}).parent());
							return false
						},
						refresh : function(j) {
							var f = this, d = f.element;
							var h = f.getData();
							if (!j) {
								d.data("nodes", []);
								f.setData( []);
								d.html("");
								d.data("init_dataSource", h);
								if (typeof h == "string") {
									f._ajaxLoad(d, h)
								} else {
									if (typeof h == "object") {
										for ( var g = 0; g < h.length; g++) {
											f.insert(h[g])
										}
									}
								}
							} else {
								var c = a("#" + j.nid).next();
								var e = d.data("nodes")["pid" + j.nid];
								f.remove(j);
								f.insert(j, f.findByNId(e), f.findByNId(c
										.attr("id")))
							}
						},
						_appendNodes : function(w, m, e, f) {
							var j = this, u = [];
							var g = j.options.showCheckbox;
							var c = j.element.attr("id") ? j.element.attr("id")
									: ("treeId" + parseInt(Math.random() * 1000));
							j.element.attr("id", c);
							for ( var r = 0, p = m.length; r < p; r++) {
								var o = m[r], k = (r == (m.length - 1));
								var x = "om-tree-node "
										+ (g ? "treenode-checkable " : "")
										+ (o.hasChildren ? "hasChildren " : "");
								var h = c + "_" + (++j.options.nodeCount);
								o.nid = h;
								var d = j.element.data("nodes");
								d[o.nid] = o;
								if (typeof w == "string") {
									d["pid" + o.nid] = w;
									if (k) {
										w = null
									}
								} else {
									d["pid" + o.nid] = w.parent("li")
											.attr("id")
								}
								var v = [];
								if (o.children && o.children.length > 0) {
									v.push((j._appendNodes(o.nid, o.children))
											.join(""))
								}
								var s = 0;
								if (o.children && (s = o.children.length) > 0
										|| o.hasChildren) {
									if (o.expanded) {
										x = x + "open " + b.collapsable + " "
												+ (k ? b.lastCollapsable : "")
									} else {
										x = x + b.expandable + " "
												+ (k ? b.lastExpandable : "")
									}
								} else {
									x = x + (k ? b.last : "")
								}
								u.push("<li id='", o.nid, "' class='", x, "'>");
								if (o.hasChildren || s > 0) {
									var t = "";
									a.each(x.split(" "), function() {
										t += this + "-hitarea "
									});
									u.push("<div class='", b.hitarea + " " + t,
											"'/>")
								}
								if (g) {
									u.push("<div class='tree-checkbox'/>")
								}
								var q = (o.classes ? o.classes : "");
								if (j.options.showIcon) {
									if (o.hasChildren || o.children
											&& o.children.length > 0) {
										q = q + " folder "
									} else {
										q = q + " file "
									}
								}
								u.push("<span class='", q, "'>",
										"<a href='#'>", o.text, "</a></span>");
								if (o.hasChildren || s > 0) {
									u.push("<ul", " style='display:",
											(o.expanded ? "block" : "none"),
											"'>");
									u.push(v.join(""));
									u.push("</ul>")
								}
								u.push("</li>")
							}
							if (e) {
								if (f) {
									a("#" + e.nid).after(u.join(""))
								} else {
									a("#" + e.nid).before(u.join(""))
								}
							} else {
								if (w) {
									w.append(u.join(""))
								}
							}
							return u
						},
						remove : function(j, l) {
							var k, m = this, f = l ? l.children : m.getData();
							for ( var g in f) {
								if (f[g] == j) {
									var c = [];
									c = m._findChildrenId(j, c);
									c.push(j.nid);
									for ( var d = 0, h = c.length; d < h; d++) {
										delete m.element.data("nodes")[c[d]];
										delete m.element.data("nodes")["pid"
												+ c[d]]
									}
									if (j.nid == m.element.data("selected")) {
										this.element.data("selected", null)
									}
									var e = a("#" + j.nid).prev();
									if (a("#" + j.nid).next().length < 1
											&& e.length > 0) {
										if (e.hasClass(b.collapsable)) {
											e.addClass(b.lastCollapsable);
											e.find("div.hitarea").addClass(
													b.lastCollapsableHitarea)
										} else {
											if (e.hasClass(b.expandable)) {
												e.addClass(b.lastExpandable);
												e
														.find("div.hitarea")
														.addClass(
																b.lastExpandableHitarea)
											} else {
												e.addClass(b.last)
											}
										}
									}
									a("#" + j.nid).remove();
									f.splice(g, 1);
									if (l && l.nid && f.length < 1) {
										m._changeToFolderOrFile(l, false)
									}
									return true
								} else {
									if (f[g].children) {
										k = m.remove(j, f[g]);
										if (k) {
											return true
										}
									}
								}
							}
							return false
						},
						_findChildrenId : function(g, f) {
							if (g.children) {
								for ( var e = 0, d = g.children, c = d.length; e < c; e++) {
									f.push(d[e].nid);
									if (d[e].children) {
										this._findChildrenId(d[e], f)
									}
								}
							}
							return f
						},
						insert : function(j, p, c, l) {
							var q = this, d = [], o, h, k = a.isArray(j);
							if (k) {
								d = j
							} else {
								d.push(j)
							}
							if (c) {
								p = p
										|| q
												.findByNId(q.element
														.data("nodes")["pid"
														+ c.nid])
							}
							var i, g = p ? p.children : q.getData();
							if (p && (!p.children || p.children.length < 1)) {
								if (!p.hasChildren) {
									q._changeToFolderOrFile(p, true);
									q._bindHitEvent(a("#" + p.nid))
								}
								g = p.children = []
							}
							o = p ? a("#" + p.nid).children("ul").first()
									: q.element;
							h = o.find("li");
							if (c && ((i = a.inArray(c, g)) >= 0)) {
								q._appendNodes(o, d, c, l);
								g.splice(i, 0, j)
							} else {
								q._appendNodes(o, d, c, l);
								if (k) {
									a.merge(g, j)
								} else {
									g.push(j)
								}
							}
							var f = o.find("li").filter(
									"." + b.last + ",." + b.lastCollapsable
											+ ",." + b.lastExpandable).not(
									o.find("li").filter(":last-child:not(ul)"));
							f.removeClass(b.last + " " + b.lastCollapsable
									+ " " + b.lastExpandable);
							f.find(" >div").removeClass(
									b.lastCollapsableHitarea + " "
											+ b.lastExpandableHitarea);
							var e = o.find("li").not(h);
							q._applyEvents(e)
						},
						_changeToFolderOrFile : function(g, h) {
							var f = a("#" + g.nid), d = this;
							if (h) {
								var e = a("<ul/>").css("display", "block")
										.appendTo(f);
								f.addClass("open " + b.collapsable);
								d._swapClass(f, b.last, b.lastCollapsable);
								g.children = []
							} else {
								f.find("ul").remove();
								f.find("div." + b.hitarea).remove();
								f.filter(
										"." + b.lastCollapsable + ",."
												+ b.lastExpandable)
										.removeClass(
												b.lastCollapsable + " "
														+ b.lastExpandable)
										.addClass(b.last);
								f.removeClass("open " + b.collapsable + " "
										+ b.expandable)
							}
							if (d.options.showIcon) {
								d._swapClass(f.children("span"), "file",
										"folder")
							}
							var c = f.filter(":has(>ul)").prepend(
									'<div class="' + b.hitarea + '"/>').find(
									"div." + b.hitarea);
							c.each(function() {
								var i = "";
								a.each(a(this).parent().attr("class")
										.split(" "), function() {
									i += this + "-hitarea "
								});
								a(this).addClass(i)
							})
						},
						modify : function(h, f, e) {
							if (h && f) {
								var d = this, c = a("#" + h.nid).next(), g;
								e = e
										|| this.findByNId(d.element
												.data("nodes")["pid" + h.nid]);
								if (c.is("ul") || c.is("li")) {
									g = d.findByNId(c.attr("id"))
								}
								d.remove(h, e);
								d.insert(f, e, g)
							}
						},
						disable : function() {
						},
						enable : function() {
						}
					})
})(jQuery);